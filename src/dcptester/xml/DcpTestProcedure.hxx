// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

#ifndef DCP_TEST_PROCEDURE_HXX
#define DCP_TEST_PROCEDURE_HXX

#ifndef XSD_USE_CHAR
#define XSD_USE_CHAR
#endif

#ifndef XSD_CXX_TREE_USE_CHAR
#define XSD_CXX_TREE_USE_CHAR
#endif

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/config.hxx>

#if (XSD_INT_VERSION != 4000000L)
#error XSD runtime version mismatch
#endif

#include <xsd/cxx/pre.hxx>

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/types.hxx>

#include <xsd/cxx/xml/error-handler.hxx>

#include <xsd/cxx/xml/dom/auto-ptr.hxx>

#include <xsd/cxx/tree/parsing.hxx>
#include <xsd/cxx/tree/parsing/byte.hxx>
#include <xsd/cxx/tree/parsing/unsigned-byte.hxx>
#include <xsd/cxx/tree/parsing/short.hxx>
#include <xsd/cxx/tree/parsing/unsigned-short.hxx>
#include <xsd/cxx/tree/parsing/int.hxx>
#include <xsd/cxx/tree/parsing/unsigned-int.hxx>
#include <xsd/cxx/tree/parsing/long.hxx>
#include <xsd/cxx/tree/parsing/unsigned-long.hxx>
#include <xsd/cxx/tree/parsing/boolean.hxx>
#include <xsd/cxx/tree/parsing/float.hxx>
#include <xsd/cxx/tree/parsing/double.hxx>
#include <xsd/cxx/tree/parsing/decimal.hxx>

namespace xml_schema
{
  // anyType and anySimpleType.
  //
  typedef ::xsd::cxx::tree::type type;
  typedef ::xsd::cxx::tree::simple_type< char, type > simple_type;
  typedef ::xsd::cxx::tree::type container;

  // 8-bit
  //
  typedef signed char byte;
  typedef unsigned char unsigned_byte;

  // 16-bit
  //
  typedef short short_;
  typedef unsigned short unsigned_short;

  // 32-bit
  //
  typedef int int_;
  typedef unsigned int unsigned_int;

  // 64-bit
  //
  typedef long long long_;
  typedef unsigned long long unsigned_long;

  // Supposed to be arbitrary-length integral types.
  //
  typedef long long integer;
  typedef long long non_positive_integer;
  typedef unsigned long long non_negative_integer;
  typedef unsigned long long positive_integer;
  typedef long long negative_integer;

  // Boolean.
  //
  typedef bool boolean;

  // Floating-point types.
  //
  typedef float float_;
  typedef double double_;
  typedef double decimal;

  // String types.
  //
  typedef ::xsd::cxx::tree::string< char, simple_type > string;
  typedef ::xsd::cxx::tree::normalized_string< char, string > normalized_string;
  typedef ::xsd::cxx::tree::token< char, normalized_string > token;
  typedef ::xsd::cxx::tree::name< char, token > name;
  typedef ::xsd::cxx::tree::nmtoken< char, token > nmtoken;
  typedef ::xsd::cxx::tree::nmtokens< char, simple_type, nmtoken > nmtokens;
  typedef ::xsd::cxx::tree::ncname< char, name > ncname;
  typedef ::xsd::cxx::tree::language< char, token > language;

  // ID/IDREF.
  //
  typedef ::xsd::cxx::tree::id< char, ncname > id;
  typedef ::xsd::cxx::tree::idref< char, ncname, type > idref;
  typedef ::xsd::cxx::tree::idrefs< char, simple_type, idref > idrefs;

  // URI.
  //
  typedef ::xsd::cxx::tree::uri< char, simple_type > uri;

  // Qualified name.
  //
  typedef ::xsd::cxx::tree::qname< char, simple_type, uri, ncname > qname;

  // Binary.
  //
  typedef ::xsd::cxx::tree::buffer< char > buffer;
  typedef ::xsd::cxx::tree::base64_binary< char, simple_type > base64_binary;
  typedef ::xsd::cxx::tree::hex_binary< char, simple_type > hex_binary;

  // Date/time.
  //
  typedef ::xsd::cxx::tree::time_zone time_zone;
  typedef ::xsd::cxx::tree::date< char, simple_type > date;
  typedef ::xsd::cxx::tree::date_time< char, simple_type > date_time;
  typedef ::xsd::cxx::tree::duration< char, simple_type > duration;
  typedef ::xsd::cxx::tree::gday< char, simple_type > gday;
  typedef ::xsd::cxx::tree::gmonth< char, simple_type > gmonth;
  typedef ::xsd::cxx::tree::gmonth_day< char, simple_type > gmonth_day;
  typedef ::xsd::cxx::tree::gyear< char, simple_type > gyear;
  typedef ::xsd::cxx::tree::gyear_month< char, simple_type > gyear_month;
  typedef ::xsd::cxx::tree::time< char, simple_type > time;

  // Entity.
  //
  typedef ::xsd::cxx::tree::entity< char, ncname > entity;
  typedef ::xsd::cxx::tree::entities< char, simple_type, entity > entities;

  typedef ::xsd::cxx::tree::content_order content_order;
  // Flags and properties.
  //
  typedef ::xsd::cxx::tree::flags flags;
  typedef ::xsd::cxx::tree::properties< char > properties;

  // Parsing/serialization diagnostics.
  //
  typedef ::xsd::cxx::tree::severity severity;
  typedef ::xsd::cxx::tree::error< char > error;
  typedef ::xsd::cxx::tree::diagnostics< char > diagnostics;

  // Exceptions.
  //
  typedef ::xsd::cxx::tree::exception< char > exception;
  typedef ::xsd::cxx::tree::bounds< char > bounds;
  typedef ::xsd::cxx::tree::duplicate_id< char > duplicate_id;
  typedef ::xsd::cxx::tree::parsing< char > parsing;
  typedef ::xsd::cxx::tree::expected_element< char > expected_element;
  typedef ::xsd::cxx::tree::unexpected_element< char > unexpected_element;
  typedef ::xsd::cxx::tree::expected_attribute< char > expected_attribute;
  typedef ::xsd::cxx::tree::unexpected_enumerator< char > unexpected_enumerator;
  typedef ::xsd::cxx::tree::expected_text_content< char > expected_text_content;
  typedef ::xsd::cxx::tree::no_prefix_mapping< char > no_prefix_mapping;

  // Error handler callback interface.
  //
  typedef ::xsd::cxx::xml::error_handler< char > error_handler;

  // DOM interaction.
  //
  namespace dom
  {
    // Automatic pointer for DOMDocument.
    //
    using ::xsd::cxx::xml::dom::auto_ptr;

#ifndef XSD_CXX_TREE_TREE_NODE_KEY__XML_SCHEMA
#define XSD_CXX_TREE_TREE_NODE_KEY__XML_SCHEMA
    // DOM user data key for back pointers to tree nodes.
    //
    const XMLCh* const tree_node_key = ::xsd::cxx::tree::user_data_keys::node;
#endif
  }
}

// Forward declarations.
//
namespace DcpTestSuite
{
  class DcpTestProcedure;
  class SendingPayloadField;
  class ReceivingPayloadField;
  class TransportProtocols;
  class Transition;
  class acceptingSteps;
  class Int8;
  class Int16;
  class Int32;
  class Int64;
  class Uint8;
  class Uint16;
  class Uint32;
  class Uint64;
  class Float32;
  class Float64;
  class String;
  class Binary;
  class Int81;
  class Int161;
  class Int321;
  class Int641;
  class Uint81;
  class Uint161;
  class Uint321;
  class Uint641;
  class Float321;
  class Float641;
  class String1;
  class Binary1;
  class UDP_IPv4;
  class USB;
  class Bluetooth;
  class TCP_IPv4;
  class Sending;
  class Receiving;
  class value;
  class value1;
  class value2;
  class value3;
  class value4;
  class value5;
  class value6;
  class value7;
  class value8;
  class value9;
  class value10;
  class value11;
  class value12;
  class value13;
  class value14;
  class value15;
  class value16;
  class value17;
  class value18;
  class value19;
  class Control;
  class DAT_input_output;
  class DAT_parameter;
  class DataPipe;
  class Address;
  class DAT_input_output1;
  class DAT_parameter1;
  class ClockTime;
  class CFG_time_res;
  class CFG_steps;
  class CFG_input;
  class CFG_output;
  class CFG_source_network_information;
  class CFG_source_network_information_UDP_IPv4;
  class CFG_source_network_information_USB;
  class CFG_source_network_information_Bluetooth;
  class CFG_source_network_information_TCP_IPv4;
  class CFG_target_network_information;
  class CFG_target_network_information_UDP_IPv4;
  class CFG_target_network_information_USB;
  class CFG_target_network_information_Bluetooth;
  class CFG_target_network_information_TCP_IPv4;
  class CFG_clear;
  class CFG_parameter;
  class CFG_tunable_parameter;
  class CFG_param_network_information;
  class CFG_param_network_information_UDP_IPv4;
  class CFG_param_network_information_USB;
  class CFG_param_network_information_Bluetooth;
  class CFG_param_network_information_TCP_IPv4;
  class CFG_logging;
  class CFG_scope;
  class STC_register;
  class STC_deregister;
  class STC_prepare;
  class STC_configure;
  class STC_initialize;
  class STC_run;
  class STC_do_step;
  class STC_send_outputs;
  class STC_stop;
  class STC_reset;
  class INF_state;
  class INF_error;
  class INF_log;
  class DAT_input_output2;
  class DAT_parameter2;
  class RSP_ack;
  class RSP_error_ack;
  class RSP_nack;
  class RSP_state_ack;
  class NTF_state_changed;
  class RSP_log_ack;
  class NTF_log;
  class DAT_input_output3;
  class DAT_parameter3;
  class AvailablePortRange;
  class AvailablePort;
  class direction;
  class bd_addr;
  class port;
  class slave_uuid;
  class Payload;
  class Int82;
  class Int162;
  class Int322;
  class Int642;
  class Uint82;
  class Uint162;
  class Uint322;
  class Uint642;
  class Float322;
  class Float642;
  class value20;
  class value21;
  class value22;
  class value23;
  class value24;
  class value25;
  class value26;
  class value27;
  class value28;
  class value29;
}


#include <memory>    // ::std::auto_ptr
#include <limits>    // std::numeric_limits
#include <algorithm> // std::binary_search

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/containers.hxx>
#include <xsd/cxx/tree/list.hxx>

#include <xsd/cxx/xml/dom/parsing-header.hxx>

namespace DcpTestSuite
{
  class DcpTestProcedure: public ::xml_schema::type
  {
    public:
    // TransportProtocols
    //
    typedef ::DcpTestSuite::TransportProtocols TransportProtocols_type;
    typedef ::xsd::cxx::tree::traits< TransportProtocols_type, char > TransportProtocols_traits;

    const TransportProtocols_type&
    TransportProtocols () const;

    TransportProtocols_type&
    TransportProtocols ();

    void
    TransportProtocols (const TransportProtocols_type& x);

    void
    TransportProtocols (::std::auto_ptr< TransportProtocols_type > p);

    // Transition
    //
    typedef ::DcpTestSuite::Transition Transition_type;
    typedef ::xsd::cxx::tree::sequence< Transition_type > Transition_sequence;
    typedef Transition_sequence::iterator Transition_iterator;
    typedef Transition_sequence::const_iterator Transition_const_iterator;
    typedef ::xsd::cxx::tree::traits< Transition_type, char > Transition_traits;

    const Transition_sequence&
    Transition () const;

    Transition_sequence&
    Transition ();

    void
    Transition (const Transition_sequence& s);

    // version
    //
    typedef ::xml_schema::double_ version_type;
    typedef ::xsd::cxx::tree::traits< version_type, char, ::xsd::cxx::tree::schema_type::double_ > version_traits;

    const version_type&
    version () const;

    version_type&
    version ();

    void
    version (const version_type& x);

    // name
    //
    typedef ::xml_schema::string name_type;
    typedef ::xsd::cxx::tree::optional< name_type > name_optional;
    typedef ::xsd::cxx::tree::traits< name_type, char > name_traits;

    const name_optional&
    name () const;

    name_optional&
    name ();

    void
    name (const name_type& x);

    void
    name (const name_optional& x);

    void
    name (::std::auto_ptr< name_type > p);

    // acceptingSteps
    //
    typedef ::DcpTestSuite::acceptingSteps acceptingSteps_type;
    typedef ::xsd::cxx::tree::optional< acceptingSteps_type > acceptingSteps_optional;
    typedef ::xsd::cxx::tree::traits< acceptingSteps_type, char > acceptingSteps_traits;

    const acceptingSteps_optional&
    acceptingSteps () const;

    acceptingSteps_optional&
    acceptingSteps ();

    void
    acceptingSteps (const acceptingSteps_type& x);

    void
    acceptingSteps (const acceptingSteps_optional& x);

    void
    acceptingSteps (::std::auto_ptr< acceptingSteps_type > p);

    // Constructors.
    //
    DcpTestProcedure (const TransportProtocols_type&,
                      const version_type&);

    DcpTestProcedure (::std::auto_ptr< TransportProtocols_type >,
                      const version_type&);

    DcpTestProcedure (const ::xercesc::DOMElement& e,
                      ::xml_schema::flags f = 0,
                      ::xml_schema::container* c = 0);

    DcpTestProcedure (const DcpTestProcedure& x,
                      ::xml_schema::flags f = 0,
                      ::xml_schema::container* c = 0);

    virtual DcpTestProcedure*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    DcpTestProcedure&
    operator= (const DcpTestProcedure& x);

    virtual 
    ~DcpTestProcedure ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ::xsd::cxx::tree::one< TransportProtocols_type > TransportProtocols_;
    Transition_sequence Transition_;
    ::xsd::cxx::tree::one< version_type > version_;
    name_optional name_;
    acceptingSteps_optional acceptingSteps_;
  };

  class SendingPayloadField: public ::xml_schema::type
  {
    public:
    // Int8
    //
    typedef ::DcpTestSuite::Int8 Int8_type;
    typedef ::xsd::cxx::tree::optional< Int8_type > Int8_optional;
    typedef ::xsd::cxx::tree::traits< Int8_type, char > Int8_traits;

    const Int8_optional&
    Int8 () const;

    Int8_optional&
    Int8 ();

    void
    Int8 (const Int8_type& x);

    void
    Int8 (const Int8_optional& x);

    void
    Int8 (::std::auto_ptr< Int8_type > p);

    // Int16
    //
    typedef ::DcpTestSuite::Int16 Int16_type;
    typedef ::xsd::cxx::tree::optional< Int16_type > Int16_optional;
    typedef ::xsd::cxx::tree::traits< Int16_type, char > Int16_traits;

    const Int16_optional&
    Int16 () const;

    Int16_optional&
    Int16 ();

    void
    Int16 (const Int16_type& x);

    void
    Int16 (const Int16_optional& x);

    void
    Int16 (::std::auto_ptr< Int16_type > p);

    // Int32
    //
    typedef ::DcpTestSuite::Int32 Int32_type;
    typedef ::xsd::cxx::tree::optional< Int32_type > Int32_optional;
    typedef ::xsd::cxx::tree::traits< Int32_type, char > Int32_traits;

    const Int32_optional&
    Int32 () const;

    Int32_optional&
    Int32 ();

    void
    Int32 (const Int32_type& x);

    void
    Int32 (const Int32_optional& x);

    void
    Int32 (::std::auto_ptr< Int32_type > p);

    // Int64
    //
    typedef ::DcpTestSuite::Int64 Int64_type;
    typedef ::xsd::cxx::tree::optional< Int64_type > Int64_optional;
    typedef ::xsd::cxx::tree::traits< Int64_type, char > Int64_traits;

    const Int64_optional&
    Int64 () const;

    Int64_optional&
    Int64 ();

    void
    Int64 (const Int64_type& x);

    void
    Int64 (const Int64_optional& x);

    void
    Int64 (::std::auto_ptr< Int64_type > p);

    // Uint8
    //
    typedef ::DcpTestSuite::Uint8 Uint8_type;
    typedef ::xsd::cxx::tree::optional< Uint8_type > Uint8_optional;
    typedef ::xsd::cxx::tree::traits< Uint8_type, char > Uint8_traits;

    const Uint8_optional&
    Uint8 () const;

    Uint8_optional&
    Uint8 ();

    void
    Uint8 (const Uint8_type& x);

    void
    Uint8 (const Uint8_optional& x);

    void
    Uint8 (::std::auto_ptr< Uint8_type > p);

    // Uint16
    //
    typedef ::DcpTestSuite::Uint16 Uint16_type;
    typedef ::xsd::cxx::tree::optional< Uint16_type > Uint16_optional;
    typedef ::xsd::cxx::tree::traits< Uint16_type, char > Uint16_traits;

    const Uint16_optional&
    Uint16 () const;

    Uint16_optional&
    Uint16 ();

    void
    Uint16 (const Uint16_type& x);

    void
    Uint16 (const Uint16_optional& x);

    void
    Uint16 (::std::auto_ptr< Uint16_type > p);

    // Uint32
    //
    typedef ::DcpTestSuite::Uint32 Uint32_type;
    typedef ::xsd::cxx::tree::optional< Uint32_type > Uint32_optional;
    typedef ::xsd::cxx::tree::traits< Uint32_type, char > Uint32_traits;

    const Uint32_optional&
    Uint32 () const;

    Uint32_optional&
    Uint32 ();

    void
    Uint32 (const Uint32_type& x);

    void
    Uint32 (const Uint32_optional& x);

    void
    Uint32 (::std::auto_ptr< Uint32_type > p);

    // Uint64
    //
    typedef ::DcpTestSuite::Uint64 Uint64_type;
    typedef ::xsd::cxx::tree::optional< Uint64_type > Uint64_optional;
    typedef ::xsd::cxx::tree::traits< Uint64_type, char > Uint64_traits;

    const Uint64_optional&
    Uint64 () const;

    Uint64_optional&
    Uint64 ();

    void
    Uint64 (const Uint64_type& x);

    void
    Uint64 (const Uint64_optional& x);

    void
    Uint64 (::std::auto_ptr< Uint64_type > p);

    // Float32
    //
    typedef ::DcpTestSuite::Float32 Float32_type;
    typedef ::xsd::cxx::tree::optional< Float32_type > Float32_optional;
    typedef ::xsd::cxx::tree::traits< Float32_type, char > Float32_traits;

    const Float32_optional&
    Float32 () const;

    Float32_optional&
    Float32 ();

    void
    Float32 (const Float32_type& x);

    void
    Float32 (const Float32_optional& x);

    void
    Float32 (::std::auto_ptr< Float32_type > p);

    // Float64
    //
    typedef ::DcpTestSuite::Float64 Float64_type;
    typedef ::xsd::cxx::tree::optional< Float64_type > Float64_optional;
    typedef ::xsd::cxx::tree::traits< Float64_type, char > Float64_traits;

    const Float64_optional&
    Float64 () const;

    Float64_optional&
    Float64 ();

    void
    Float64 (const Float64_type& x);

    void
    Float64 (const Float64_optional& x);

    void
    Float64 (::std::auto_ptr< Float64_type > p);

    // String
    //
    typedef ::DcpTestSuite::String String_type;
    typedef ::xsd::cxx::tree::optional< String_type > String_optional;
    typedef ::xsd::cxx::tree::traits< String_type, char > String_traits;

    const String_optional&
    String () const;

    String_optional&
    String ();

    void
    String (const String_type& x);

    void
    String (const String_optional& x);

    void
    String (::std::auto_ptr< String_type > p);

    // Binary
    //
    typedef ::DcpTestSuite::Binary Binary_type;
    typedef ::xsd::cxx::tree::optional< Binary_type > Binary_optional;
    typedef ::xsd::cxx::tree::traits< Binary_type, char > Binary_traits;

    const Binary_optional&
    Binary () const;

    Binary_optional&
    Binary ();

    void
    Binary (const Binary_type& x);

    void
    Binary (const Binary_optional& x);

    void
    Binary (::std::auto_ptr< Binary_type > p);

    // pos
    //
    typedef ::xml_schema::unsigned_short pos_type;
    typedef ::xsd::cxx::tree::traits< pos_type, char > pos_traits;

    const pos_type&
    pos () const;

    pos_type&
    pos ();

    void
    pos (const pos_type& x);

    // Constructors.
    //
    SendingPayloadField (const pos_type&);

    SendingPayloadField (const ::xercesc::DOMElement& e,
                         ::xml_schema::flags f = 0,
                         ::xml_schema::container* c = 0);

    SendingPayloadField (const SendingPayloadField& x,
                         ::xml_schema::flags f = 0,
                         ::xml_schema::container* c = 0);

    virtual SendingPayloadField*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    SendingPayloadField&
    operator= (const SendingPayloadField& x);

    virtual 
    ~SendingPayloadField ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    Int8_optional Int8_;
    Int16_optional Int16_;
    Int32_optional Int32_;
    Int64_optional Int64_;
    Uint8_optional Uint8_;
    Uint16_optional Uint16_;
    Uint32_optional Uint32_;
    Uint64_optional Uint64_;
    Float32_optional Float32_;
    Float64_optional Float64_;
    String_optional String_;
    Binary_optional Binary_;
    ::xsd::cxx::tree::one< pos_type > pos_;
  };

  class ReceivingPayloadField: public ::xml_schema::type
  {
    public:
    // Int8
    //
    typedef ::DcpTestSuite::Int81 Int8_type;
    typedef ::xsd::cxx::tree::optional< Int8_type > Int8_optional;
    typedef ::xsd::cxx::tree::traits< Int8_type, char > Int8_traits;

    const Int8_optional&
    Int8 () const;

    Int8_optional&
    Int8 ();

    void
    Int8 (const Int8_type& x);

    void
    Int8 (const Int8_optional& x);

    void
    Int8 (::std::auto_ptr< Int8_type > p);

    // Int16
    //
    typedef ::DcpTestSuite::Int161 Int16_type;
    typedef ::xsd::cxx::tree::optional< Int16_type > Int16_optional;
    typedef ::xsd::cxx::tree::traits< Int16_type, char > Int16_traits;

    const Int16_optional&
    Int16 () const;

    Int16_optional&
    Int16 ();

    void
    Int16 (const Int16_type& x);

    void
    Int16 (const Int16_optional& x);

    void
    Int16 (::std::auto_ptr< Int16_type > p);

    // Int32
    //
    typedef ::DcpTestSuite::Int321 Int32_type;
    typedef ::xsd::cxx::tree::optional< Int32_type > Int32_optional;
    typedef ::xsd::cxx::tree::traits< Int32_type, char > Int32_traits;

    const Int32_optional&
    Int32 () const;

    Int32_optional&
    Int32 ();

    void
    Int32 (const Int32_type& x);

    void
    Int32 (const Int32_optional& x);

    void
    Int32 (::std::auto_ptr< Int32_type > p);

    // Int64
    //
    typedef ::DcpTestSuite::Int641 Int64_type;
    typedef ::xsd::cxx::tree::optional< Int64_type > Int64_optional;
    typedef ::xsd::cxx::tree::traits< Int64_type, char > Int64_traits;

    const Int64_optional&
    Int64 () const;

    Int64_optional&
    Int64 ();

    void
    Int64 (const Int64_type& x);

    void
    Int64 (const Int64_optional& x);

    void
    Int64 (::std::auto_ptr< Int64_type > p);

    // Uint8
    //
    typedef ::DcpTestSuite::Uint81 Uint8_type;
    typedef ::xsd::cxx::tree::optional< Uint8_type > Uint8_optional;
    typedef ::xsd::cxx::tree::traits< Uint8_type, char > Uint8_traits;

    const Uint8_optional&
    Uint8 () const;

    Uint8_optional&
    Uint8 ();

    void
    Uint8 (const Uint8_type& x);

    void
    Uint8 (const Uint8_optional& x);

    void
    Uint8 (::std::auto_ptr< Uint8_type > p);

    // Uint16
    //
    typedef ::DcpTestSuite::Uint161 Uint16_type;
    typedef ::xsd::cxx::tree::optional< Uint16_type > Uint16_optional;
    typedef ::xsd::cxx::tree::traits< Uint16_type, char > Uint16_traits;

    const Uint16_optional&
    Uint16 () const;

    Uint16_optional&
    Uint16 ();

    void
    Uint16 (const Uint16_type& x);

    void
    Uint16 (const Uint16_optional& x);

    void
    Uint16 (::std::auto_ptr< Uint16_type > p);

    // Uint32
    //
    typedef ::DcpTestSuite::Uint321 Uint32_type;
    typedef ::xsd::cxx::tree::optional< Uint32_type > Uint32_optional;
    typedef ::xsd::cxx::tree::traits< Uint32_type, char > Uint32_traits;

    const Uint32_optional&
    Uint32 () const;

    Uint32_optional&
    Uint32 ();

    void
    Uint32 (const Uint32_type& x);

    void
    Uint32 (const Uint32_optional& x);

    void
    Uint32 (::std::auto_ptr< Uint32_type > p);

    // Uint64
    //
    typedef ::DcpTestSuite::Uint641 Uint64_type;
    typedef ::xsd::cxx::tree::optional< Uint64_type > Uint64_optional;
    typedef ::xsd::cxx::tree::traits< Uint64_type, char > Uint64_traits;

    const Uint64_optional&
    Uint64 () const;

    Uint64_optional&
    Uint64 ();

    void
    Uint64 (const Uint64_type& x);

    void
    Uint64 (const Uint64_optional& x);

    void
    Uint64 (::std::auto_ptr< Uint64_type > p);

    // Float32
    //
    typedef ::DcpTestSuite::Float321 Float32_type;
    typedef ::xsd::cxx::tree::optional< Float32_type > Float32_optional;
    typedef ::xsd::cxx::tree::traits< Float32_type, char > Float32_traits;

    const Float32_optional&
    Float32 () const;

    Float32_optional&
    Float32 ();

    void
    Float32 (const Float32_type& x);

    void
    Float32 (const Float32_optional& x);

    void
    Float32 (::std::auto_ptr< Float32_type > p);

    // Float64
    //
    typedef ::DcpTestSuite::Float641 Float64_type;
    typedef ::xsd::cxx::tree::optional< Float64_type > Float64_optional;
    typedef ::xsd::cxx::tree::traits< Float64_type, char > Float64_traits;

    const Float64_optional&
    Float64 () const;

    Float64_optional&
    Float64 ();

    void
    Float64 (const Float64_type& x);

    void
    Float64 (const Float64_optional& x);

    void
    Float64 (::std::auto_ptr< Float64_type > p);

    // String
    //
    typedef ::DcpTestSuite::String1 String_type;
    typedef ::xsd::cxx::tree::optional< String_type > String_optional;
    typedef ::xsd::cxx::tree::traits< String_type, char > String_traits;

    const String_optional&
    String () const;

    String_optional&
    String ();

    void
    String (const String_type& x);

    void
    String (const String_optional& x);

    void
    String (::std::auto_ptr< String_type > p);

    // Binary
    //
    typedef ::DcpTestSuite::Binary1 Binary_type;
    typedef ::xsd::cxx::tree::optional< Binary_type > Binary_optional;
    typedef ::xsd::cxx::tree::traits< Binary_type, char > Binary_traits;

    const Binary_optional&
    Binary () const;

    Binary_optional&
    Binary ();

    void
    Binary (const Binary_type& x);

    void
    Binary (const Binary_optional& x);

    void
    Binary (::std::auto_ptr< Binary_type > p);

    // pos
    //
    typedef ::xml_schema::unsigned_short pos_type;
    typedef ::xsd::cxx::tree::traits< pos_type, char > pos_traits;

    const pos_type&
    pos () const;

    pos_type&
    pos ();

    void
    pos (const pos_type& x);

    // Constructors.
    //
    ReceivingPayloadField (const pos_type&);

    ReceivingPayloadField (const ::xercesc::DOMElement& e,
                           ::xml_schema::flags f = 0,
                           ::xml_schema::container* c = 0);

    ReceivingPayloadField (const ReceivingPayloadField& x,
                           ::xml_schema::flags f = 0,
                           ::xml_schema::container* c = 0);

    virtual ReceivingPayloadField*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    ReceivingPayloadField&
    operator= (const ReceivingPayloadField& x);

    virtual 
    ~ReceivingPayloadField ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    Int8_optional Int8_;
    Int16_optional Int16_;
    Int32_optional Int32_;
    Int64_optional Int64_;
    Uint8_optional Uint8_;
    Uint16_optional Uint16_;
    Uint32_optional Uint32_;
    Uint64_optional Uint64_;
    Float32_optional Float32_;
    Float64_optional Float64_;
    String_optional String_;
    Binary_optional Binary_;
    ::xsd::cxx::tree::one< pos_type > pos_;
  };

  class TransportProtocols: public ::xml_schema::type
  {
    public:
    // UDP_IPv4
    //
    typedef ::DcpTestSuite::UDP_IPv4 UDP_IPv4_type;
    typedef ::xsd::cxx::tree::optional< UDP_IPv4_type > UDP_IPv4_optional;
    typedef ::xsd::cxx::tree::traits< UDP_IPv4_type, char > UDP_IPv4_traits;

    const UDP_IPv4_optional&
    UDP_IPv4 () const;

    UDP_IPv4_optional&
    UDP_IPv4 ();

    void
    UDP_IPv4 (const UDP_IPv4_type& x);

    void
    UDP_IPv4 (const UDP_IPv4_optional& x);

    void
    UDP_IPv4 (::std::auto_ptr< UDP_IPv4_type > p);

    // CAN
    //
    typedef ::xml_schema::type CAN_type;
    typedef ::xsd::cxx::tree::optional< CAN_type > CAN_optional;
    typedef ::xsd::cxx::tree::traits< CAN_type, char > CAN_traits;

    const CAN_optional&
    CAN () const;

    CAN_optional&
    CAN ();

    void
    CAN (const CAN_type& x);

    void
    CAN (const CAN_optional& x);

    void
    CAN (::std::auto_ptr< CAN_type > p);

    // USB
    //
    typedef ::DcpTestSuite::USB USB_type;
    typedef ::xsd::cxx::tree::optional< USB_type > USB_optional;
    typedef ::xsd::cxx::tree::traits< USB_type, char > USB_traits;

    const USB_optional&
    USB () const;

    USB_optional&
    USB ();

    void
    USB (const USB_type& x);

    void
    USB (const USB_optional& x);

    void
    USB (::std::auto_ptr< USB_type > p);

    // Bluetooth
    //
    typedef ::DcpTestSuite::Bluetooth Bluetooth_type;
    typedef ::xsd::cxx::tree::optional< Bluetooth_type > Bluetooth_optional;
    typedef ::xsd::cxx::tree::traits< Bluetooth_type, char > Bluetooth_traits;

    const Bluetooth_optional&
    Bluetooth () const;

    Bluetooth_optional&
    Bluetooth ();

    void
    Bluetooth (const Bluetooth_type& x);

    void
    Bluetooth (const Bluetooth_optional& x);

    void
    Bluetooth (::std::auto_ptr< Bluetooth_type > p);

    // TCP_IPv4
    //
    typedef ::DcpTestSuite::TCP_IPv4 TCP_IPv4_type;
    typedef ::xsd::cxx::tree::optional< TCP_IPv4_type > TCP_IPv4_optional;
    typedef ::xsd::cxx::tree::traits< TCP_IPv4_type, char > TCP_IPv4_traits;

    const TCP_IPv4_optional&
    TCP_IPv4 () const;

    TCP_IPv4_optional&
    TCP_IPv4 ();

    void
    TCP_IPv4 (const TCP_IPv4_type& x);

    void
    TCP_IPv4 (const TCP_IPv4_optional& x);

    void
    TCP_IPv4 (::std::auto_ptr< TCP_IPv4_type > p);

    // Constructors.
    //
    TransportProtocols ();

    TransportProtocols (const ::xercesc::DOMElement& e,
                        ::xml_schema::flags f = 0,
                        ::xml_schema::container* c = 0);

    TransportProtocols (const TransportProtocols& x,
                        ::xml_schema::flags f = 0,
                        ::xml_schema::container* c = 0);

    virtual TransportProtocols*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    TransportProtocols&
    operator= (const TransportProtocols& x);

    virtual 
    ~TransportProtocols ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    UDP_IPv4_optional UDP_IPv4_;
    CAN_optional CAN_;
    USB_optional USB_;
    Bluetooth_optional Bluetooth_;
    TCP_IPv4_optional TCP_IPv4_;
  };

  class Transition: public ::xml_schema::type
  {
    public:
    // Sending
    //
    typedef ::DcpTestSuite::Sending Sending_type;
    typedef ::xsd::cxx::tree::optional< Sending_type > Sending_optional;
    typedef ::xsd::cxx::tree::traits< Sending_type, char > Sending_traits;

    const Sending_optional&
    Sending () const;

    Sending_optional&
    Sending ();

    void
    Sending (const Sending_type& x);

    void
    Sending (const Sending_optional& x);

    void
    Sending (::std::auto_ptr< Sending_type > p);

    // Receiving
    //
    typedef ::DcpTestSuite::Receiving Receiving_type;
    typedef ::xsd::cxx::tree::optional< Receiving_type > Receiving_optional;
    typedef ::xsd::cxx::tree::traits< Receiving_type, char > Receiving_traits;

    const Receiving_optional&
    Receiving () const;

    Receiving_optional&
    Receiving ();

    void
    Receiving (const Receiving_type& x);

    void
    Receiving (const Receiving_optional& x);

    void
    Receiving (::std::auto_ptr< Receiving_type > p);

    // from
    //
    typedef ::xml_schema::unsigned_int from_type;
    typedef ::xsd::cxx::tree::traits< from_type, char > from_traits;

    const from_type&
    from () const;

    from_type&
    from ();

    void
    from (const from_type& x);

    // to
    //
    typedef ::xml_schema::unsigned_int to_type;
    typedef ::xsd::cxx::tree::traits< to_type, char > to_traits;

    const to_type&
    to () const;

    to_type&
    to ();

    void
    to (const to_type& x);

    // log
    //
    typedef ::xml_schema::boolean log_type;
    typedef ::xsd::cxx::tree::traits< log_type, char > log_traits;

    const log_type&
    log () const;

    log_type&
    log ();

    void
    log (const log_type& x);

    static log_type
    log_default_value ();

    // Constructors.
    //
    Transition (const from_type&,
                const to_type&);

    Transition (const ::xercesc::DOMElement& e,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

    Transition (const Transition& x,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

    virtual Transition*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    Transition&
    operator= (const Transition& x);

    virtual 
    ~Transition ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    Sending_optional Sending_;
    Receiving_optional Receiving_;
    ::xsd::cxx::tree::one< from_type > from_;
    ::xsd::cxx::tree::one< to_type > to_;
    ::xsd::cxx::tree::one< log_type > log_;
  };

  class acceptingSteps: public ::xml_schema::simple_type,
    public ::xsd::cxx::tree::list< ::xml_schema::unsigned_int, char >
  {
    public:
    acceptingSteps ();

    acceptingSteps (size_type n, const ::xml_schema::unsigned_int& x);

    template < typename I >
    acceptingSteps (const I& begin, const I& end)
    : ::xsd::cxx::tree::list< ::xml_schema::unsigned_int, char > (begin, end, this)
    {
    }

    acceptingSteps (const ::xercesc::DOMElement& e,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

    acceptingSteps (const ::xercesc::DOMAttr& a,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

    acceptingSteps (const ::std::string& s,
                    const ::xercesc::DOMElement* e,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

    acceptingSteps (const acceptingSteps& x,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

    virtual acceptingSteps*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~acceptingSteps ();
  };

  class Int8: public ::xml_schema::type
  {
    public:
    // value
    //
    typedef ::DcpTestSuite::value value_type;
    typedef ::xsd::cxx::tree::traits< value_type, char > value_traits;

    const value_type&
    value () const;

    value_type&
    value ();

    void
    value (const value_type& x);

    void
    value (::std::auto_ptr< value_type > p);

    // Constructors.
    //
    Int8 (const value_type&);

    Int8 (const ::xercesc::DOMElement& e,
          ::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0);

    Int8 (const Int8& x,
          ::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0);

    virtual Int8*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    Int8&
    operator= (const Int8& x);

    virtual 
    ~Int8 ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ::xsd::cxx::tree::one< value_type > value_;
  };

  class Int16: public ::xml_schema::type
  {
    public:
    // value
    //
    typedef ::DcpTestSuite::value1 value_type;
    typedef ::xsd::cxx::tree::traits< value_type, char > value_traits;

    const value_type&
    value () const;

    value_type&
    value ();

    void
    value (const value_type& x);

    void
    value (::std::auto_ptr< value_type > p);

    // Constructors.
    //
    Int16 (const value_type&);

    Int16 (const ::xercesc::DOMElement& e,
           ::xml_schema::flags f = 0,
           ::xml_schema::container* c = 0);

    Int16 (const Int16& x,
           ::xml_schema::flags f = 0,
           ::xml_schema::container* c = 0);

    virtual Int16*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    Int16&
    operator= (const Int16& x);

    virtual 
    ~Int16 ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ::xsd::cxx::tree::one< value_type > value_;
  };

  class Int32: public ::xml_schema::type
  {
    public:
    // value
    //
    typedef ::DcpTestSuite::value2 value_type;
    typedef ::xsd::cxx::tree::traits< value_type, char > value_traits;

    const value_type&
    value () const;

    value_type&
    value ();

    void
    value (const value_type& x);

    void
    value (::std::auto_ptr< value_type > p);

    // Constructors.
    //
    Int32 (const value_type&);

    Int32 (const ::xercesc::DOMElement& e,
           ::xml_schema::flags f = 0,
           ::xml_schema::container* c = 0);

    Int32 (const Int32& x,
           ::xml_schema::flags f = 0,
           ::xml_schema::container* c = 0);

    virtual Int32*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    Int32&
    operator= (const Int32& x);

    virtual 
    ~Int32 ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ::xsd::cxx::tree::one< value_type > value_;
  };

  class Int64: public ::xml_schema::type
  {
    public:
    // value
    //
    typedef ::DcpTestSuite::value3 value_type;
    typedef ::xsd::cxx::tree::traits< value_type, char > value_traits;

    const value_type&
    value () const;

    value_type&
    value ();

    void
    value (const value_type& x);

    void
    value (::std::auto_ptr< value_type > p);

    // Constructors.
    //
    Int64 (const value_type&);

    Int64 (const ::xercesc::DOMElement& e,
           ::xml_schema::flags f = 0,
           ::xml_schema::container* c = 0);

    Int64 (const Int64& x,
           ::xml_schema::flags f = 0,
           ::xml_schema::container* c = 0);

    virtual Int64*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    Int64&
    operator= (const Int64& x);

    virtual 
    ~Int64 ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ::xsd::cxx::tree::one< value_type > value_;
  };

  class Uint8: public ::xml_schema::type
  {
    public:
    // value
    //
    typedef ::DcpTestSuite::value4 value_type;
    typedef ::xsd::cxx::tree::traits< value_type, char > value_traits;

    const value_type&
    value () const;

    value_type&
    value ();

    void
    value (const value_type& x);

    void
    value (::std::auto_ptr< value_type > p);

    // Constructors.
    //
    Uint8 (const value_type&);

    Uint8 (const ::xercesc::DOMElement& e,
           ::xml_schema::flags f = 0,
           ::xml_schema::container* c = 0);

    Uint8 (const Uint8& x,
           ::xml_schema::flags f = 0,
           ::xml_schema::container* c = 0);

    virtual Uint8*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    Uint8&
    operator= (const Uint8& x);

    virtual 
    ~Uint8 ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ::xsd::cxx::tree::one< value_type > value_;
  };

  class Uint16: public ::xml_schema::type
  {
    public:
    // value
    //
    typedef ::DcpTestSuite::value5 value_type;
    typedef ::xsd::cxx::tree::traits< value_type, char > value_traits;

    const value_type&
    value () const;

    value_type&
    value ();

    void
    value (const value_type& x);

    void
    value (::std::auto_ptr< value_type > p);

    // Constructors.
    //
    Uint16 (const value_type&);

    Uint16 (const ::xercesc::DOMElement& e,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

    Uint16 (const Uint16& x,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

    virtual Uint16*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    Uint16&
    operator= (const Uint16& x);

    virtual 
    ~Uint16 ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ::xsd::cxx::tree::one< value_type > value_;
  };

  class Uint32: public ::xml_schema::type
  {
    public:
    // value
    //
    typedef ::DcpTestSuite::value6 value_type;
    typedef ::xsd::cxx::tree::traits< value_type, char > value_traits;

    const value_type&
    value () const;

    value_type&
    value ();

    void
    value (const value_type& x);

    void
    value (::std::auto_ptr< value_type > p);

    // Constructors.
    //
    Uint32 (const value_type&);

    Uint32 (const ::xercesc::DOMElement& e,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

    Uint32 (const Uint32& x,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

    virtual Uint32*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    Uint32&
    operator= (const Uint32& x);

    virtual 
    ~Uint32 ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ::xsd::cxx::tree::one< value_type > value_;
  };

  class Uint64: public ::xml_schema::type
  {
    public:
    // value
    //
    typedef ::DcpTestSuite::value7 value_type;
    typedef ::xsd::cxx::tree::traits< value_type, char > value_traits;

    const value_type&
    value () const;

    value_type&
    value ();

    void
    value (const value_type& x);

    void
    value (::std::auto_ptr< value_type > p);

    // Constructors.
    //
    Uint64 (const value_type&);

    Uint64 (const ::xercesc::DOMElement& e,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

    Uint64 (const Uint64& x,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

    virtual Uint64*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    Uint64&
    operator= (const Uint64& x);

    virtual 
    ~Uint64 ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ::xsd::cxx::tree::one< value_type > value_;
  };

  class Float32: public ::xml_schema::type
  {
    public:
    // value
    //
    typedef ::DcpTestSuite::value8 value_type;
    typedef ::xsd::cxx::tree::traits< value_type, char > value_traits;

    const value_type&
    value () const;

    value_type&
    value ();

    void
    value (const value_type& x);

    void
    value (::std::auto_ptr< value_type > p);

    // Constructors.
    //
    Float32 (const value_type&);

    Float32 (const ::xercesc::DOMElement& e,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

    Float32 (const Float32& x,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

    virtual Float32*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    Float32&
    operator= (const Float32& x);

    virtual 
    ~Float32 ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ::xsd::cxx::tree::one< value_type > value_;
  };

  class Float64: public ::xml_schema::type
  {
    public:
    // value
    //
    typedef ::DcpTestSuite::value9 value_type;
    typedef ::xsd::cxx::tree::traits< value_type, char > value_traits;

    const value_type&
    value () const;

    value_type&
    value ();

    void
    value (const value_type& x);

    void
    value (::std::auto_ptr< value_type > p);

    // Constructors.
    //
    Float64 (const value_type&);

    Float64 (const ::xercesc::DOMElement& e,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

    Float64 (const Float64& x,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

    virtual Float64*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    Float64&
    operator= (const Float64& x);

    virtual 
    ~Float64 ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ::xsd::cxx::tree::one< value_type > value_;
  };

  class String: public ::xml_schema::type
  {
    public:
    // value
    //
    typedef ::xml_schema::string value_type;
    typedef ::xsd::cxx::tree::traits< value_type, char > value_traits;

    const value_type&
    value () const;

    value_type&
    value ();

    void
    value (const value_type& x);

    void
    value (::std::auto_ptr< value_type > p);

    // Constructors.
    //
    String (const value_type&);

    String (const ::xercesc::DOMElement& e,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

    String (const String& x,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

    virtual String*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    String&
    operator= (const String& x);

    virtual 
    ~String ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ::xsd::cxx::tree::one< value_type > value_;
  };

  class Binary: public ::xml_schema::type
  {
    public:
    // value
    //
    typedef ::xml_schema::hex_binary value_type;
    typedef ::xsd::cxx::tree::traits< value_type, char > value_traits;

    const value_type&
    value () const;

    value_type&
    value ();

    void
    value (const value_type& x);

    void
    value (::std::auto_ptr< value_type > p);

    // Constructors.
    //
    Binary (const value_type&);

    Binary (const ::xercesc::DOMElement& e,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

    Binary (const Binary& x,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

    virtual Binary*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    Binary&
    operator= (const Binary& x);

    virtual 
    ~Binary ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ::xsd::cxx::tree::one< value_type > value_;
  };

  class Int81: public ::xml_schema::type
  {
    public:
    // min
    //
    typedef ::xml_schema::byte min_type;
    typedef ::xsd::cxx::tree::optional< min_type > min_optional;
    typedef ::xsd::cxx::tree::traits< min_type, char > min_traits;

    const min_optional&
    min () const;

    min_optional&
    min ();

    void
    min (const min_type& x);

    void
    min (const min_optional& x);

    // max
    //
    typedef ::xml_schema::byte max_type;
    typedef ::xsd::cxx::tree::optional< max_type > max_optional;
    typedef ::xsd::cxx::tree::traits< max_type, char > max_traits;

    const max_optional&
    max () const;

    max_optional&
    max ();

    void
    max (const max_type& x);

    void
    max (const max_optional& x);

    // value
    //
    typedef ::DcpTestSuite::value10 value_type;
    typedef ::xsd::cxx::tree::optional< value_type > value_optional;
    typedef ::xsd::cxx::tree::traits< value_type, char > value_traits;

    const value_optional&
    value () const;

    value_optional&
    value ();

    void
    value (const value_type& x);

    void
    value (const value_optional& x);

    void
    value (::std::auto_ptr< value_type > p);

    // dimensionSize
    //
    typedef ::xml_schema::unsigned_long dimensionSize_type;
    typedef ::xsd::cxx::tree::traits< dimensionSize_type, char > dimensionSize_traits;

    const dimensionSize_type&
    dimensionSize () const;

    dimensionSize_type&
    dimensionSize ();

    void
    dimensionSize (const dimensionSize_type& x);

    static dimensionSize_type
    dimensionSize_default_value ();

    // Constructors.
    //
    Int81 ();

    Int81 (const ::xercesc::DOMElement& e,
           ::xml_schema::flags f = 0,
           ::xml_schema::container* c = 0);

    Int81 (const Int81& x,
           ::xml_schema::flags f = 0,
           ::xml_schema::container* c = 0);

    virtual Int81*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    Int81&
    operator= (const Int81& x);

    virtual 
    ~Int81 ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    min_optional min_;
    max_optional max_;
    value_optional value_;
    ::xsd::cxx::tree::one< dimensionSize_type > dimensionSize_;
  };

  class Int161: public ::xml_schema::type
  {
    public:
    // min
    //
    typedef ::xml_schema::short_ min_type;
    typedef ::xsd::cxx::tree::optional< min_type > min_optional;
    typedef ::xsd::cxx::tree::traits< min_type, char > min_traits;

    const min_optional&
    min () const;

    min_optional&
    min ();

    void
    min (const min_type& x);

    void
    min (const min_optional& x);

    // max
    //
    typedef ::xml_schema::short_ max_type;
    typedef ::xsd::cxx::tree::optional< max_type > max_optional;
    typedef ::xsd::cxx::tree::traits< max_type, char > max_traits;

    const max_optional&
    max () const;

    max_optional&
    max ();

    void
    max (const max_type& x);

    void
    max (const max_optional& x);

    // value
    //
    typedef ::DcpTestSuite::value11 value_type;
    typedef ::xsd::cxx::tree::optional< value_type > value_optional;
    typedef ::xsd::cxx::tree::traits< value_type, char > value_traits;

    const value_optional&
    value () const;

    value_optional&
    value ();

    void
    value (const value_type& x);

    void
    value (const value_optional& x);

    void
    value (::std::auto_ptr< value_type > p);

    // dimensionSize
    //
    typedef ::xml_schema::unsigned_long dimensionSize_type;
    typedef ::xsd::cxx::tree::traits< dimensionSize_type, char > dimensionSize_traits;

    const dimensionSize_type&
    dimensionSize () const;

    dimensionSize_type&
    dimensionSize ();

    void
    dimensionSize (const dimensionSize_type& x);

    static dimensionSize_type
    dimensionSize_default_value ();

    // Constructors.
    //
    Int161 ();

    Int161 (const ::xercesc::DOMElement& e,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

    Int161 (const Int161& x,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

    virtual Int161*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    Int161&
    operator= (const Int161& x);

    virtual 
    ~Int161 ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    min_optional min_;
    max_optional max_;
    value_optional value_;
    ::xsd::cxx::tree::one< dimensionSize_type > dimensionSize_;
  };

  class Int321: public ::xml_schema::type
  {
    public:
    // min
    //
    typedef ::xml_schema::int_ min_type;
    typedef ::xsd::cxx::tree::optional< min_type > min_optional;
    typedef ::xsd::cxx::tree::traits< min_type, char > min_traits;

    const min_optional&
    min () const;

    min_optional&
    min ();

    void
    min (const min_type& x);

    void
    min (const min_optional& x);

    // max
    //
    typedef ::xml_schema::int_ max_type;
    typedef ::xsd::cxx::tree::optional< max_type > max_optional;
    typedef ::xsd::cxx::tree::traits< max_type, char > max_traits;

    const max_optional&
    max () const;

    max_optional&
    max ();

    void
    max (const max_type& x);

    void
    max (const max_optional& x);

    // value
    //
    typedef ::DcpTestSuite::value12 value_type;
    typedef ::xsd::cxx::tree::optional< value_type > value_optional;
    typedef ::xsd::cxx::tree::traits< value_type, char > value_traits;

    const value_optional&
    value () const;

    value_optional&
    value ();

    void
    value (const value_type& x);

    void
    value (const value_optional& x);

    void
    value (::std::auto_ptr< value_type > p);

    // dimensionSize
    //
    typedef ::xml_schema::unsigned_long dimensionSize_type;
    typedef ::xsd::cxx::tree::traits< dimensionSize_type, char > dimensionSize_traits;

    const dimensionSize_type&
    dimensionSize () const;

    dimensionSize_type&
    dimensionSize ();

    void
    dimensionSize (const dimensionSize_type& x);

    static dimensionSize_type
    dimensionSize_default_value ();

    // Constructors.
    //
    Int321 ();

    Int321 (const ::xercesc::DOMElement& e,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

    Int321 (const Int321& x,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

    virtual Int321*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    Int321&
    operator= (const Int321& x);

    virtual 
    ~Int321 ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    min_optional min_;
    max_optional max_;
    value_optional value_;
    ::xsd::cxx::tree::one< dimensionSize_type > dimensionSize_;
  };

  class Int641: public ::xml_schema::type
  {
    public:
    // min
    //
    typedef ::xml_schema::long_ min_type;
    typedef ::xsd::cxx::tree::optional< min_type > min_optional;
    typedef ::xsd::cxx::tree::traits< min_type, char > min_traits;

    const min_optional&
    min () const;

    min_optional&
    min ();

    void
    min (const min_type& x);

    void
    min (const min_optional& x);

    // max
    //
    typedef ::xml_schema::long_ max_type;
    typedef ::xsd::cxx::tree::optional< max_type > max_optional;
    typedef ::xsd::cxx::tree::traits< max_type, char > max_traits;

    const max_optional&
    max () const;

    max_optional&
    max ();

    void
    max (const max_type& x);

    void
    max (const max_optional& x);

    // value
    //
    typedef ::DcpTestSuite::value13 value_type;
    typedef ::xsd::cxx::tree::optional< value_type > value_optional;
    typedef ::xsd::cxx::tree::traits< value_type, char > value_traits;

    const value_optional&
    value () const;

    value_optional&
    value ();

    void
    value (const value_type& x);

    void
    value (const value_optional& x);

    void
    value (::std::auto_ptr< value_type > p);

    // dimensionSize
    //
    typedef ::xml_schema::unsigned_long dimensionSize_type;
    typedef ::xsd::cxx::tree::traits< dimensionSize_type, char > dimensionSize_traits;

    const dimensionSize_type&
    dimensionSize () const;

    dimensionSize_type&
    dimensionSize ();

    void
    dimensionSize (const dimensionSize_type& x);

    static dimensionSize_type
    dimensionSize_default_value ();

    // Constructors.
    //
    Int641 ();

    Int641 (const ::xercesc::DOMElement& e,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

    Int641 (const Int641& x,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

    virtual Int641*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    Int641&
    operator= (const Int641& x);

    virtual 
    ~Int641 ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    min_optional min_;
    max_optional max_;
    value_optional value_;
    ::xsd::cxx::tree::one< dimensionSize_type > dimensionSize_;
  };

  class Uint81: public ::xml_schema::type
  {
    public:
    // min
    //
    typedef ::xml_schema::unsigned_byte min_type;
    typedef ::xsd::cxx::tree::optional< min_type > min_optional;
    typedef ::xsd::cxx::tree::traits< min_type, char > min_traits;

    const min_optional&
    min () const;

    min_optional&
    min ();

    void
    min (const min_type& x);

    void
    min (const min_optional& x);

    // max
    //
    typedef ::xml_schema::unsigned_byte max_type;
    typedef ::xsd::cxx::tree::optional< max_type > max_optional;
    typedef ::xsd::cxx::tree::traits< max_type, char > max_traits;

    const max_optional&
    max () const;

    max_optional&
    max ();

    void
    max (const max_type& x);

    void
    max (const max_optional& x);

    // value
    //
    typedef ::DcpTestSuite::value14 value_type;
    typedef ::xsd::cxx::tree::optional< value_type > value_optional;
    typedef ::xsd::cxx::tree::traits< value_type, char > value_traits;

    const value_optional&
    value () const;

    value_optional&
    value ();

    void
    value (const value_type& x);

    void
    value (const value_optional& x);

    void
    value (::std::auto_ptr< value_type > p);

    // dimensionSize
    //
    typedef ::xml_schema::unsigned_long dimensionSize_type;
    typedef ::xsd::cxx::tree::traits< dimensionSize_type, char > dimensionSize_traits;

    const dimensionSize_type&
    dimensionSize () const;

    dimensionSize_type&
    dimensionSize ();

    void
    dimensionSize (const dimensionSize_type& x);

    static dimensionSize_type
    dimensionSize_default_value ();

    // Constructors.
    //
    Uint81 ();

    Uint81 (const ::xercesc::DOMElement& e,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

    Uint81 (const Uint81& x,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

    virtual Uint81*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    Uint81&
    operator= (const Uint81& x);

    virtual 
    ~Uint81 ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    min_optional min_;
    max_optional max_;
    value_optional value_;
    ::xsd::cxx::tree::one< dimensionSize_type > dimensionSize_;
  };

  class Uint161: public ::xml_schema::type
  {
    public:
    // min
    //
    typedef ::xml_schema::unsigned_short min_type;
    typedef ::xsd::cxx::tree::optional< min_type > min_optional;
    typedef ::xsd::cxx::tree::traits< min_type, char > min_traits;

    const min_optional&
    min () const;

    min_optional&
    min ();

    void
    min (const min_type& x);

    void
    min (const min_optional& x);

    // max
    //
    typedef ::xml_schema::unsigned_short max_type;
    typedef ::xsd::cxx::tree::optional< max_type > max_optional;
    typedef ::xsd::cxx::tree::traits< max_type, char > max_traits;

    const max_optional&
    max () const;

    max_optional&
    max ();

    void
    max (const max_type& x);

    void
    max (const max_optional& x);

    // value
    //
    typedef ::DcpTestSuite::value15 value_type;
    typedef ::xsd::cxx::tree::optional< value_type > value_optional;
    typedef ::xsd::cxx::tree::traits< value_type, char > value_traits;

    const value_optional&
    value () const;

    value_optional&
    value ();

    void
    value (const value_type& x);

    void
    value (const value_optional& x);

    void
    value (::std::auto_ptr< value_type > p);

    // dimensionSize
    //
    typedef ::xml_schema::unsigned_long dimensionSize_type;
    typedef ::xsd::cxx::tree::traits< dimensionSize_type, char > dimensionSize_traits;

    const dimensionSize_type&
    dimensionSize () const;

    dimensionSize_type&
    dimensionSize ();

    void
    dimensionSize (const dimensionSize_type& x);

    static dimensionSize_type
    dimensionSize_default_value ();

    // Constructors.
    //
    Uint161 ();

    Uint161 (const ::xercesc::DOMElement& e,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

    Uint161 (const Uint161& x,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

    virtual Uint161*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    Uint161&
    operator= (const Uint161& x);

    virtual 
    ~Uint161 ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    min_optional min_;
    max_optional max_;
    value_optional value_;
    ::xsd::cxx::tree::one< dimensionSize_type > dimensionSize_;
  };

  class Uint321: public ::xml_schema::type
  {
    public:
    // min
    //
    typedef ::xml_schema::unsigned_int min_type;
    typedef ::xsd::cxx::tree::optional< min_type > min_optional;
    typedef ::xsd::cxx::tree::traits< min_type, char > min_traits;

    const min_optional&
    min () const;

    min_optional&
    min ();

    void
    min (const min_type& x);

    void
    min (const min_optional& x);

    // max
    //
    typedef ::xml_schema::unsigned_int max_type;
    typedef ::xsd::cxx::tree::optional< max_type > max_optional;
    typedef ::xsd::cxx::tree::traits< max_type, char > max_traits;

    const max_optional&
    max () const;

    max_optional&
    max ();

    void
    max (const max_type& x);

    void
    max (const max_optional& x);

    // value
    //
    typedef ::DcpTestSuite::value16 value_type;
    typedef ::xsd::cxx::tree::optional< value_type > value_optional;
    typedef ::xsd::cxx::tree::traits< value_type, char > value_traits;

    const value_optional&
    value () const;

    value_optional&
    value ();

    void
    value (const value_type& x);

    void
    value (const value_optional& x);

    void
    value (::std::auto_ptr< value_type > p);

    // dimensionSize
    //
    typedef ::xml_schema::unsigned_long dimensionSize_type;
    typedef ::xsd::cxx::tree::traits< dimensionSize_type, char > dimensionSize_traits;

    const dimensionSize_type&
    dimensionSize () const;

    dimensionSize_type&
    dimensionSize ();

    void
    dimensionSize (const dimensionSize_type& x);

    static dimensionSize_type
    dimensionSize_default_value ();

    // Constructors.
    //
    Uint321 ();

    Uint321 (const ::xercesc::DOMElement& e,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

    Uint321 (const Uint321& x,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

    virtual Uint321*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    Uint321&
    operator= (const Uint321& x);

    virtual 
    ~Uint321 ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    min_optional min_;
    max_optional max_;
    value_optional value_;
    ::xsd::cxx::tree::one< dimensionSize_type > dimensionSize_;
  };

  class Uint641: public ::xml_schema::type
  {
    public:
    // min
    //
    typedef ::xml_schema::unsigned_long min_type;
    typedef ::xsd::cxx::tree::optional< min_type > min_optional;
    typedef ::xsd::cxx::tree::traits< min_type, char > min_traits;

    const min_optional&
    min () const;

    min_optional&
    min ();

    void
    min (const min_type& x);

    void
    min (const min_optional& x);

    // max
    //
    typedef ::xml_schema::unsigned_long max_type;
    typedef ::xsd::cxx::tree::optional< max_type > max_optional;
    typedef ::xsd::cxx::tree::traits< max_type, char > max_traits;

    const max_optional&
    max () const;

    max_optional&
    max ();

    void
    max (const max_type& x);

    void
    max (const max_optional& x);

    // value
    //
    typedef ::DcpTestSuite::value17 value_type;
    typedef ::xsd::cxx::tree::optional< value_type > value_optional;
    typedef ::xsd::cxx::tree::traits< value_type, char > value_traits;

    const value_optional&
    value () const;

    value_optional&
    value ();

    void
    value (const value_type& x);

    void
    value (const value_optional& x);

    void
    value (::std::auto_ptr< value_type > p);

    // dimensionSize
    //
    typedef ::xml_schema::unsigned_long dimensionSize_type;
    typedef ::xsd::cxx::tree::traits< dimensionSize_type, char > dimensionSize_traits;

    const dimensionSize_type&
    dimensionSize () const;

    dimensionSize_type&
    dimensionSize ();

    void
    dimensionSize (const dimensionSize_type& x);

    static dimensionSize_type
    dimensionSize_default_value ();

    // Constructors.
    //
    Uint641 ();

    Uint641 (const ::xercesc::DOMElement& e,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

    Uint641 (const Uint641& x,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

    virtual Uint641*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    Uint641&
    operator= (const Uint641& x);

    virtual 
    ~Uint641 ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    min_optional min_;
    max_optional max_;
    value_optional value_;
    ::xsd::cxx::tree::one< dimensionSize_type > dimensionSize_;
  };

  class Float321: public ::xml_schema::type
  {
    public:
    // min
    //
    typedef ::xml_schema::float_ min_type;
    typedef ::xsd::cxx::tree::optional< min_type > min_optional;
    typedef ::xsd::cxx::tree::traits< min_type, char > min_traits;

    const min_optional&
    min () const;

    min_optional&
    min ();

    void
    min (const min_type& x);

    void
    min (const min_optional& x);

    // max
    //
    typedef ::xml_schema::float_ max_type;
    typedef ::xsd::cxx::tree::optional< max_type > max_optional;
    typedef ::xsd::cxx::tree::traits< max_type, char > max_traits;

    const max_optional&
    max () const;

    max_optional&
    max ();

    void
    max (const max_type& x);

    void
    max (const max_optional& x);

    // value
    //
    typedef ::DcpTestSuite::value18 value_type;
    typedef ::xsd::cxx::tree::optional< value_type > value_optional;
    typedef ::xsd::cxx::tree::traits< value_type, char > value_traits;

    const value_optional&
    value () const;

    value_optional&
    value ();

    void
    value (const value_type& x);

    void
    value (const value_optional& x);

    void
    value (::std::auto_ptr< value_type > p);

    // dimensionSize
    //
    typedef ::xml_schema::unsigned_long dimensionSize_type;
    typedef ::xsd::cxx::tree::traits< dimensionSize_type, char > dimensionSize_traits;

    const dimensionSize_type&
    dimensionSize () const;

    dimensionSize_type&
    dimensionSize ();

    void
    dimensionSize (const dimensionSize_type& x);

    static dimensionSize_type
    dimensionSize_default_value ();

    // Constructors.
    //
    Float321 ();

    Float321 (const ::xercesc::DOMElement& e,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

    Float321 (const Float321& x,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

    virtual Float321*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    Float321&
    operator= (const Float321& x);

    virtual 
    ~Float321 ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    min_optional min_;
    max_optional max_;
    value_optional value_;
    ::xsd::cxx::tree::one< dimensionSize_type > dimensionSize_;
  };

  class Float641: public ::xml_schema::type
  {
    public:
    // min
    //
    typedef ::xml_schema::double_ min_type;
    typedef ::xsd::cxx::tree::optional< min_type > min_optional;
    typedef ::xsd::cxx::tree::traits< min_type, char, ::xsd::cxx::tree::schema_type::double_ > min_traits;

    const min_optional&
    min () const;

    min_optional&
    min ();

    void
    min (const min_type& x);

    void
    min (const min_optional& x);

    // max
    //
    typedef ::xml_schema::double_ max_type;
    typedef ::xsd::cxx::tree::optional< max_type > max_optional;
    typedef ::xsd::cxx::tree::traits< max_type, char, ::xsd::cxx::tree::schema_type::double_ > max_traits;

    const max_optional&
    max () const;

    max_optional&
    max ();

    void
    max (const max_type& x);

    void
    max (const max_optional& x);

    // value
    //
    typedef ::DcpTestSuite::value19 value_type;
    typedef ::xsd::cxx::tree::optional< value_type > value_optional;
    typedef ::xsd::cxx::tree::traits< value_type, char > value_traits;

    const value_optional&
    value () const;

    value_optional&
    value ();

    void
    value (const value_type& x);

    void
    value (const value_optional& x);

    void
    value (::std::auto_ptr< value_type > p);

    // dimensionSize
    //
    typedef ::xml_schema::unsigned_long dimensionSize_type;
    typedef ::xsd::cxx::tree::traits< dimensionSize_type, char > dimensionSize_traits;

    const dimensionSize_type&
    dimensionSize () const;

    dimensionSize_type&
    dimensionSize ();

    void
    dimensionSize (const dimensionSize_type& x);

    static dimensionSize_type
    dimensionSize_default_value ();

    // Constructors.
    //
    Float641 ();

    Float641 (const ::xercesc::DOMElement& e,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

    Float641 (const Float641& x,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

    virtual Float641*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    Float641&
    operator= (const Float641& x);

    virtual 
    ~Float641 ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    min_optional min_;
    max_optional max_;
    value_optional value_;
    ::xsd::cxx::tree::one< dimensionSize_type > dimensionSize_;
  };

  class String1: public ::xml_schema::type
  {
    public:
    // value
    //
    typedef ::xml_schema::string value_type;
    typedef ::xsd::cxx::tree::optional< value_type > value_optional;
    typedef ::xsd::cxx::tree::traits< value_type, char > value_traits;

    const value_optional&
    value () const;

    value_optional&
    value ();

    void
    value (const value_type& x);

    void
    value (const value_optional& x);

    void
    value (::std::auto_ptr< value_type > p);

    // dimensionSize
    //
    typedef ::xml_schema::simple_type dimensionSize_type;
    typedef ::xsd::cxx::tree::traits< dimensionSize_type, char > dimensionSize_traits;

    const dimensionSize_type&
    dimensionSize () const;

    static const dimensionSize_type&
    dimensionSize_default_value ();

    // Constructors.
    //
    String1 ();

    String1 (const ::xercesc::DOMElement& e,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

    String1 (const String1& x,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

    virtual String1*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    String1&
    operator= (const String1& x);

    virtual 
    ~String1 ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    value_optional value_;
    ::xsd::cxx::tree::one< dimensionSize_type > dimensionSize_;
    static const dimensionSize_type dimensionSize_default_value_;
  };

  class Binary1: public ::xml_schema::type
  {
    public:
    // value
    //
    typedef ::xml_schema::hex_binary value_type;
    typedef ::xsd::cxx::tree::optional< value_type > value_optional;
    typedef ::xsd::cxx::tree::traits< value_type, char > value_traits;

    const value_optional&
    value () const;

    value_optional&
    value ();

    void
    value (const value_type& x);

    void
    value (const value_optional& x);

    void
    value (::std::auto_ptr< value_type > p);

    // dimensionSize
    //
    typedef ::xml_schema::simple_type dimensionSize_type;
    typedef ::xsd::cxx::tree::traits< dimensionSize_type, char > dimensionSize_traits;

    const dimensionSize_type&
    dimensionSize () const;

    static const dimensionSize_type&
    dimensionSize_default_value ();

    // Constructors.
    //
    Binary1 ();

    Binary1 (const ::xercesc::DOMElement& e,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

    Binary1 (const Binary1& x,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

    virtual Binary1*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    Binary1&
    operator= (const Binary1& x);

    virtual 
    ~Binary1 ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    value_optional value_;
    ::xsd::cxx::tree::one< dimensionSize_type > dimensionSize_;
    static const dimensionSize_type dimensionSize_default_value_;
  };

  class UDP_IPv4: public ::xml_schema::type
  {
    public:
    // Control
    //
    typedef ::DcpTestSuite::Control Control_type;
    typedef ::xsd::cxx::tree::traits< Control_type, char > Control_traits;

    const Control_type&
    Control () const;

    Control_type&
    Control ();

    void
    Control (const Control_type& x);

    void
    Control (::std::auto_ptr< Control_type > p);

    // DAT_input_output
    //
    typedef ::DcpTestSuite::DAT_input_output DAT_input_output_type;
    typedef ::xsd::cxx::tree::optional< DAT_input_output_type > DAT_input_output_optional;
    typedef ::xsd::cxx::tree::traits< DAT_input_output_type, char > DAT_input_output_traits;

    const DAT_input_output_optional&
    DAT_input_output () const;

    DAT_input_output_optional&
    DAT_input_output ();

    void
    DAT_input_output (const DAT_input_output_type& x);

    void
    DAT_input_output (const DAT_input_output_optional& x);

    void
    DAT_input_output (::std::auto_ptr< DAT_input_output_type > p);

    // DAT_parameter
    //
    typedef ::DcpTestSuite::DAT_parameter DAT_parameter_type;
    typedef ::xsd::cxx::tree::optional< DAT_parameter_type > DAT_parameter_optional;
    typedef ::xsd::cxx::tree::traits< DAT_parameter_type, char > DAT_parameter_traits;

    const DAT_parameter_optional&
    DAT_parameter () const;

    DAT_parameter_optional&
    DAT_parameter ();

    void
    DAT_parameter (const DAT_parameter_type& x);

    void
    DAT_parameter (const DAT_parameter_optional& x);

    void
    DAT_parameter (::std::auto_ptr< DAT_parameter_type > p);

    // Constructors.
    //
    UDP_IPv4 (const Control_type&);

    UDP_IPv4 (::std::auto_ptr< Control_type >);

    UDP_IPv4 (const ::xercesc::DOMElement& e,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

    UDP_IPv4 (const UDP_IPv4& x,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

    virtual UDP_IPv4*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    UDP_IPv4&
    operator= (const UDP_IPv4& x);

    virtual 
    ~UDP_IPv4 ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ::xsd::cxx::tree::one< Control_type > Control_;
    DAT_input_output_optional DAT_input_output_;
    DAT_parameter_optional DAT_parameter_;
  };

  class USB: public ::xml_schema::type
  {
    public:
    // DataPipe
    //
    typedef ::DcpTestSuite::DataPipe DataPipe_type;
    typedef ::xsd::cxx::tree::sequence< DataPipe_type > DataPipe_sequence;
    typedef DataPipe_sequence::iterator DataPipe_iterator;
    typedef DataPipe_sequence::const_iterator DataPipe_const_iterator;
    typedef ::xsd::cxx::tree::traits< DataPipe_type, char > DataPipe_traits;

    const DataPipe_sequence&
    DataPipe () const;

    DataPipe_sequence&
    DataPipe ();

    void
    DataPipe (const DataPipe_sequence& s);

    // Constructors.
    //
    USB ();

    USB (const ::xercesc::DOMElement& e,
         ::xml_schema::flags f = 0,
         ::xml_schema::container* c = 0);

    USB (const USB& x,
         ::xml_schema::flags f = 0,
         ::xml_schema::container* c = 0);

    virtual USB*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    USB&
    operator= (const USB& x);

    virtual 
    ~USB ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    DataPipe_sequence DataPipe_;
  };

  class Bluetooth: public ::xml_schema::type
  {
    public:
    // Address
    //
    typedef ::DcpTestSuite::Address Address_type;
    typedef ::xsd::cxx::tree::traits< Address_type, char > Address_traits;

    const Address_type&
    Address () const;

    Address_type&
    Address ();

    void
    Address (const Address_type& x);

    void
    Address (::std::auto_ptr< Address_type > p);

    // Constructors.
    //
    Bluetooth (const Address_type&);

    Bluetooth (::std::auto_ptr< Address_type >);

    Bluetooth (const ::xercesc::DOMElement& e,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

    Bluetooth (const Bluetooth& x,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

    virtual Bluetooth*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    Bluetooth&
    operator= (const Bluetooth& x);

    virtual 
    ~Bluetooth ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ::xsd::cxx::tree::one< Address_type > Address_;
  };

  class TCP_IPv4: public ::xml_schema::type
  {
    public:
    // Control
    //
    typedef ::DcpTestSuite::Control Control_type;
    typedef ::xsd::cxx::tree::traits< Control_type, char > Control_traits;

    const Control_type&
    Control () const;

    Control_type&
    Control ();

    void
    Control (const Control_type& x);

    void
    Control (::std::auto_ptr< Control_type > p);

    // DAT_input_output
    //
    typedef ::DcpTestSuite::DAT_input_output1 DAT_input_output_type;
    typedef ::xsd::cxx::tree::optional< DAT_input_output_type > DAT_input_output_optional;
    typedef ::xsd::cxx::tree::traits< DAT_input_output_type, char > DAT_input_output_traits;

    const DAT_input_output_optional&
    DAT_input_output () const;

    DAT_input_output_optional&
    DAT_input_output ();

    void
    DAT_input_output (const DAT_input_output_type& x);

    void
    DAT_input_output (const DAT_input_output_optional& x);

    void
    DAT_input_output (::std::auto_ptr< DAT_input_output_type > p);

    // DAT_parameter
    //
    typedef ::DcpTestSuite::DAT_parameter1 DAT_parameter_type;
    typedef ::xsd::cxx::tree::optional< DAT_parameter_type > DAT_parameter_optional;
    typedef ::xsd::cxx::tree::traits< DAT_parameter_type, char > DAT_parameter_traits;

    const DAT_parameter_optional&
    DAT_parameter () const;

    DAT_parameter_optional&
    DAT_parameter ();

    void
    DAT_parameter (const DAT_parameter_type& x);

    void
    DAT_parameter (const DAT_parameter_optional& x);

    void
    DAT_parameter (::std::auto_ptr< DAT_parameter_type > p);

    // Constructors.
    //
    TCP_IPv4 (const Control_type&);

    TCP_IPv4 (::std::auto_ptr< Control_type >);

    TCP_IPv4 (const ::xercesc::DOMElement& e,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

    TCP_IPv4 (const TCP_IPv4& x,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

    virtual TCP_IPv4*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    TCP_IPv4&
    operator= (const TCP_IPv4& x);

    virtual 
    ~TCP_IPv4 ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ::xsd::cxx::tree::one< Control_type > Control_;
    DAT_input_output_optional DAT_input_output_;
    DAT_parameter_optional DAT_parameter_;
  };

  class Sending: public ::xml_schema::type
  {
    public:
    // ClockTime
    //
    typedef ::DcpTestSuite::ClockTime ClockTime_type;
    typedef ::xsd::cxx::tree::optional< ClockTime_type > ClockTime_optional;
    typedef ::xsd::cxx::tree::traits< ClockTime_type, char > ClockTime_traits;

    const ClockTime_optional&
    ClockTime () const;

    ClockTime_optional&
    ClockTime ();

    void
    ClockTime (const ClockTime_type& x);

    void
    ClockTime (const ClockTime_optional& x);

    void
    ClockTime (::std::auto_ptr< ClockTime_type > p);

    // CFG_time_res
    //
    typedef ::DcpTestSuite::CFG_time_res CFG_time_res_type;
    typedef ::xsd::cxx::tree::optional< CFG_time_res_type > CFG_time_res_optional;
    typedef ::xsd::cxx::tree::traits< CFG_time_res_type, char > CFG_time_res_traits;

    const CFG_time_res_optional&
    CFG_time_res () const;

    CFG_time_res_optional&
    CFG_time_res ();

    void
    CFG_time_res (const CFG_time_res_type& x);

    void
    CFG_time_res (const CFG_time_res_optional& x);

    void
    CFG_time_res (::std::auto_ptr< CFG_time_res_type > p);

    // CFG_steps
    //
    typedef ::DcpTestSuite::CFG_steps CFG_steps_type;
    typedef ::xsd::cxx::tree::optional< CFG_steps_type > CFG_steps_optional;
    typedef ::xsd::cxx::tree::traits< CFG_steps_type, char > CFG_steps_traits;

    const CFG_steps_optional&
    CFG_steps () const;

    CFG_steps_optional&
    CFG_steps ();

    void
    CFG_steps (const CFG_steps_type& x);

    void
    CFG_steps (const CFG_steps_optional& x);

    void
    CFG_steps (::std::auto_ptr< CFG_steps_type > p);

    // CFG_input
    //
    typedef ::DcpTestSuite::CFG_input CFG_input_type;
    typedef ::xsd::cxx::tree::optional< CFG_input_type > CFG_input_optional;
    typedef ::xsd::cxx::tree::traits< CFG_input_type, char > CFG_input_traits;

    const CFG_input_optional&
    CFG_input () const;

    CFG_input_optional&
    CFG_input ();

    void
    CFG_input (const CFG_input_type& x);

    void
    CFG_input (const CFG_input_optional& x);

    void
    CFG_input (::std::auto_ptr< CFG_input_type > p);

    // CFG_output
    //
    typedef ::DcpTestSuite::CFG_output CFG_output_type;
    typedef ::xsd::cxx::tree::optional< CFG_output_type > CFG_output_optional;
    typedef ::xsd::cxx::tree::traits< CFG_output_type, char > CFG_output_traits;

    const CFG_output_optional&
    CFG_output () const;

    CFG_output_optional&
    CFG_output ();

    void
    CFG_output (const CFG_output_type& x);

    void
    CFG_output (const CFG_output_optional& x);

    void
    CFG_output (::std::auto_ptr< CFG_output_type > p);

    // CFG_source_network_information
    //
    typedef ::DcpTestSuite::CFG_source_network_information CFG_source_network_information_type;
    typedef ::xsd::cxx::tree::optional< CFG_source_network_information_type > CFG_source_network_information_optional;
    typedef ::xsd::cxx::tree::traits< CFG_source_network_information_type, char > CFG_source_network_information_traits;

    const CFG_source_network_information_optional&
    CFG_source_network_information () const;

    CFG_source_network_information_optional&
    CFG_source_network_information ();

    void
    CFG_source_network_information (const CFG_source_network_information_type& x);

    void
    CFG_source_network_information (const CFG_source_network_information_optional& x);

    void
    CFG_source_network_information (::std::auto_ptr< CFG_source_network_information_type > p);

    // CFG_source_network_information_UDP_IPv4
    //
    typedef ::DcpTestSuite::CFG_source_network_information_UDP_IPv4 CFG_source_network_information_UDP_IPv4_type;
    typedef ::xsd::cxx::tree::optional< CFG_source_network_information_UDP_IPv4_type > CFG_source_network_information_UDP_IPv4_optional;
    typedef ::xsd::cxx::tree::traits< CFG_source_network_information_UDP_IPv4_type, char > CFG_source_network_information_UDP_IPv4_traits;

    const CFG_source_network_information_UDP_IPv4_optional&
    CFG_source_network_information_UDP_IPv4 () const;

    CFG_source_network_information_UDP_IPv4_optional&
    CFG_source_network_information_UDP_IPv4 ();

    void
    CFG_source_network_information_UDP_IPv4 (const CFG_source_network_information_UDP_IPv4_type& x);

    void
    CFG_source_network_information_UDP_IPv4 (const CFG_source_network_information_UDP_IPv4_optional& x);

    void
    CFG_source_network_information_UDP_IPv4 (::std::auto_ptr< CFG_source_network_information_UDP_IPv4_type > p);

    // CFG_source_network_information_USB
    //
    typedef ::DcpTestSuite::CFG_source_network_information_USB CFG_source_network_information_USB_type;
    typedef ::xsd::cxx::tree::optional< CFG_source_network_information_USB_type > CFG_source_network_information_USB_optional;
    typedef ::xsd::cxx::tree::traits< CFG_source_network_information_USB_type, char > CFG_source_network_information_USB_traits;

    const CFG_source_network_information_USB_optional&
    CFG_source_network_information_USB () const;

    CFG_source_network_information_USB_optional&
    CFG_source_network_information_USB ();

    void
    CFG_source_network_information_USB (const CFG_source_network_information_USB_type& x);

    void
    CFG_source_network_information_USB (const CFG_source_network_information_USB_optional& x);

    void
    CFG_source_network_information_USB (::std::auto_ptr< CFG_source_network_information_USB_type > p);

    // CFG_source_network_information_Bluetooth
    //
    typedef ::DcpTestSuite::CFG_source_network_information_Bluetooth CFG_source_network_information_Bluetooth_type;
    typedef ::xsd::cxx::tree::optional< CFG_source_network_information_Bluetooth_type > CFG_source_network_information_Bluetooth_optional;
    typedef ::xsd::cxx::tree::traits< CFG_source_network_information_Bluetooth_type, char > CFG_source_network_information_Bluetooth_traits;

    const CFG_source_network_information_Bluetooth_optional&
    CFG_source_network_information_Bluetooth () const;

    CFG_source_network_information_Bluetooth_optional&
    CFG_source_network_information_Bluetooth ();

    void
    CFG_source_network_information_Bluetooth (const CFG_source_network_information_Bluetooth_type& x);

    void
    CFG_source_network_information_Bluetooth (const CFG_source_network_information_Bluetooth_optional& x);

    void
    CFG_source_network_information_Bluetooth (::std::auto_ptr< CFG_source_network_information_Bluetooth_type > p);

    // CFG_source_network_information_TCP_IPv4
    //
    typedef ::DcpTestSuite::CFG_source_network_information_TCP_IPv4 CFG_source_network_information_TCP_IPv4_type;
    typedef ::xsd::cxx::tree::optional< CFG_source_network_information_TCP_IPv4_type > CFG_source_network_information_TCP_IPv4_optional;
    typedef ::xsd::cxx::tree::traits< CFG_source_network_information_TCP_IPv4_type, char > CFG_source_network_information_TCP_IPv4_traits;

    const CFG_source_network_information_TCP_IPv4_optional&
    CFG_source_network_information_TCP_IPv4 () const;

    CFG_source_network_information_TCP_IPv4_optional&
    CFG_source_network_information_TCP_IPv4 ();

    void
    CFG_source_network_information_TCP_IPv4 (const CFG_source_network_information_TCP_IPv4_type& x);

    void
    CFG_source_network_information_TCP_IPv4 (const CFG_source_network_information_TCP_IPv4_optional& x);

    void
    CFG_source_network_information_TCP_IPv4 (::std::auto_ptr< CFG_source_network_information_TCP_IPv4_type > p);

    // CFG_target_network_information
    //
    typedef ::DcpTestSuite::CFG_target_network_information CFG_target_network_information_type;
    typedef ::xsd::cxx::tree::optional< CFG_target_network_information_type > CFG_target_network_information_optional;
    typedef ::xsd::cxx::tree::traits< CFG_target_network_information_type, char > CFG_target_network_information_traits;

    const CFG_target_network_information_optional&
    CFG_target_network_information () const;

    CFG_target_network_information_optional&
    CFG_target_network_information ();

    void
    CFG_target_network_information (const CFG_target_network_information_type& x);

    void
    CFG_target_network_information (const CFG_target_network_information_optional& x);

    void
    CFG_target_network_information (::std::auto_ptr< CFG_target_network_information_type > p);

    // CFG_target_network_information_UDP_IPv4
    //
    typedef ::DcpTestSuite::CFG_target_network_information_UDP_IPv4 CFG_target_network_information_UDP_IPv4_type;
    typedef ::xsd::cxx::tree::optional< CFG_target_network_information_UDP_IPv4_type > CFG_target_network_information_UDP_IPv4_optional;
    typedef ::xsd::cxx::tree::traits< CFG_target_network_information_UDP_IPv4_type, char > CFG_target_network_information_UDP_IPv4_traits;

    const CFG_target_network_information_UDP_IPv4_optional&
    CFG_target_network_information_UDP_IPv4 () const;

    CFG_target_network_information_UDP_IPv4_optional&
    CFG_target_network_information_UDP_IPv4 ();

    void
    CFG_target_network_information_UDP_IPv4 (const CFG_target_network_information_UDP_IPv4_type& x);

    void
    CFG_target_network_information_UDP_IPv4 (const CFG_target_network_information_UDP_IPv4_optional& x);

    void
    CFG_target_network_information_UDP_IPv4 (::std::auto_ptr< CFG_target_network_information_UDP_IPv4_type > p);

    // CFG_target_network_information_USB
    //
    typedef ::DcpTestSuite::CFG_target_network_information_USB CFG_target_network_information_USB_type;
    typedef ::xsd::cxx::tree::optional< CFG_target_network_information_USB_type > CFG_target_network_information_USB_optional;
    typedef ::xsd::cxx::tree::traits< CFG_target_network_information_USB_type, char > CFG_target_network_information_USB_traits;

    const CFG_target_network_information_USB_optional&
    CFG_target_network_information_USB () const;

    CFG_target_network_information_USB_optional&
    CFG_target_network_information_USB ();

    void
    CFG_target_network_information_USB (const CFG_target_network_information_USB_type& x);

    void
    CFG_target_network_information_USB (const CFG_target_network_information_USB_optional& x);

    void
    CFG_target_network_information_USB (::std::auto_ptr< CFG_target_network_information_USB_type > p);

    // CFG_target_network_information_Bluetooth
    //
    typedef ::DcpTestSuite::CFG_target_network_information_Bluetooth CFG_target_network_information_Bluetooth_type;
    typedef ::xsd::cxx::tree::optional< CFG_target_network_information_Bluetooth_type > CFG_target_network_information_Bluetooth_optional;
    typedef ::xsd::cxx::tree::traits< CFG_target_network_information_Bluetooth_type, char > CFG_target_network_information_Bluetooth_traits;

    const CFG_target_network_information_Bluetooth_optional&
    CFG_target_network_information_Bluetooth () const;

    CFG_target_network_information_Bluetooth_optional&
    CFG_target_network_information_Bluetooth ();

    void
    CFG_target_network_information_Bluetooth (const CFG_target_network_information_Bluetooth_type& x);

    void
    CFG_target_network_information_Bluetooth (const CFG_target_network_information_Bluetooth_optional& x);

    void
    CFG_target_network_information_Bluetooth (::std::auto_ptr< CFG_target_network_information_Bluetooth_type > p);

    // CFG_target_network_information_TCP_IPv4
    //
    typedef ::DcpTestSuite::CFG_target_network_information_TCP_IPv4 CFG_target_network_information_TCP_IPv4_type;
    typedef ::xsd::cxx::tree::optional< CFG_target_network_information_TCP_IPv4_type > CFG_target_network_information_TCP_IPv4_optional;
    typedef ::xsd::cxx::tree::traits< CFG_target_network_information_TCP_IPv4_type, char > CFG_target_network_information_TCP_IPv4_traits;

    const CFG_target_network_information_TCP_IPv4_optional&
    CFG_target_network_information_TCP_IPv4 () const;

    CFG_target_network_information_TCP_IPv4_optional&
    CFG_target_network_information_TCP_IPv4 ();

    void
    CFG_target_network_information_TCP_IPv4 (const CFG_target_network_information_TCP_IPv4_type& x);

    void
    CFG_target_network_information_TCP_IPv4 (const CFG_target_network_information_TCP_IPv4_optional& x);

    void
    CFG_target_network_information_TCP_IPv4 (::std::auto_ptr< CFG_target_network_information_TCP_IPv4_type > p);

    // CFG_clear
    //
    typedef ::DcpTestSuite::CFG_clear CFG_clear_type;
    typedef ::xsd::cxx::tree::optional< CFG_clear_type > CFG_clear_optional;
    typedef ::xsd::cxx::tree::traits< CFG_clear_type, char > CFG_clear_traits;

    const CFG_clear_optional&
    CFG_clear () const;

    CFG_clear_optional&
    CFG_clear ();

    void
    CFG_clear (const CFG_clear_type& x);

    void
    CFG_clear (const CFG_clear_optional& x);

    void
    CFG_clear (::std::auto_ptr< CFG_clear_type > p);

    // CFG_parameter
    //
    typedef ::DcpTestSuite::CFG_parameter CFG_parameter_type;
    typedef ::xsd::cxx::tree::optional< CFG_parameter_type > CFG_parameter_optional;
    typedef ::xsd::cxx::tree::traits< CFG_parameter_type, char > CFG_parameter_traits;

    const CFG_parameter_optional&
    CFG_parameter () const;

    CFG_parameter_optional&
    CFG_parameter ();

    void
    CFG_parameter (const CFG_parameter_type& x);

    void
    CFG_parameter (const CFG_parameter_optional& x);

    void
    CFG_parameter (::std::auto_ptr< CFG_parameter_type > p);

    // CFG_tunable_parameter
    //
    typedef ::DcpTestSuite::CFG_tunable_parameter CFG_tunable_parameter_type;
    typedef ::xsd::cxx::tree::optional< CFG_tunable_parameter_type > CFG_tunable_parameter_optional;
    typedef ::xsd::cxx::tree::traits< CFG_tunable_parameter_type, char > CFG_tunable_parameter_traits;

    const CFG_tunable_parameter_optional&
    CFG_tunable_parameter () const;

    CFG_tunable_parameter_optional&
    CFG_tunable_parameter ();

    void
    CFG_tunable_parameter (const CFG_tunable_parameter_type& x);

    void
    CFG_tunable_parameter (const CFG_tunable_parameter_optional& x);

    void
    CFG_tunable_parameter (::std::auto_ptr< CFG_tunable_parameter_type > p);

    // CFG_param_network_information
    //
    typedef ::DcpTestSuite::CFG_param_network_information CFG_param_network_information_type;
    typedef ::xsd::cxx::tree::optional< CFG_param_network_information_type > CFG_param_network_information_optional;
    typedef ::xsd::cxx::tree::traits< CFG_param_network_information_type, char > CFG_param_network_information_traits;

    const CFG_param_network_information_optional&
    CFG_param_network_information () const;

    CFG_param_network_information_optional&
    CFG_param_network_information ();

    void
    CFG_param_network_information (const CFG_param_network_information_type& x);

    void
    CFG_param_network_information (const CFG_param_network_information_optional& x);

    void
    CFG_param_network_information (::std::auto_ptr< CFG_param_network_information_type > p);

    // CFG_param_network_information_UDP_IPv4
    //
    typedef ::DcpTestSuite::CFG_param_network_information_UDP_IPv4 CFG_param_network_information_UDP_IPv4_type;
    typedef ::xsd::cxx::tree::optional< CFG_param_network_information_UDP_IPv4_type > CFG_param_network_information_UDP_IPv4_optional;
    typedef ::xsd::cxx::tree::traits< CFG_param_network_information_UDP_IPv4_type, char > CFG_param_network_information_UDP_IPv4_traits;

    const CFG_param_network_information_UDP_IPv4_optional&
    CFG_param_network_information_UDP_IPv4 () const;

    CFG_param_network_information_UDP_IPv4_optional&
    CFG_param_network_information_UDP_IPv4 ();

    void
    CFG_param_network_information_UDP_IPv4 (const CFG_param_network_information_UDP_IPv4_type& x);

    void
    CFG_param_network_information_UDP_IPv4 (const CFG_param_network_information_UDP_IPv4_optional& x);

    void
    CFG_param_network_information_UDP_IPv4 (::std::auto_ptr< CFG_param_network_information_UDP_IPv4_type > p);

    // CFG_param_network_information_USB
    //
    typedef ::DcpTestSuite::CFG_param_network_information_USB CFG_param_network_information_USB_type;
    typedef ::xsd::cxx::tree::optional< CFG_param_network_information_USB_type > CFG_param_network_information_USB_optional;
    typedef ::xsd::cxx::tree::traits< CFG_param_network_information_USB_type, char > CFG_param_network_information_USB_traits;

    const CFG_param_network_information_USB_optional&
    CFG_param_network_information_USB () const;

    CFG_param_network_information_USB_optional&
    CFG_param_network_information_USB ();

    void
    CFG_param_network_information_USB (const CFG_param_network_information_USB_type& x);

    void
    CFG_param_network_information_USB (const CFG_param_network_information_USB_optional& x);

    void
    CFG_param_network_information_USB (::std::auto_ptr< CFG_param_network_information_USB_type > p);

    // CFG_param_network_information_Bluetooth
    //
    typedef ::DcpTestSuite::CFG_param_network_information_Bluetooth CFG_param_network_information_Bluetooth_type;
    typedef ::xsd::cxx::tree::optional< CFG_param_network_information_Bluetooth_type > CFG_param_network_information_Bluetooth_optional;
    typedef ::xsd::cxx::tree::traits< CFG_param_network_information_Bluetooth_type, char > CFG_param_network_information_Bluetooth_traits;

    const CFG_param_network_information_Bluetooth_optional&
    CFG_param_network_information_Bluetooth () const;

    CFG_param_network_information_Bluetooth_optional&
    CFG_param_network_information_Bluetooth ();

    void
    CFG_param_network_information_Bluetooth (const CFG_param_network_information_Bluetooth_type& x);

    void
    CFG_param_network_information_Bluetooth (const CFG_param_network_information_Bluetooth_optional& x);

    void
    CFG_param_network_information_Bluetooth (::std::auto_ptr< CFG_param_network_information_Bluetooth_type > p);

    // CFG_param_network_information_TCP_IPv4
    //
    typedef ::DcpTestSuite::CFG_param_network_information_TCP_IPv4 CFG_param_network_information_TCP_IPv4_type;
    typedef ::xsd::cxx::tree::optional< CFG_param_network_information_TCP_IPv4_type > CFG_param_network_information_TCP_IPv4_optional;
    typedef ::xsd::cxx::tree::traits< CFG_param_network_information_TCP_IPv4_type, char > CFG_param_network_information_TCP_IPv4_traits;

    const CFG_param_network_information_TCP_IPv4_optional&
    CFG_param_network_information_TCP_IPv4 () const;

    CFG_param_network_information_TCP_IPv4_optional&
    CFG_param_network_information_TCP_IPv4 ();

    void
    CFG_param_network_information_TCP_IPv4 (const CFG_param_network_information_TCP_IPv4_type& x);

    void
    CFG_param_network_information_TCP_IPv4 (const CFG_param_network_information_TCP_IPv4_optional& x);

    void
    CFG_param_network_information_TCP_IPv4 (::std::auto_ptr< CFG_param_network_information_TCP_IPv4_type > p);

    // CFG_logging
    //
    typedef ::DcpTestSuite::CFG_logging CFG_logging_type;
    typedef ::xsd::cxx::tree::optional< CFG_logging_type > CFG_logging_optional;
    typedef ::xsd::cxx::tree::traits< CFG_logging_type, char > CFG_logging_traits;

    const CFG_logging_optional&
    CFG_logging () const;

    CFG_logging_optional&
    CFG_logging ();

    void
    CFG_logging (const CFG_logging_type& x);

    void
    CFG_logging (const CFG_logging_optional& x);

    void
    CFG_logging (::std::auto_ptr< CFG_logging_type > p);

    // CFG_scope
    //
    typedef ::DcpTestSuite::CFG_scope CFG_scope_type;
    typedef ::xsd::cxx::tree::optional< CFG_scope_type > CFG_scope_optional;
    typedef ::xsd::cxx::tree::traits< CFG_scope_type, char > CFG_scope_traits;

    const CFG_scope_optional&
    CFG_scope () const;

    CFG_scope_optional&
    CFG_scope ();

    void
    CFG_scope (const CFG_scope_type& x);

    void
    CFG_scope (const CFG_scope_optional& x);

    void
    CFG_scope (::std::auto_ptr< CFG_scope_type > p);

    // STC_register
    //
    typedef ::DcpTestSuite::STC_register STC_register_type;
    typedef ::xsd::cxx::tree::optional< STC_register_type > STC_register_optional;
    typedef ::xsd::cxx::tree::traits< STC_register_type, char > STC_register_traits;

    const STC_register_optional&
    STC_register () const;

    STC_register_optional&
    STC_register ();

    void
    STC_register (const STC_register_type& x);

    void
    STC_register (const STC_register_optional& x);

    void
    STC_register (::std::auto_ptr< STC_register_type > p);

    // STC_deregister
    //
    typedef ::DcpTestSuite::STC_deregister STC_deregister_type;
    typedef ::xsd::cxx::tree::optional< STC_deregister_type > STC_deregister_optional;
    typedef ::xsd::cxx::tree::traits< STC_deregister_type, char > STC_deregister_traits;

    const STC_deregister_optional&
    STC_deregister () const;

    STC_deregister_optional&
    STC_deregister ();

    void
    STC_deregister (const STC_deregister_type& x);

    void
    STC_deregister (const STC_deregister_optional& x);

    void
    STC_deregister (::std::auto_ptr< STC_deregister_type > p);

    // STC_prepare
    //
    typedef ::DcpTestSuite::STC_prepare STC_prepare_type;
    typedef ::xsd::cxx::tree::optional< STC_prepare_type > STC_prepare_optional;
    typedef ::xsd::cxx::tree::traits< STC_prepare_type, char > STC_prepare_traits;

    const STC_prepare_optional&
    STC_prepare () const;

    STC_prepare_optional&
    STC_prepare ();

    void
    STC_prepare (const STC_prepare_type& x);

    void
    STC_prepare (const STC_prepare_optional& x);

    void
    STC_prepare (::std::auto_ptr< STC_prepare_type > p);

    // STC_configure
    //
    typedef ::DcpTestSuite::STC_configure STC_configure_type;
    typedef ::xsd::cxx::tree::optional< STC_configure_type > STC_configure_optional;
    typedef ::xsd::cxx::tree::traits< STC_configure_type, char > STC_configure_traits;

    const STC_configure_optional&
    STC_configure () const;

    STC_configure_optional&
    STC_configure ();

    void
    STC_configure (const STC_configure_type& x);

    void
    STC_configure (const STC_configure_optional& x);

    void
    STC_configure (::std::auto_ptr< STC_configure_type > p);

    // STC_initialize
    //
    typedef ::DcpTestSuite::STC_initialize STC_initialize_type;
    typedef ::xsd::cxx::tree::optional< STC_initialize_type > STC_initialize_optional;
    typedef ::xsd::cxx::tree::traits< STC_initialize_type, char > STC_initialize_traits;

    const STC_initialize_optional&
    STC_initialize () const;

    STC_initialize_optional&
    STC_initialize ();

    void
    STC_initialize (const STC_initialize_type& x);

    void
    STC_initialize (const STC_initialize_optional& x);

    void
    STC_initialize (::std::auto_ptr< STC_initialize_type > p);

    // STC_run
    //
    typedef ::DcpTestSuite::STC_run STC_run_type;
    typedef ::xsd::cxx::tree::optional< STC_run_type > STC_run_optional;
    typedef ::xsd::cxx::tree::traits< STC_run_type, char > STC_run_traits;

    const STC_run_optional&
    STC_run () const;

    STC_run_optional&
    STC_run ();

    void
    STC_run (const STC_run_type& x);

    void
    STC_run (const STC_run_optional& x);

    void
    STC_run (::std::auto_ptr< STC_run_type > p);

    // STC_do_step
    //
    typedef ::DcpTestSuite::STC_do_step STC_do_step_type;
    typedef ::xsd::cxx::tree::optional< STC_do_step_type > STC_do_step_optional;
    typedef ::xsd::cxx::tree::traits< STC_do_step_type, char > STC_do_step_traits;

    const STC_do_step_optional&
    STC_do_step () const;

    STC_do_step_optional&
    STC_do_step ();

    void
    STC_do_step (const STC_do_step_type& x);

    void
    STC_do_step (const STC_do_step_optional& x);

    void
    STC_do_step (::std::auto_ptr< STC_do_step_type > p);

    // STC_send_outputs
    //
    typedef ::DcpTestSuite::STC_send_outputs STC_send_outputs_type;
    typedef ::xsd::cxx::tree::optional< STC_send_outputs_type > STC_send_outputs_optional;
    typedef ::xsd::cxx::tree::traits< STC_send_outputs_type, char > STC_send_outputs_traits;

    const STC_send_outputs_optional&
    STC_send_outputs () const;

    STC_send_outputs_optional&
    STC_send_outputs ();

    void
    STC_send_outputs (const STC_send_outputs_type& x);

    void
    STC_send_outputs (const STC_send_outputs_optional& x);

    void
    STC_send_outputs (::std::auto_ptr< STC_send_outputs_type > p);

    // STC_stop
    //
    typedef ::DcpTestSuite::STC_stop STC_stop_type;
    typedef ::xsd::cxx::tree::optional< STC_stop_type > STC_stop_optional;
    typedef ::xsd::cxx::tree::traits< STC_stop_type, char > STC_stop_traits;

    const STC_stop_optional&
    STC_stop () const;

    STC_stop_optional&
    STC_stop ();

    void
    STC_stop (const STC_stop_type& x);

    void
    STC_stop (const STC_stop_optional& x);

    void
    STC_stop (::std::auto_ptr< STC_stop_type > p);

    // STC_reset
    //
    typedef ::DcpTestSuite::STC_reset STC_reset_type;
    typedef ::xsd::cxx::tree::optional< STC_reset_type > STC_reset_optional;
    typedef ::xsd::cxx::tree::traits< STC_reset_type, char > STC_reset_traits;

    const STC_reset_optional&
    STC_reset () const;

    STC_reset_optional&
    STC_reset ();

    void
    STC_reset (const STC_reset_type& x);

    void
    STC_reset (const STC_reset_optional& x);

    void
    STC_reset (::std::auto_ptr< STC_reset_type > p);

    // INF_state
    //
    typedef ::DcpTestSuite::INF_state INF_state_type;
    typedef ::xsd::cxx::tree::optional< INF_state_type > INF_state_optional;
    typedef ::xsd::cxx::tree::traits< INF_state_type, char > INF_state_traits;

    const INF_state_optional&
    INF_state () const;

    INF_state_optional&
    INF_state ();

    void
    INF_state (const INF_state_type& x);

    void
    INF_state (const INF_state_optional& x);

    void
    INF_state (::std::auto_ptr< INF_state_type > p);

    // INF_error
    //
    typedef ::DcpTestSuite::INF_error INF_error_type;
    typedef ::xsd::cxx::tree::optional< INF_error_type > INF_error_optional;
    typedef ::xsd::cxx::tree::traits< INF_error_type, char > INF_error_traits;

    const INF_error_optional&
    INF_error () const;

    INF_error_optional&
    INF_error ();

    void
    INF_error (const INF_error_type& x);

    void
    INF_error (const INF_error_optional& x);

    void
    INF_error (::std::auto_ptr< INF_error_type > p);

    // INF_log
    //
    typedef ::DcpTestSuite::INF_log INF_log_type;
    typedef ::xsd::cxx::tree::optional< INF_log_type > INF_log_optional;
    typedef ::xsd::cxx::tree::traits< INF_log_type, char > INF_log_traits;

    const INF_log_optional&
    INF_log () const;

    INF_log_optional&
    INF_log ();

    void
    INF_log (const INF_log_type& x);

    void
    INF_log (const INF_log_optional& x);

    void
    INF_log (::std::auto_ptr< INF_log_type > p);

    // DAT_input_output
    //
    typedef ::DcpTestSuite::DAT_input_output2 DAT_input_output_type;
    typedef ::xsd::cxx::tree::optional< DAT_input_output_type > DAT_input_output_optional;
    typedef ::xsd::cxx::tree::traits< DAT_input_output_type, char > DAT_input_output_traits;

    const DAT_input_output_optional&
    DAT_input_output () const;

    DAT_input_output_optional&
    DAT_input_output ();

    void
    DAT_input_output (const DAT_input_output_type& x);

    void
    DAT_input_output (const DAT_input_output_optional& x);

    void
    DAT_input_output (::std::auto_ptr< DAT_input_output_type > p);

    // DAT_parameter
    //
    typedef ::DcpTestSuite::DAT_parameter2 DAT_parameter_type;
    typedef ::xsd::cxx::tree::optional< DAT_parameter_type > DAT_parameter_optional;
    typedef ::xsd::cxx::tree::traits< DAT_parameter_type, char > DAT_parameter_traits;

    const DAT_parameter_optional&
    DAT_parameter () const;

    DAT_parameter_optional&
    DAT_parameter ();

    void
    DAT_parameter (const DAT_parameter_type& x);

    void
    DAT_parameter (const DAT_parameter_optional& x);

    void
    DAT_parameter (::std::auto_ptr< DAT_parameter_type > p);

    // Constructors.
    //
    Sending ();

    Sending (const ::xercesc::DOMElement& e,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

    Sending (const Sending& x,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

    virtual Sending*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    Sending&
    operator= (const Sending& x);

    virtual 
    ~Sending ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ClockTime_optional ClockTime_;
    CFG_time_res_optional CFG_time_res_;
    CFG_steps_optional CFG_steps_;
    CFG_input_optional CFG_input_;
    CFG_output_optional CFG_output_;
    CFG_source_network_information_optional CFG_source_network_information_;
    CFG_source_network_information_UDP_IPv4_optional CFG_source_network_information_UDP_IPv4_;
    CFG_source_network_information_USB_optional CFG_source_network_information_USB_;
    CFG_source_network_information_Bluetooth_optional CFG_source_network_information_Bluetooth_;
    CFG_source_network_information_TCP_IPv4_optional CFG_source_network_information_TCP_IPv4_;
    CFG_target_network_information_optional CFG_target_network_information_;
    CFG_target_network_information_UDP_IPv4_optional CFG_target_network_information_UDP_IPv4_;
    CFG_target_network_information_USB_optional CFG_target_network_information_USB_;
    CFG_target_network_information_Bluetooth_optional CFG_target_network_information_Bluetooth_;
    CFG_target_network_information_TCP_IPv4_optional CFG_target_network_information_TCP_IPv4_;
    CFG_clear_optional CFG_clear_;
    CFG_parameter_optional CFG_parameter_;
    CFG_tunable_parameter_optional CFG_tunable_parameter_;
    CFG_param_network_information_optional CFG_param_network_information_;
    CFG_param_network_information_UDP_IPv4_optional CFG_param_network_information_UDP_IPv4_;
    CFG_param_network_information_USB_optional CFG_param_network_information_USB_;
    CFG_param_network_information_Bluetooth_optional CFG_param_network_information_Bluetooth_;
    CFG_param_network_information_TCP_IPv4_optional CFG_param_network_information_TCP_IPv4_;
    CFG_logging_optional CFG_logging_;
    CFG_scope_optional CFG_scope_;
    STC_register_optional STC_register_;
    STC_deregister_optional STC_deregister_;
    STC_prepare_optional STC_prepare_;
    STC_configure_optional STC_configure_;
    STC_initialize_optional STC_initialize_;
    STC_run_optional STC_run_;
    STC_do_step_optional STC_do_step_;
    STC_send_outputs_optional STC_send_outputs_;
    STC_stop_optional STC_stop_;
    STC_reset_optional STC_reset_;
    INF_state_optional INF_state_;
    INF_error_optional INF_error_;
    INF_log_optional INF_log_;
    DAT_input_output_optional DAT_input_output_;
    DAT_parameter_optional DAT_parameter_;
  };

  class Receiving: public ::xml_schema::type
  {
    public:
    // RSP_ack
    //
    typedef ::DcpTestSuite::RSP_ack RSP_ack_type;
    typedef ::xsd::cxx::tree::optional< RSP_ack_type > RSP_ack_optional;
    typedef ::xsd::cxx::tree::traits< RSP_ack_type, char > RSP_ack_traits;

    const RSP_ack_optional&
    RSP_ack () const;

    RSP_ack_optional&
    RSP_ack ();

    void
    RSP_ack (const RSP_ack_type& x);

    void
    RSP_ack (const RSP_ack_optional& x);

    void
    RSP_ack (::std::auto_ptr< RSP_ack_type > p);

    // RSP_error_ack
    //
    typedef ::DcpTestSuite::RSP_error_ack RSP_error_ack_type;
    typedef ::xsd::cxx::tree::optional< RSP_error_ack_type > RSP_error_ack_optional;
    typedef ::xsd::cxx::tree::traits< RSP_error_ack_type, char > RSP_error_ack_traits;

    const RSP_error_ack_optional&
    RSP_error_ack () const;

    RSP_error_ack_optional&
    RSP_error_ack ();

    void
    RSP_error_ack (const RSP_error_ack_type& x);

    void
    RSP_error_ack (const RSP_error_ack_optional& x);

    void
    RSP_error_ack (::std::auto_ptr< RSP_error_ack_type > p);

    // RSP_nack
    //
    typedef ::DcpTestSuite::RSP_nack RSP_nack_type;
    typedef ::xsd::cxx::tree::optional< RSP_nack_type > RSP_nack_optional;
    typedef ::xsd::cxx::tree::traits< RSP_nack_type, char > RSP_nack_traits;

    const RSP_nack_optional&
    RSP_nack () const;

    RSP_nack_optional&
    RSP_nack ();

    void
    RSP_nack (const RSP_nack_type& x);

    void
    RSP_nack (const RSP_nack_optional& x);

    void
    RSP_nack (::std::auto_ptr< RSP_nack_type > p);

    // RSP_state_ack
    //
    typedef ::DcpTestSuite::RSP_state_ack RSP_state_ack_type;
    typedef ::xsd::cxx::tree::optional< RSP_state_ack_type > RSP_state_ack_optional;
    typedef ::xsd::cxx::tree::traits< RSP_state_ack_type, char > RSP_state_ack_traits;

    const RSP_state_ack_optional&
    RSP_state_ack () const;

    RSP_state_ack_optional&
    RSP_state_ack ();

    void
    RSP_state_ack (const RSP_state_ack_type& x);

    void
    RSP_state_ack (const RSP_state_ack_optional& x);

    void
    RSP_state_ack (::std::auto_ptr< RSP_state_ack_type > p);

    // NTF_state_changed
    //
    typedef ::DcpTestSuite::NTF_state_changed NTF_state_changed_type;
    typedef ::xsd::cxx::tree::optional< NTF_state_changed_type > NTF_state_changed_optional;
    typedef ::xsd::cxx::tree::traits< NTF_state_changed_type, char > NTF_state_changed_traits;

    const NTF_state_changed_optional&
    NTF_state_changed () const;

    NTF_state_changed_optional&
    NTF_state_changed ();

    void
    NTF_state_changed (const NTF_state_changed_type& x);

    void
    NTF_state_changed (const NTF_state_changed_optional& x);

    void
    NTF_state_changed (::std::auto_ptr< NTF_state_changed_type > p);

    // RSP_log_ack
    //
    typedef ::DcpTestSuite::RSP_log_ack RSP_log_ack_type;
    typedef ::xsd::cxx::tree::optional< RSP_log_ack_type > RSP_log_ack_optional;
    typedef ::xsd::cxx::tree::traits< RSP_log_ack_type, char > RSP_log_ack_traits;

    const RSP_log_ack_optional&
    RSP_log_ack () const;

    RSP_log_ack_optional&
    RSP_log_ack ();

    void
    RSP_log_ack (const RSP_log_ack_type& x);

    void
    RSP_log_ack (const RSP_log_ack_optional& x);

    void
    RSP_log_ack (::std::auto_ptr< RSP_log_ack_type > p);

    // NTF_log
    //
    typedef ::DcpTestSuite::NTF_log NTF_log_type;
    typedef ::xsd::cxx::tree::optional< NTF_log_type > NTF_log_optional;
    typedef ::xsd::cxx::tree::traits< NTF_log_type, char > NTF_log_traits;

    const NTF_log_optional&
    NTF_log () const;

    NTF_log_optional&
    NTF_log ();

    void
    NTF_log (const NTF_log_type& x);

    void
    NTF_log (const NTF_log_optional& x);

    void
    NTF_log (::std::auto_ptr< NTF_log_type > p);

    // DAT_input_output
    //
    typedef ::DcpTestSuite::DAT_input_output3 DAT_input_output_type;
    typedef ::xsd::cxx::tree::optional< DAT_input_output_type > DAT_input_output_optional;
    typedef ::xsd::cxx::tree::traits< DAT_input_output_type, char > DAT_input_output_traits;

    const DAT_input_output_optional&
    DAT_input_output () const;

    DAT_input_output_optional&
    DAT_input_output ();

    void
    DAT_input_output (const DAT_input_output_type& x);

    void
    DAT_input_output (const DAT_input_output_optional& x);

    void
    DAT_input_output (::std::auto_ptr< DAT_input_output_type > p);

    // DAT_parameter
    //
    typedef ::DcpTestSuite::DAT_parameter3 DAT_parameter_type;
    typedef ::xsd::cxx::tree::optional< DAT_parameter_type > DAT_parameter_optional;
    typedef ::xsd::cxx::tree::traits< DAT_parameter_type, char > DAT_parameter_traits;

    const DAT_parameter_optional&
    DAT_parameter () const;

    DAT_parameter_optional&
    DAT_parameter ();

    void
    DAT_parameter (const DAT_parameter_type& x);

    void
    DAT_parameter (const DAT_parameter_optional& x);

    void
    DAT_parameter (::std::auto_ptr< DAT_parameter_type > p);

    // Constructors.
    //
    Receiving ();

    Receiving (const ::xercesc::DOMElement& e,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

    Receiving (const Receiving& x,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

    virtual Receiving*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    Receiving&
    operator= (const Receiving& x);

    virtual 
    ~Receiving ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    RSP_ack_optional RSP_ack_;
    RSP_error_ack_optional RSP_error_ack_;
    RSP_nack_optional RSP_nack_;
    RSP_state_ack_optional RSP_state_ack_;
    NTF_state_changed_optional NTF_state_changed_;
    RSP_log_ack_optional RSP_log_ack_;
    NTF_log_optional NTF_log_;
    DAT_input_output_optional DAT_input_output_;
    DAT_parameter_optional DAT_parameter_;
  };

  class value: public ::xml_schema::simple_type,
    public ::xsd::cxx::tree::list< ::xml_schema::byte, char >
  {
    public:
    value ();

    value (size_type n, const ::xml_schema::byte& x);

    template < typename I >
    value (const I& begin, const I& end)
    : ::xsd::cxx::tree::list< ::xml_schema::byte, char > (begin, end, this)
    {
    }

    value (const ::xercesc::DOMElement& e,
           ::xml_schema::flags f = 0,
           ::xml_schema::container* c = 0);

    value (const ::xercesc::DOMAttr& a,
           ::xml_schema::flags f = 0,
           ::xml_schema::container* c = 0);

    value (const ::std::string& s,
           const ::xercesc::DOMElement* e,
           ::xml_schema::flags f = 0,
           ::xml_schema::container* c = 0);

    value (const value& x,
           ::xml_schema::flags f = 0,
           ::xml_schema::container* c = 0);

    virtual value*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~value ();
  };

  class value1: public ::xml_schema::simple_type,
    public ::xsd::cxx::tree::list< ::xml_schema::short_, char >
  {
    public:
    value1 ();

    value1 (size_type n, const ::xml_schema::short_& x);

    template < typename I >
    value1 (const I& begin, const I& end)
    : ::xsd::cxx::tree::list< ::xml_schema::short_, char > (begin, end, this)
    {
    }

    value1 (const ::xercesc::DOMElement& e,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

    value1 (const ::xercesc::DOMAttr& a,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

    value1 (const ::std::string& s,
            const ::xercesc::DOMElement* e,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

    value1 (const value1& x,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

    virtual value1*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~value1 ();
  };

  class value2: public ::xml_schema::simple_type,
    public ::xsd::cxx::tree::list< ::xml_schema::int_, char >
  {
    public:
    value2 ();

    value2 (size_type n, const ::xml_schema::int_& x);

    template < typename I >
    value2 (const I& begin, const I& end)
    : ::xsd::cxx::tree::list< ::xml_schema::int_, char > (begin, end, this)
    {
    }

    value2 (const ::xercesc::DOMElement& e,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

    value2 (const ::xercesc::DOMAttr& a,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

    value2 (const ::std::string& s,
            const ::xercesc::DOMElement* e,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

    value2 (const value2& x,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

    virtual value2*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~value2 ();
  };

  class value3: public ::xml_schema::simple_type,
    public ::xsd::cxx::tree::list< ::xml_schema::long_, char >
  {
    public:
    value3 ();

    value3 (size_type n, const ::xml_schema::long_& x);

    template < typename I >
    value3 (const I& begin, const I& end)
    : ::xsd::cxx::tree::list< ::xml_schema::long_, char > (begin, end, this)
    {
    }

    value3 (const ::xercesc::DOMElement& e,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

    value3 (const ::xercesc::DOMAttr& a,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

    value3 (const ::std::string& s,
            const ::xercesc::DOMElement* e,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

    value3 (const value3& x,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

    virtual value3*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~value3 ();
  };

  class value4: public ::xml_schema::simple_type,
    public ::xsd::cxx::tree::list< ::xml_schema::unsigned_byte, char >
  {
    public:
    value4 ();

    value4 (size_type n, const ::xml_schema::unsigned_byte& x);

    template < typename I >
    value4 (const I& begin, const I& end)
    : ::xsd::cxx::tree::list< ::xml_schema::unsigned_byte, char > (begin, end, this)
    {
    }

    value4 (const ::xercesc::DOMElement& e,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

    value4 (const ::xercesc::DOMAttr& a,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

    value4 (const ::std::string& s,
            const ::xercesc::DOMElement* e,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

    value4 (const value4& x,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

    virtual value4*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~value4 ();
  };

  class value5: public ::xml_schema::simple_type,
    public ::xsd::cxx::tree::list< ::xml_schema::unsigned_short, char >
  {
    public:
    value5 ();

    value5 (size_type n, const ::xml_schema::unsigned_short& x);

    template < typename I >
    value5 (const I& begin, const I& end)
    : ::xsd::cxx::tree::list< ::xml_schema::unsigned_short, char > (begin, end, this)
    {
    }

    value5 (const ::xercesc::DOMElement& e,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

    value5 (const ::xercesc::DOMAttr& a,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

    value5 (const ::std::string& s,
            const ::xercesc::DOMElement* e,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

    value5 (const value5& x,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

    virtual value5*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~value5 ();
  };

  class value6: public ::xml_schema::simple_type,
    public ::xsd::cxx::tree::list< ::xml_schema::unsigned_int, char >
  {
    public:
    value6 ();

    value6 (size_type n, const ::xml_schema::unsigned_int& x);

    template < typename I >
    value6 (const I& begin, const I& end)
    : ::xsd::cxx::tree::list< ::xml_schema::unsigned_int, char > (begin, end, this)
    {
    }

    value6 (const ::xercesc::DOMElement& e,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

    value6 (const ::xercesc::DOMAttr& a,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

    value6 (const ::std::string& s,
            const ::xercesc::DOMElement* e,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

    value6 (const value6& x,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

    virtual value6*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~value6 ();
  };

  class value7: public ::xml_schema::simple_type,
    public ::xsd::cxx::tree::list< ::xml_schema::unsigned_long, char >
  {
    public:
    value7 ();

    value7 (size_type n, const ::xml_schema::unsigned_long& x);

    template < typename I >
    value7 (const I& begin, const I& end)
    : ::xsd::cxx::tree::list< ::xml_schema::unsigned_long, char > (begin, end, this)
    {
    }

    value7 (const ::xercesc::DOMElement& e,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

    value7 (const ::xercesc::DOMAttr& a,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

    value7 (const ::std::string& s,
            const ::xercesc::DOMElement* e,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

    value7 (const value7& x,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

    virtual value7*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~value7 ();
  };

  class value8: public ::xml_schema::simple_type,
    public ::xsd::cxx::tree::list< ::xml_schema::float_, char >
  {
    public:
    value8 ();

    value8 (size_type n, const ::xml_schema::float_& x);

    template < typename I >
    value8 (const I& begin, const I& end)
    : ::xsd::cxx::tree::list< ::xml_schema::float_, char > (begin, end, this)
    {
    }

    value8 (const ::xercesc::DOMElement& e,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

    value8 (const ::xercesc::DOMAttr& a,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

    value8 (const ::std::string& s,
            const ::xercesc::DOMElement* e,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

    value8 (const value8& x,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

    virtual value8*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~value8 ();
  };

  class value9: public ::xml_schema::simple_type,
    public ::xsd::cxx::tree::list< ::xml_schema::double_, char, ::xsd::cxx::tree::schema_type::double_ >
  {
    public:
    value9 ();

    value9 (size_type n, const ::xml_schema::double_& x);

    template < typename I >
    value9 (const I& begin, const I& end)
    : ::xsd::cxx::tree::list< ::xml_schema::double_, char, ::xsd::cxx::tree::schema_type::double_ > (begin, end, this)
    {
    }

    value9 (const ::xercesc::DOMElement& e,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

    value9 (const ::xercesc::DOMAttr& a,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

    value9 (const ::std::string& s,
            const ::xercesc::DOMElement* e,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

    value9 (const value9& x,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

    virtual value9*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~value9 ();
  };

  class value10: public ::xml_schema::simple_type,
    public ::xsd::cxx::tree::list< ::xml_schema::byte, char >
  {
    public:
    value10 ();

    value10 (size_type n, const ::xml_schema::byte& x);

    template < typename I >
    value10 (const I& begin, const I& end)
    : ::xsd::cxx::tree::list< ::xml_schema::byte, char > (begin, end, this)
    {
    }

    value10 (const ::xercesc::DOMElement& e,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

    value10 (const ::xercesc::DOMAttr& a,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

    value10 (const ::std::string& s,
             const ::xercesc::DOMElement* e,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

    value10 (const value10& x,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

    virtual value10*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~value10 ();
  };

  class value11: public ::xml_schema::simple_type,
    public ::xsd::cxx::tree::list< ::xml_schema::short_, char >
  {
    public:
    value11 ();

    value11 (size_type n, const ::xml_schema::short_& x);

    template < typename I >
    value11 (const I& begin, const I& end)
    : ::xsd::cxx::tree::list< ::xml_schema::short_, char > (begin, end, this)
    {
    }

    value11 (const ::xercesc::DOMElement& e,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

    value11 (const ::xercesc::DOMAttr& a,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

    value11 (const ::std::string& s,
             const ::xercesc::DOMElement* e,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

    value11 (const value11& x,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

    virtual value11*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~value11 ();
  };

  class value12: public ::xml_schema::simple_type,
    public ::xsd::cxx::tree::list< ::xml_schema::int_, char >
  {
    public:
    value12 ();

    value12 (size_type n, const ::xml_schema::int_& x);

    template < typename I >
    value12 (const I& begin, const I& end)
    : ::xsd::cxx::tree::list< ::xml_schema::int_, char > (begin, end, this)
    {
    }

    value12 (const ::xercesc::DOMElement& e,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

    value12 (const ::xercesc::DOMAttr& a,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

    value12 (const ::std::string& s,
             const ::xercesc::DOMElement* e,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

    value12 (const value12& x,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

    virtual value12*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~value12 ();
  };

  class value13: public ::xml_schema::simple_type,
    public ::xsd::cxx::tree::list< ::xml_schema::long_, char >
  {
    public:
    value13 ();

    value13 (size_type n, const ::xml_schema::long_& x);

    template < typename I >
    value13 (const I& begin, const I& end)
    : ::xsd::cxx::tree::list< ::xml_schema::long_, char > (begin, end, this)
    {
    }

    value13 (const ::xercesc::DOMElement& e,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

    value13 (const ::xercesc::DOMAttr& a,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

    value13 (const ::std::string& s,
             const ::xercesc::DOMElement* e,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

    value13 (const value13& x,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

    virtual value13*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~value13 ();
  };

  class value14: public ::xml_schema::simple_type,
    public ::xsd::cxx::tree::list< ::xml_schema::unsigned_byte, char >
  {
    public:
    value14 ();

    value14 (size_type n, const ::xml_schema::unsigned_byte& x);

    template < typename I >
    value14 (const I& begin, const I& end)
    : ::xsd::cxx::tree::list< ::xml_schema::unsigned_byte, char > (begin, end, this)
    {
    }

    value14 (const ::xercesc::DOMElement& e,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

    value14 (const ::xercesc::DOMAttr& a,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

    value14 (const ::std::string& s,
             const ::xercesc::DOMElement* e,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

    value14 (const value14& x,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

    virtual value14*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~value14 ();
  };

  class value15: public ::xml_schema::simple_type,
    public ::xsd::cxx::tree::list< ::xml_schema::unsigned_short, char >
  {
    public:
    value15 ();

    value15 (size_type n, const ::xml_schema::unsigned_short& x);

    template < typename I >
    value15 (const I& begin, const I& end)
    : ::xsd::cxx::tree::list< ::xml_schema::unsigned_short, char > (begin, end, this)
    {
    }

    value15 (const ::xercesc::DOMElement& e,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

    value15 (const ::xercesc::DOMAttr& a,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

    value15 (const ::std::string& s,
             const ::xercesc::DOMElement* e,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

    value15 (const value15& x,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

    virtual value15*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~value15 ();
  };

  class value16: public ::xml_schema::simple_type,
    public ::xsd::cxx::tree::list< ::xml_schema::unsigned_int, char >
  {
    public:
    value16 ();

    value16 (size_type n, const ::xml_schema::unsigned_int& x);

    template < typename I >
    value16 (const I& begin, const I& end)
    : ::xsd::cxx::tree::list< ::xml_schema::unsigned_int, char > (begin, end, this)
    {
    }

    value16 (const ::xercesc::DOMElement& e,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

    value16 (const ::xercesc::DOMAttr& a,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

    value16 (const ::std::string& s,
             const ::xercesc::DOMElement* e,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

    value16 (const value16& x,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

    virtual value16*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~value16 ();
  };

  class value17: public ::xml_schema::simple_type,
    public ::xsd::cxx::tree::list< ::xml_schema::unsigned_long, char >
  {
    public:
    value17 ();

    value17 (size_type n, const ::xml_schema::unsigned_long& x);

    template < typename I >
    value17 (const I& begin, const I& end)
    : ::xsd::cxx::tree::list< ::xml_schema::unsigned_long, char > (begin, end, this)
    {
    }

    value17 (const ::xercesc::DOMElement& e,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

    value17 (const ::xercesc::DOMAttr& a,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

    value17 (const ::std::string& s,
             const ::xercesc::DOMElement* e,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

    value17 (const value17& x,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

    virtual value17*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~value17 ();
  };

  class value18: public ::xml_schema::simple_type,
    public ::xsd::cxx::tree::list< ::xml_schema::float_, char >
  {
    public:
    value18 ();

    value18 (size_type n, const ::xml_schema::float_& x);

    template < typename I >
    value18 (const I& begin, const I& end)
    : ::xsd::cxx::tree::list< ::xml_schema::float_, char > (begin, end, this)
    {
    }

    value18 (const ::xercesc::DOMElement& e,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

    value18 (const ::xercesc::DOMAttr& a,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

    value18 (const ::std::string& s,
             const ::xercesc::DOMElement* e,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

    value18 (const value18& x,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

    virtual value18*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~value18 ();
  };

  class value19: public ::xml_schema::simple_type,
    public ::xsd::cxx::tree::list< ::xml_schema::double_, char, ::xsd::cxx::tree::schema_type::double_ >
  {
    public:
    value19 ();

    value19 (size_type n, const ::xml_schema::double_& x);

    template < typename I >
    value19 (const I& begin, const I& end)
    : ::xsd::cxx::tree::list< ::xml_schema::double_, char, ::xsd::cxx::tree::schema_type::double_ > (begin, end, this)
    {
    }

    value19 (const ::xercesc::DOMElement& e,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

    value19 (const ::xercesc::DOMAttr& a,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

    value19 (const ::std::string& s,
             const ::xercesc::DOMElement* e,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

    value19 (const value19& x,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

    virtual value19*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~value19 ();
  };

  class Control: public ::xml_schema::type
  {
    public:
    // host
    //
    typedef ::xml_schema::normalized_string host_type;
    typedef ::xsd::cxx::tree::optional< host_type > host_optional;
    typedef ::xsd::cxx::tree::traits< host_type, char > host_traits;

    const host_optional&
    host () const;

    host_optional&
    host ();

    void
    host (const host_type& x);

    void
    host (const host_optional& x);

    void
    host (::std::auto_ptr< host_type > p);

    // port
    //
    typedef ::xml_schema::unsigned_short port_type;
    typedef ::xsd::cxx::tree::traits< port_type, char > port_traits;

    const port_type&
    port () const;

    port_type&
    port ();

    void
    port (const port_type& x);

    // Constructors.
    //
    Control (const port_type&);

    Control (const ::xercesc::DOMElement& e,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

    Control (const Control& x,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

    virtual Control*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    Control&
    operator= (const Control& x);

    virtual 
    ~Control ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    host_optional host_;
    ::xsd::cxx::tree::one< port_type > port_;
  };

  class DAT_input_output: public ::xml_schema::type
  {
    public:
    // AvailablePortRange
    //
    typedef ::DcpTestSuite::AvailablePortRange AvailablePortRange_type;
    typedef ::xsd::cxx::tree::optional< AvailablePortRange_type > AvailablePortRange_optional;
    typedef ::xsd::cxx::tree::traits< AvailablePortRange_type, char > AvailablePortRange_traits;

    const AvailablePortRange_optional&
    AvailablePortRange () const;

    AvailablePortRange_optional&
    AvailablePortRange ();

    void
    AvailablePortRange (const AvailablePortRange_type& x);

    void
    AvailablePortRange (const AvailablePortRange_optional& x);

    void
    AvailablePortRange (::std::auto_ptr< AvailablePortRange_type > p);

    // AvailablePort
    //
    typedef ::DcpTestSuite::AvailablePort AvailablePort_type;
    typedef ::xsd::cxx::tree::optional< AvailablePort_type > AvailablePort_optional;
    typedef ::xsd::cxx::tree::traits< AvailablePort_type, char > AvailablePort_traits;

    const AvailablePort_optional&
    AvailablePort () const;

    AvailablePort_optional&
    AvailablePort ();

    void
    AvailablePort (const AvailablePort_type& x);

    void
    AvailablePort (const AvailablePort_optional& x);

    void
    AvailablePort (::std::auto_ptr< AvailablePort_type > p);

    // host
    //
    typedef ::xml_schema::normalized_string host_type;
    typedef ::xsd::cxx::tree::optional< host_type > host_optional;
    typedef ::xsd::cxx::tree::traits< host_type, char > host_traits;

    const host_optional&
    host () const;

    host_optional&
    host ();

    void
    host (const host_type& x);

    void
    host (const host_optional& x);

    void
    host (::std::auto_ptr< host_type > p);

    // Constructors.
    //
    DAT_input_output ();

    DAT_input_output (const ::xercesc::DOMElement& e,
                      ::xml_schema::flags f = 0,
                      ::xml_schema::container* c = 0);

    DAT_input_output (const DAT_input_output& x,
                      ::xml_schema::flags f = 0,
                      ::xml_schema::container* c = 0);

    virtual DAT_input_output*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    DAT_input_output&
    operator= (const DAT_input_output& x);

    virtual 
    ~DAT_input_output ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    AvailablePortRange_optional AvailablePortRange_;
    AvailablePort_optional AvailablePort_;
    host_optional host_;
  };

  class DAT_parameter: public ::xml_schema::type
  {
    public:
    // AvailablePortRange
    //
    typedef ::DcpTestSuite::AvailablePortRange AvailablePortRange_type;
    typedef ::xsd::cxx::tree::optional< AvailablePortRange_type > AvailablePortRange_optional;
    typedef ::xsd::cxx::tree::traits< AvailablePortRange_type, char > AvailablePortRange_traits;

    const AvailablePortRange_optional&
    AvailablePortRange () const;

    AvailablePortRange_optional&
    AvailablePortRange ();

    void
    AvailablePortRange (const AvailablePortRange_type& x);

    void
    AvailablePortRange (const AvailablePortRange_optional& x);

    void
    AvailablePortRange (::std::auto_ptr< AvailablePortRange_type > p);

    // AvailablePort
    //
    typedef ::DcpTestSuite::AvailablePort AvailablePort_type;
    typedef ::xsd::cxx::tree::optional< AvailablePort_type > AvailablePort_optional;
    typedef ::xsd::cxx::tree::traits< AvailablePort_type, char > AvailablePort_traits;

    const AvailablePort_optional&
    AvailablePort () const;

    AvailablePort_optional&
    AvailablePort ();

    void
    AvailablePort (const AvailablePort_type& x);

    void
    AvailablePort (const AvailablePort_optional& x);

    void
    AvailablePort (::std::auto_ptr< AvailablePort_type > p);

    // host
    //
    typedef ::xml_schema::normalized_string host_type;
    typedef ::xsd::cxx::tree::optional< host_type > host_optional;
    typedef ::xsd::cxx::tree::traits< host_type, char > host_traits;

    const host_optional&
    host () const;

    host_optional&
    host ();

    void
    host (const host_type& x);

    void
    host (const host_optional& x);

    void
    host (::std::auto_ptr< host_type > p);

    // Constructors.
    //
    DAT_parameter ();

    DAT_parameter (const ::xercesc::DOMElement& e,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

    DAT_parameter (const DAT_parameter& x,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

    virtual DAT_parameter*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    DAT_parameter&
    operator= (const DAT_parameter& x);

    virtual 
    ~DAT_parameter ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    AvailablePortRange_optional AvailablePortRange_;
    AvailablePort_optional AvailablePort_;
    host_optional host_;
  };

  class DataPipe: public ::xml_schema::type
  {
    public:
    // direction
    //
    typedef ::DcpTestSuite::direction direction_type;
    typedef ::xsd::cxx::tree::optional< direction_type > direction_optional;
    typedef ::xsd::cxx::tree::traits< direction_type, char > direction_traits;

    const direction_optional&
    direction () const;

    direction_optional&
    direction ();

    void
    direction (const direction_type& x);

    void
    direction (const direction_optional& x);

    void
    direction (::std::auto_ptr< direction_type > p);

    // endpointAddress
    //
    typedef ::xml_schema::unsigned_byte endpointAddress_type;
    typedef ::xsd::cxx::tree::traits< endpointAddress_type, char > endpointAddress_traits;

    const endpointAddress_type&
    endpointAddress () const;

    endpointAddress_type&
    endpointAddress ();

    void
    endpointAddress (const endpointAddress_type& x);

    // intervall
    //
    typedef ::xml_schema::unsigned_byte intervall_type;
    typedef ::xsd::cxx::tree::traits< intervall_type, char > intervall_traits;

    const intervall_type&
    intervall () const;

    intervall_type&
    intervall ();

    void
    intervall (const intervall_type& x);

    // Constructors.
    //
    DataPipe (const endpointAddress_type&,
              const intervall_type&);

    DataPipe (const ::xercesc::DOMElement& e,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

    DataPipe (const DataPipe& x,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

    virtual DataPipe*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    DataPipe&
    operator= (const DataPipe& x);

    virtual 
    ~DataPipe ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    direction_optional direction_;
    ::xsd::cxx::tree::one< endpointAddress_type > endpointAddress_;
    ::xsd::cxx::tree::one< intervall_type > intervall_;
  };

  class Address: public ::xml_schema::type
  {
    public:
    // bd_addr
    //
    typedef ::DcpTestSuite::bd_addr bd_addr_type;
    typedef ::xsd::cxx::tree::traits< bd_addr_type, char > bd_addr_traits;

    const bd_addr_type&
    bd_addr () const;

    bd_addr_type&
    bd_addr ();

    void
    bd_addr (const bd_addr_type& x);

    void
    bd_addr (::std::auto_ptr< bd_addr_type > p);

    // port
    //
    typedef ::DcpTestSuite::port port_type;
    typedef ::xsd::cxx::tree::traits< port_type, char > port_traits;

    const port_type&
    port () const;

    port_type&
    port ();

    void
    port (const port_type& x);

    void
    port (::std::auto_ptr< port_type > p);

    // alias
    //
    typedef ::xml_schema::normalized_string alias_type;
    typedef ::xsd::cxx::tree::optional< alias_type > alias_optional;
    typedef ::xsd::cxx::tree::traits< alias_type, char > alias_traits;

    const alias_optional&
    alias () const;

    alias_optional&
    alias ();

    void
    alias (const alias_type& x);

    void
    alias (const alias_optional& x);

    void
    alias (::std::auto_ptr< alias_type > p);

    // Constructors.
    //
    Address (const bd_addr_type&,
             const port_type&);

    Address (const ::xercesc::DOMElement& e,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

    Address (const Address& x,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

    virtual Address*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    Address&
    operator= (const Address& x);

    virtual 
    ~Address ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ::xsd::cxx::tree::one< bd_addr_type > bd_addr_;
    ::xsd::cxx::tree::one< port_type > port_;
    alias_optional alias_;
  };

  class DAT_input_output1: public ::xml_schema::type
  {
    public:
    // AvailablePortRange
    //
    typedef ::DcpTestSuite::AvailablePortRange AvailablePortRange_type;
    typedef ::xsd::cxx::tree::optional< AvailablePortRange_type > AvailablePortRange_optional;
    typedef ::xsd::cxx::tree::traits< AvailablePortRange_type, char > AvailablePortRange_traits;

    const AvailablePortRange_optional&
    AvailablePortRange () const;

    AvailablePortRange_optional&
    AvailablePortRange ();

    void
    AvailablePortRange (const AvailablePortRange_type& x);

    void
    AvailablePortRange (const AvailablePortRange_optional& x);

    void
    AvailablePortRange (::std::auto_ptr< AvailablePortRange_type > p);

    // AvailablePort
    //
    typedef ::DcpTestSuite::AvailablePort AvailablePort_type;
    typedef ::xsd::cxx::tree::optional< AvailablePort_type > AvailablePort_optional;
    typedef ::xsd::cxx::tree::traits< AvailablePort_type, char > AvailablePort_traits;

    const AvailablePort_optional&
    AvailablePort () const;

    AvailablePort_optional&
    AvailablePort ();

    void
    AvailablePort (const AvailablePort_type& x);

    void
    AvailablePort (const AvailablePort_optional& x);

    void
    AvailablePort (::std::auto_ptr< AvailablePort_type > p);

    // host
    //
    typedef ::xml_schema::normalized_string host_type;
    typedef ::xsd::cxx::tree::optional< host_type > host_optional;
    typedef ::xsd::cxx::tree::traits< host_type, char > host_traits;

    const host_optional&
    host () const;

    host_optional&
    host ();

    void
    host (const host_type& x);

    void
    host (const host_optional& x);

    void
    host (::std::auto_ptr< host_type > p);

    // Constructors.
    //
    DAT_input_output1 ();

    DAT_input_output1 (const ::xercesc::DOMElement& e,
                       ::xml_schema::flags f = 0,
                       ::xml_schema::container* c = 0);

    DAT_input_output1 (const DAT_input_output1& x,
                       ::xml_schema::flags f = 0,
                       ::xml_schema::container* c = 0);

    virtual DAT_input_output1*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    DAT_input_output1&
    operator= (const DAT_input_output1& x);

    virtual 
    ~DAT_input_output1 ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    AvailablePortRange_optional AvailablePortRange_;
    AvailablePort_optional AvailablePort_;
    host_optional host_;
  };

  class DAT_parameter1: public ::xml_schema::type
  {
    public:
    // AvailablePortRange
    //
    typedef ::DcpTestSuite::AvailablePortRange AvailablePortRange_type;
    typedef ::xsd::cxx::tree::optional< AvailablePortRange_type > AvailablePortRange_optional;
    typedef ::xsd::cxx::tree::traits< AvailablePortRange_type, char > AvailablePortRange_traits;

    const AvailablePortRange_optional&
    AvailablePortRange () const;

    AvailablePortRange_optional&
    AvailablePortRange ();

    void
    AvailablePortRange (const AvailablePortRange_type& x);

    void
    AvailablePortRange (const AvailablePortRange_optional& x);

    void
    AvailablePortRange (::std::auto_ptr< AvailablePortRange_type > p);

    // AvailablePort
    //
    typedef ::DcpTestSuite::AvailablePort AvailablePort_type;
    typedef ::xsd::cxx::tree::optional< AvailablePort_type > AvailablePort_optional;
    typedef ::xsd::cxx::tree::traits< AvailablePort_type, char > AvailablePort_traits;

    const AvailablePort_optional&
    AvailablePort () const;

    AvailablePort_optional&
    AvailablePort ();

    void
    AvailablePort (const AvailablePort_type& x);

    void
    AvailablePort (const AvailablePort_optional& x);

    void
    AvailablePort (::std::auto_ptr< AvailablePort_type > p);

    // host
    //
    typedef ::xml_schema::normalized_string host_type;
    typedef ::xsd::cxx::tree::optional< host_type > host_optional;
    typedef ::xsd::cxx::tree::traits< host_type, char > host_traits;

    const host_optional&
    host () const;

    host_optional&
    host ();

    void
    host (const host_type& x);

    void
    host (const host_optional& x);

    void
    host (::std::auto_ptr< host_type > p);

    // Constructors.
    //
    DAT_parameter1 ();

    DAT_parameter1 (const ::xercesc::DOMElement& e,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

    DAT_parameter1 (const DAT_parameter1& x,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

    virtual DAT_parameter1*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    DAT_parameter1&
    operator= (const DAT_parameter1& x);

    virtual 
    ~DAT_parameter1 ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    AvailablePortRange_optional AvailablePortRange_;
    AvailablePort_optional AvailablePort_;
    host_optional host_;
  };

  class ClockTime: public ::xml_schema::type
  {
    public:
    // numerator
    //
    typedef ::xml_schema::unsigned_int numerator_type;
    typedef ::xsd::cxx::tree::traits< numerator_type, char > numerator_traits;

    const numerator_type&
    numerator () const;

    numerator_type&
    numerator ();

    void
    numerator (const numerator_type& x);

    // denominator
    //
    typedef ::xml_schema::unsigned_int denominator_type;
    typedef ::xsd::cxx::tree::traits< denominator_type, char > denominator_traits;

    const denominator_type&
    denominator () const;

    denominator_type&
    denominator ();

    void
    denominator (const denominator_type& x);

    // Constructors.
    //
    ClockTime (const numerator_type&,
               const denominator_type&);

    ClockTime (const ::xercesc::DOMElement& e,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

    ClockTime (const ClockTime& x,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

    virtual ClockTime*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    ClockTime&
    operator= (const ClockTime& x);

    virtual 
    ~ClockTime ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ::xsd::cxx::tree::one< numerator_type > numerator_;
    ::xsd::cxx::tree::one< denominator_type > denominator_;
  };

  class CFG_time_res: public ::xml_schema::type
  {
    public:
    // receiver
    //
    typedef ::xml_schema::unsigned_byte receiver_type;
    typedef ::xsd::cxx::tree::traits< receiver_type, char > receiver_traits;

    const receiver_type&
    receiver () const;

    receiver_type&
    receiver ();

    void
    receiver (const receiver_type& x);

    // numerator
    //
    typedef ::xml_schema::unsigned_int numerator_type;
    typedef ::xsd::cxx::tree::traits< numerator_type, char > numerator_traits;

    const numerator_type&
    numerator () const;

    numerator_type&
    numerator ();

    void
    numerator (const numerator_type& x);

    // denominator
    //
    typedef ::xml_schema::unsigned_int denominator_type;
    typedef ::xsd::cxx::tree::traits< denominator_type, char > denominator_traits;

    const denominator_type&
    denominator () const;

    denominator_type&
    denominator ();

    void
    denominator (const denominator_type& x);

    // Constructors.
    //
    CFG_time_res (const receiver_type&,
                  const numerator_type&,
                  const denominator_type&);

    CFG_time_res (const ::xercesc::DOMElement& e,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

    CFG_time_res (const CFG_time_res& x,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

    virtual CFG_time_res*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    CFG_time_res&
    operator= (const CFG_time_res& x);

    virtual 
    ~CFG_time_res ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ::xsd::cxx::tree::one< receiver_type > receiver_;
    ::xsd::cxx::tree::one< numerator_type > numerator_;
    ::xsd::cxx::tree::one< denominator_type > denominator_;
  };

  class CFG_steps: public ::xml_schema::type
  {
    public:
    // receiver
    //
    typedef ::xml_schema::unsigned_byte receiver_type;
    typedef ::xsd::cxx::tree::traits< receiver_type, char > receiver_traits;

    const receiver_type&
    receiver () const;

    receiver_type&
    receiver ();

    void
    receiver (const receiver_type& x);

    // data_id
    //
    typedef ::xml_schema::unsigned_short data_id_type;
    typedef ::xsd::cxx::tree::traits< data_id_type, char > data_id_traits;

    const data_id_type&
    data_id () const;

    data_id_type&
    data_id ();

    void
    data_id (const data_id_type& x);

    // steps
    //
    typedef ::xml_schema::unsigned_int steps_type;
    typedef ::xsd::cxx::tree::traits< steps_type, char > steps_traits;

    const steps_type&
    steps () const;

    steps_type&
    steps ();

    void
    steps (const steps_type& x);

    // Constructors.
    //
    CFG_steps (const receiver_type&,
               const data_id_type&,
               const steps_type&);

    CFG_steps (const ::xercesc::DOMElement& e,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

    CFG_steps (const CFG_steps& x,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

    virtual CFG_steps*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    CFG_steps&
    operator= (const CFG_steps& x);

    virtual 
    ~CFG_steps ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ::xsd::cxx::tree::one< receiver_type > receiver_;
    ::xsd::cxx::tree::one< data_id_type > data_id_;
    ::xsd::cxx::tree::one< steps_type > steps_;
  };

  class CFG_input: public ::xml_schema::type
  {
    public:
    // receiver
    //
    typedef ::xml_schema::unsigned_byte receiver_type;
    typedef ::xsd::cxx::tree::traits< receiver_type, char > receiver_traits;

    const receiver_type&
    receiver () const;

    receiver_type&
    receiver ();

    void
    receiver (const receiver_type& x);

    // data_id
    //
    typedef ::xml_schema::unsigned_short data_id_type;
    typedef ::xsd::cxx::tree::traits< data_id_type, char > data_id_traits;

    const data_id_type&
    data_id () const;

    data_id_type&
    data_id ();

    void
    data_id (const data_id_type& x);

    // pos
    //
    typedef ::xml_schema::unsigned_short pos_type;
    typedef ::xsd::cxx::tree::traits< pos_type, char > pos_traits;

    const pos_type&
    pos () const;

    pos_type&
    pos ();

    void
    pos (const pos_type& x);

    // target_vr
    //
    typedef ::xml_schema::unsigned_long target_vr_type;
    typedef ::xsd::cxx::tree::traits< target_vr_type, char > target_vr_traits;

    const target_vr_type&
    target_vr () const;

    target_vr_type&
    target_vr ();

    void
    target_vr (const target_vr_type& x);

    // source_data_type
    //
    typedef ::xml_schema::unsigned_byte source_data_type_type;
    typedef ::xsd::cxx::tree::traits< source_data_type_type, char > source_data_type_traits;

    const source_data_type_type&
    source_data_type () const;

    source_data_type_type&
    source_data_type ();

    void
    source_data_type (const source_data_type_type& x);

    // Constructors.
    //
    CFG_input (const receiver_type&,
               const data_id_type&,
               const pos_type&,
               const target_vr_type&,
               const source_data_type_type&);

    CFG_input (const ::xercesc::DOMElement& e,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

    CFG_input (const CFG_input& x,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

    virtual CFG_input*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    CFG_input&
    operator= (const CFG_input& x);

    virtual 
    ~CFG_input ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ::xsd::cxx::tree::one< receiver_type > receiver_;
    ::xsd::cxx::tree::one< data_id_type > data_id_;
    ::xsd::cxx::tree::one< pos_type > pos_;
    ::xsd::cxx::tree::one< target_vr_type > target_vr_;
    ::xsd::cxx::tree::one< source_data_type_type > source_data_type_;
  };

  class CFG_output: public ::xml_schema::type
  {
    public:
    // receiver
    //
    typedef ::xml_schema::unsigned_byte receiver_type;
    typedef ::xsd::cxx::tree::traits< receiver_type, char > receiver_traits;

    const receiver_type&
    receiver () const;

    receiver_type&
    receiver ();

    void
    receiver (const receiver_type& x);

    // data_id
    //
    typedef ::xml_schema::unsigned_short data_id_type;
    typedef ::xsd::cxx::tree::traits< data_id_type, char > data_id_traits;

    const data_id_type&
    data_id () const;

    data_id_type&
    data_id ();

    void
    data_id (const data_id_type& x);

    // pos
    //
    typedef ::xml_schema::unsigned_short pos_type;
    typedef ::xsd::cxx::tree::traits< pos_type, char > pos_traits;

    const pos_type&
    pos () const;

    pos_type&
    pos ();

    void
    pos (const pos_type& x);

    // source_vr
    //
    typedef ::xml_schema::unsigned_long source_vr_type;
    typedef ::xsd::cxx::tree::traits< source_vr_type, char > source_vr_traits;

    const source_vr_type&
    source_vr () const;

    source_vr_type&
    source_vr ();

    void
    source_vr (const source_vr_type& x);

    // Constructors.
    //
    CFG_output (const receiver_type&,
                const data_id_type&,
                const pos_type&,
                const source_vr_type&);

    CFG_output (const ::xercesc::DOMElement& e,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

    CFG_output (const CFG_output& x,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

    virtual CFG_output*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    CFG_output&
    operator= (const CFG_output& x);

    virtual 
    ~CFG_output ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ::xsd::cxx::tree::one< receiver_type > receiver_;
    ::xsd::cxx::tree::one< data_id_type > data_id_;
    ::xsd::cxx::tree::one< pos_type > pos_;
    ::xsd::cxx::tree::one< source_vr_type > source_vr_;
  };

  class CFG_source_network_information: public ::xml_schema::type
  {
    public:
    // receiver
    //
    typedef ::xml_schema::unsigned_byte receiver_type;
    typedef ::xsd::cxx::tree::traits< receiver_type, char > receiver_traits;

    const receiver_type&
    receiver () const;

    receiver_type&
    receiver ();

    void
    receiver (const receiver_type& x);

    // data_id
    //
    typedef ::xml_schema::unsigned_short data_id_type;
    typedef ::xsd::cxx::tree::traits< data_id_type, char > data_id_traits;

    const data_id_type&
    data_id () const;

    data_id_type&
    data_id ();

    void
    data_id (const data_id_type& x);

    // transport_protocol
    //
    typedef ::xml_schema::unsigned_byte transport_protocol_type;
    typedef ::xsd::cxx::tree::traits< transport_protocol_type, char > transport_protocol_traits;

    const transport_protocol_type&
    transport_protocol () const;

    transport_protocol_type&
    transport_protocol ();

    void
    transport_protocol (const transport_protocol_type& x);

    // Constructors.
    //
    CFG_source_network_information (const receiver_type&,
                                    const data_id_type&,
                                    const transport_protocol_type&);

    CFG_source_network_information (const ::xercesc::DOMElement& e,
                                    ::xml_schema::flags f = 0,
                                    ::xml_schema::container* c = 0);

    CFG_source_network_information (const CFG_source_network_information& x,
                                    ::xml_schema::flags f = 0,
                                    ::xml_schema::container* c = 0);

    virtual CFG_source_network_information*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    CFG_source_network_information&
    operator= (const CFG_source_network_information& x);

    virtual 
    ~CFG_source_network_information ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ::xsd::cxx::tree::one< receiver_type > receiver_;
    ::xsd::cxx::tree::one< data_id_type > data_id_;
    ::xsd::cxx::tree::one< transport_protocol_type > transport_protocol_;
  };

  class CFG_source_network_information_UDP_IPv4: public ::xml_schema::type
  {
    public:
    // receiver
    //
    typedef ::xml_schema::unsigned_byte receiver_type;
    typedef ::xsd::cxx::tree::traits< receiver_type, char > receiver_traits;

    const receiver_type&
    receiver () const;

    receiver_type&
    receiver ();

    void
    receiver (const receiver_type& x);

    // data_id
    //
    typedef ::xml_schema::unsigned_short data_id_type;
    typedef ::xsd::cxx::tree::traits< data_id_type, char > data_id_traits;

    const data_id_type&
    data_id () const;

    data_id_type&
    data_id ();

    void
    data_id (const data_id_type& x);

    // transport_protocol
    //
    typedef ::xml_schema::unsigned_byte transport_protocol_type;
    typedef ::xsd::cxx::tree::traits< transport_protocol_type, char > transport_protocol_traits;

    const transport_protocol_type&
    transport_protocol () const;

    transport_protocol_type&
    transport_protocol ();

    void
    transport_protocol (const transport_protocol_type& x);

    // ip_address
    //
    typedef ::xml_schema::unsigned_int ip_address_type;
    typedef ::xsd::cxx::tree::traits< ip_address_type, char > ip_address_traits;

    const ip_address_type&
    ip_address () const;

    ip_address_type&
    ip_address ();

    void
    ip_address (const ip_address_type& x);

    // port
    //
    typedef ::xml_schema::unsigned_short port_type;
    typedef ::xsd::cxx::tree::traits< port_type, char > port_traits;

    const port_type&
    port () const;

    port_type&
    port ();

    void
    port (const port_type& x);

    // Constructors.
    //
    CFG_source_network_information_UDP_IPv4 (const receiver_type&,
                                             const data_id_type&,
                                             const transport_protocol_type&,
                                             const ip_address_type&,
                                             const port_type&);

    CFG_source_network_information_UDP_IPv4 (const ::xercesc::DOMElement& e,
                                             ::xml_schema::flags f = 0,
                                             ::xml_schema::container* c = 0);

    CFG_source_network_information_UDP_IPv4 (const CFG_source_network_information_UDP_IPv4& x,
                                             ::xml_schema::flags f = 0,
                                             ::xml_schema::container* c = 0);

    virtual CFG_source_network_information_UDP_IPv4*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    CFG_source_network_information_UDP_IPv4&
    operator= (const CFG_source_network_information_UDP_IPv4& x);

    virtual 
    ~CFG_source_network_information_UDP_IPv4 ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ::xsd::cxx::tree::one< receiver_type > receiver_;
    ::xsd::cxx::tree::one< data_id_type > data_id_;
    ::xsd::cxx::tree::one< transport_protocol_type > transport_protocol_;
    ::xsd::cxx::tree::one< ip_address_type > ip_address_;
    ::xsd::cxx::tree::one< port_type > port_;
  };

  class CFG_source_network_information_USB: public ::xml_schema::type
  {
    public:
    // receiver
    //
    typedef ::xml_schema::unsigned_byte receiver_type;
    typedef ::xsd::cxx::tree::traits< receiver_type, char > receiver_traits;

    const receiver_type&
    receiver () const;

    receiver_type&
    receiver ();

    void
    receiver (const receiver_type& x);

    // data_id
    //
    typedef ::xml_schema::unsigned_short data_id_type;
    typedef ::xsd::cxx::tree::traits< data_id_type, char > data_id_traits;

    const data_id_type&
    data_id () const;

    data_id_type&
    data_id ();

    void
    data_id (const data_id_type& x);

    // transport_protocol
    //
    typedef ::xml_schema::unsigned_byte transport_protocol_type;
    typedef ::xsd::cxx::tree::traits< transport_protocol_type, char > transport_protocol_traits;

    const transport_protocol_type&
    transport_protocol () const;

    transport_protocol_type&
    transport_protocol ();

    void
    transport_protocol (const transport_protocol_type& x);

    // endpoint_address
    //
    typedef ::xml_schema::unsigned_byte endpoint_address_type;
    typedef ::xsd::cxx::tree::traits< endpoint_address_type, char > endpoint_address_traits;

    const endpoint_address_type&
    endpoint_address () const;

    endpoint_address_type&
    endpoint_address ();

    void
    endpoint_address (const endpoint_address_type& x);

    // Constructors.
    //
    CFG_source_network_information_USB (const receiver_type&,
                                        const data_id_type&,
                                        const transport_protocol_type&,
                                        const endpoint_address_type&);

    CFG_source_network_information_USB (const ::xercesc::DOMElement& e,
                                        ::xml_schema::flags f = 0,
                                        ::xml_schema::container* c = 0);

    CFG_source_network_information_USB (const CFG_source_network_information_USB& x,
                                        ::xml_schema::flags f = 0,
                                        ::xml_schema::container* c = 0);

    virtual CFG_source_network_information_USB*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    CFG_source_network_information_USB&
    operator= (const CFG_source_network_information_USB& x);

    virtual 
    ~CFG_source_network_information_USB ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ::xsd::cxx::tree::one< receiver_type > receiver_;
    ::xsd::cxx::tree::one< data_id_type > data_id_;
    ::xsd::cxx::tree::one< transport_protocol_type > transport_protocol_;
    ::xsd::cxx::tree::one< endpoint_address_type > endpoint_address_;
  };

  class CFG_source_network_information_Bluetooth: public ::xml_schema::type
  {
    public:
    // receiver
    //
    typedef ::xml_schema::unsigned_byte receiver_type;
    typedef ::xsd::cxx::tree::traits< receiver_type, char > receiver_traits;

    const receiver_type&
    receiver () const;

    receiver_type&
    receiver ();

    void
    receiver (const receiver_type& x);

    // data_id
    //
    typedef ::xml_schema::unsigned_short data_id_type;
    typedef ::xsd::cxx::tree::traits< data_id_type, char > data_id_traits;

    const data_id_type&
    data_id () const;

    data_id_type&
    data_id ();

    void
    data_id (const data_id_type& x);

    // transport_protocol
    //
    typedef ::xml_schema::unsigned_byte transport_protocol_type;
    typedef ::xsd::cxx::tree::traits< transport_protocol_type, char > transport_protocol_traits;

    const transport_protocol_type&
    transport_protocol () const;

    transport_protocol_type&
    transport_protocol ();

    void
    transport_protocol (const transport_protocol_type& x);

    // port
    //
    typedef ::xml_schema::unsigned_byte port_type;
    typedef ::xsd::cxx::tree::traits< port_type, char > port_traits;

    const port_type&
    port () const;

    port_type&
    port ();

    void
    port (const port_type& x);

    // bd_addr
    //
    typedef ::xml_schema::unsigned_long bd_addr_type;
    typedef ::xsd::cxx::tree::traits< bd_addr_type, char > bd_addr_traits;

    const bd_addr_type&
    bd_addr () const;

    bd_addr_type&
    bd_addr ();

    void
    bd_addr (const bd_addr_type& x);

    // Constructors.
    //
    CFG_source_network_information_Bluetooth (const receiver_type&,
                                              const data_id_type&,
                                              const transport_protocol_type&,
                                              const port_type&,
                                              const bd_addr_type&);

    CFG_source_network_information_Bluetooth (const ::xercesc::DOMElement& e,
                                              ::xml_schema::flags f = 0,
                                              ::xml_schema::container* c = 0);

    CFG_source_network_information_Bluetooth (const CFG_source_network_information_Bluetooth& x,
                                              ::xml_schema::flags f = 0,
                                              ::xml_schema::container* c = 0);

    virtual CFG_source_network_information_Bluetooth*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    CFG_source_network_information_Bluetooth&
    operator= (const CFG_source_network_information_Bluetooth& x);

    virtual 
    ~CFG_source_network_information_Bluetooth ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ::xsd::cxx::tree::one< receiver_type > receiver_;
    ::xsd::cxx::tree::one< data_id_type > data_id_;
    ::xsd::cxx::tree::one< transport_protocol_type > transport_protocol_;
    ::xsd::cxx::tree::one< port_type > port_;
    ::xsd::cxx::tree::one< bd_addr_type > bd_addr_;
  };

  class CFG_source_network_information_TCP_IPv4: public ::xml_schema::type
  {
    public:
    // receiver
    //
    typedef ::xml_schema::unsigned_byte receiver_type;
    typedef ::xsd::cxx::tree::traits< receiver_type, char > receiver_traits;

    const receiver_type&
    receiver () const;

    receiver_type&
    receiver ();

    void
    receiver (const receiver_type& x);

    // data_id
    //
    typedef ::xml_schema::unsigned_short data_id_type;
    typedef ::xsd::cxx::tree::traits< data_id_type, char > data_id_traits;

    const data_id_type&
    data_id () const;

    data_id_type&
    data_id ();

    void
    data_id (const data_id_type& x);

    // transport_protocol
    //
    typedef ::xml_schema::unsigned_byte transport_protocol_type;
    typedef ::xsd::cxx::tree::traits< transport_protocol_type, char > transport_protocol_traits;

    const transport_protocol_type&
    transport_protocol () const;

    transport_protocol_type&
    transport_protocol ();

    void
    transport_protocol (const transport_protocol_type& x);

    // ip_address
    //
    typedef ::xml_schema::unsigned_int ip_address_type;
    typedef ::xsd::cxx::tree::traits< ip_address_type, char > ip_address_traits;

    const ip_address_type&
    ip_address () const;

    ip_address_type&
    ip_address ();

    void
    ip_address (const ip_address_type& x);

    // port
    //
    typedef ::xml_schema::unsigned_short port_type;
    typedef ::xsd::cxx::tree::traits< port_type, char > port_traits;

    const port_type&
    port () const;

    port_type&
    port ();

    void
    port (const port_type& x);

    // Constructors.
    //
    CFG_source_network_information_TCP_IPv4 (const receiver_type&,
                                             const data_id_type&,
                                             const transport_protocol_type&,
                                             const ip_address_type&,
                                             const port_type&);

    CFG_source_network_information_TCP_IPv4 (const ::xercesc::DOMElement& e,
                                             ::xml_schema::flags f = 0,
                                             ::xml_schema::container* c = 0);

    CFG_source_network_information_TCP_IPv4 (const CFG_source_network_information_TCP_IPv4& x,
                                             ::xml_schema::flags f = 0,
                                             ::xml_schema::container* c = 0);

    virtual CFG_source_network_information_TCP_IPv4*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    CFG_source_network_information_TCP_IPv4&
    operator= (const CFG_source_network_information_TCP_IPv4& x);

    virtual 
    ~CFG_source_network_information_TCP_IPv4 ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ::xsd::cxx::tree::one< receiver_type > receiver_;
    ::xsd::cxx::tree::one< data_id_type > data_id_;
    ::xsd::cxx::tree::one< transport_protocol_type > transport_protocol_;
    ::xsd::cxx::tree::one< ip_address_type > ip_address_;
    ::xsd::cxx::tree::one< port_type > port_;
  };

  class CFG_target_network_information: public ::xml_schema::type
  {
    public:
    // receiver
    //
    typedef ::xml_schema::unsigned_byte receiver_type;
    typedef ::xsd::cxx::tree::traits< receiver_type, char > receiver_traits;

    const receiver_type&
    receiver () const;

    receiver_type&
    receiver ();

    void
    receiver (const receiver_type& x);

    // data_id
    //
    typedef ::xml_schema::unsigned_short data_id_type;
    typedef ::xsd::cxx::tree::traits< data_id_type, char > data_id_traits;

    const data_id_type&
    data_id () const;

    data_id_type&
    data_id ();

    void
    data_id (const data_id_type& x);

    // transport_protocol
    //
    typedef ::xml_schema::unsigned_byte transport_protocol_type;
    typedef ::xsd::cxx::tree::traits< transport_protocol_type, char > transport_protocol_traits;

    const transport_protocol_type&
    transport_protocol () const;

    transport_protocol_type&
    transport_protocol ();

    void
    transport_protocol (const transport_protocol_type& x);

    // Constructors.
    //
    CFG_target_network_information (const receiver_type&,
                                    const data_id_type&,
                                    const transport_protocol_type&);

    CFG_target_network_information (const ::xercesc::DOMElement& e,
                                    ::xml_schema::flags f = 0,
                                    ::xml_schema::container* c = 0);

    CFG_target_network_information (const CFG_target_network_information& x,
                                    ::xml_schema::flags f = 0,
                                    ::xml_schema::container* c = 0);

    virtual CFG_target_network_information*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    CFG_target_network_information&
    operator= (const CFG_target_network_information& x);

    virtual 
    ~CFG_target_network_information ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ::xsd::cxx::tree::one< receiver_type > receiver_;
    ::xsd::cxx::tree::one< data_id_type > data_id_;
    ::xsd::cxx::tree::one< transport_protocol_type > transport_protocol_;
  };

  class CFG_target_network_information_UDP_IPv4: public ::xml_schema::type
  {
    public:
    // receiver
    //
    typedef ::xml_schema::unsigned_byte receiver_type;
    typedef ::xsd::cxx::tree::traits< receiver_type, char > receiver_traits;

    const receiver_type&
    receiver () const;

    receiver_type&
    receiver ();

    void
    receiver (const receiver_type& x);

    // data_id
    //
    typedef ::xml_schema::unsigned_short data_id_type;
    typedef ::xsd::cxx::tree::traits< data_id_type, char > data_id_traits;

    const data_id_type&
    data_id () const;

    data_id_type&
    data_id ();

    void
    data_id (const data_id_type& x);

    // transport_protocol
    //
    typedef ::xml_schema::unsigned_byte transport_protocol_type;
    typedef ::xsd::cxx::tree::traits< transport_protocol_type, char > transport_protocol_traits;

    const transport_protocol_type&
    transport_protocol () const;

    transport_protocol_type&
    transport_protocol ();

    void
    transport_protocol (const transport_protocol_type& x);

    // ip_address
    //
    typedef ::xml_schema::unsigned_int ip_address_type;
    typedef ::xsd::cxx::tree::traits< ip_address_type, char > ip_address_traits;

    const ip_address_type&
    ip_address () const;

    ip_address_type&
    ip_address ();

    void
    ip_address (const ip_address_type& x);

    // port
    //
    typedef ::xml_schema::unsigned_short port_type;
    typedef ::xsd::cxx::tree::traits< port_type, char > port_traits;

    const port_type&
    port () const;

    port_type&
    port ();

    void
    port (const port_type& x);

    // Constructors.
    //
    CFG_target_network_information_UDP_IPv4 (const receiver_type&,
                                             const data_id_type&,
                                             const transport_protocol_type&,
                                             const ip_address_type&,
                                             const port_type&);

    CFG_target_network_information_UDP_IPv4 (const ::xercesc::DOMElement& e,
                                             ::xml_schema::flags f = 0,
                                             ::xml_schema::container* c = 0);

    CFG_target_network_information_UDP_IPv4 (const CFG_target_network_information_UDP_IPv4& x,
                                             ::xml_schema::flags f = 0,
                                             ::xml_schema::container* c = 0);

    virtual CFG_target_network_information_UDP_IPv4*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    CFG_target_network_information_UDP_IPv4&
    operator= (const CFG_target_network_information_UDP_IPv4& x);

    virtual 
    ~CFG_target_network_information_UDP_IPv4 ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ::xsd::cxx::tree::one< receiver_type > receiver_;
    ::xsd::cxx::tree::one< data_id_type > data_id_;
    ::xsd::cxx::tree::one< transport_protocol_type > transport_protocol_;
    ::xsd::cxx::tree::one< ip_address_type > ip_address_;
    ::xsd::cxx::tree::one< port_type > port_;
  };

  class CFG_target_network_information_USB: public ::xml_schema::type
  {
    public:
    // receiver
    //
    typedef ::xml_schema::unsigned_byte receiver_type;
    typedef ::xsd::cxx::tree::traits< receiver_type, char > receiver_traits;

    const receiver_type&
    receiver () const;

    receiver_type&
    receiver ();

    void
    receiver (const receiver_type& x);

    // data_id
    //
    typedef ::xml_schema::unsigned_short data_id_type;
    typedef ::xsd::cxx::tree::traits< data_id_type, char > data_id_traits;

    const data_id_type&
    data_id () const;

    data_id_type&
    data_id ();

    void
    data_id (const data_id_type& x);

    // transport_protocol
    //
    typedef ::xml_schema::unsigned_byte transport_protocol_type;
    typedef ::xsd::cxx::tree::traits< transport_protocol_type, char > transport_protocol_traits;

    const transport_protocol_type&
    transport_protocol () const;

    transport_protocol_type&
    transport_protocol ();

    void
    transport_protocol (const transport_protocol_type& x);

    // endpoint_address
    //
    typedef ::xml_schema::unsigned_byte endpoint_address_type;
    typedef ::xsd::cxx::tree::traits< endpoint_address_type, char > endpoint_address_traits;

    const endpoint_address_type&
    endpoint_address () const;

    endpoint_address_type&
    endpoint_address ();

    void
    endpoint_address (const endpoint_address_type& x);

    // slave_uuid
    //
    typedef ::DcpTestSuite::slave_uuid slave_uuid_type;
    typedef ::xsd::cxx::tree::traits< slave_uuid_type, char > slave_uuid_traits;

    const slave_uuid_type&
    slave_uuid () const;

    slave_uuid_type&
    slave_uuid ();

    void
    slave_uuid (const slave_uuid_type& x);

    void
    slave_uuid (::std::auto_ptr< slave_uuid_type > p);

    // Constructors.
    //
    CFG_target_network_information_USB (const receiver_type&,
                                        const data_id_type&,
                                        const transport_protocol_type&,
                                        const endpoint_address_type&,
                                        const slave_uuid_type&);

    CFG_target_network_information_USB (const ::xercesc::DOMElement& e,
                                        ::xml_schema::flags f = 0,
                                        ::xml_schema::container* c = 0);

    CFG_target_network_information_USB (const CFG_target_network_information_USB& x,
                                        ::xml_schema::flags f = 0,
                                        ::xml_schema::container* c = 0);

    virtual CFG_target_network_information_USB*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    CFG_target_network_information_USB&
    operator= (const CFG_target_network_information_USB& x);

    virtual 
    ~CFG_target_network_information_USB ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ::xsd::cxx::tree::one< receiver_type > receiver_;
    ::xsd::cxx::tree::one< data_id_type > data_id_;
    ::xsd::cxx::tree::one< transport_protocol_type > transport_protocol_;
    ::xsd::cxx::tree::one< endpoint_address_type > endpoint_address_;
    ::xsd::cxx::tree::one< slave_uuid_type > slave_uuid_;
  };

  class CFG_target_network_information_Bluetooth: public ::xml_schema::type
  {
    public:
    // receiver
    //
    typedef ::xml_schema::unsigned_byte receiver_type;
    typedef ::xsd::cxx::tree::traits< receiver_type, char > receiver_traits;

    const receiver_type&
    receiver () const;

    receiver_type&
    receiver ();

    void
    receiver (const receiver_type& x);

    // data_id
    //
    typedef ::xml_schema::unsigned_short data_id_type;
    typedef ::xsd::cxx::tree::traits< data_id_type, char > data_id_traits;

    const data_id_type&
    data_id () const;

    data_id_type&
    data_id ();

    void
    data_id (const data_id_type& x);

    // transport_protocol
    //
    typedef ::xml_schema::unsigned_byte transport_protocol_type;
    typedef ::xsd::cxx::tree::traits< transport_protocol_type, char > transport_protocol_traits;

    const transport_protocol_type&
    transport_protocol () const;

    transport_protocol_type&
    transport_protocol ();

    void
    transport_protocol (const transport_protocol_type& x);

    // port
    //
    typedef ::xml_schema::unsigned_byte port_type;
    typedef ::xsd::cxx::tree::traits< port_type, char > port_traits;

    const port_type&
    port () const;

    port_type&
    port ();

    void
    port (const port_type& x);

    // bd_addr
    //
    typedef ::xml_schema::unsigned_long bd_addr_type;
    typedef ::xsd::cxx::tree::traits< bd_addr_type, char > bd_addr_traits;

    const bd_addr_type&
    bd_addr () const;

    bd_addr_type&
    bd_addr ();

    void
    bd_addr (const bd_addr_type& x);

    // Constructors.
    //
    CFG_target_network_information_Bluetooth (const receiver_type&,
                                              const data_id_type&,
                                              const transport_protocol_type&,
                                              const port_type&,
                                              const bd_addr_type&);

    CFG_target_network_information_Bluetooth (const ::xercesc::DOMElement& e,
                                              ::xml_schema::flags f = 0,
                                              ::xml_schema::container* c = 0);

    CFG_target_network_information_Bluetooth (const CFG_target_network_information_Bluetooth& x,
                                              ::xml_schema::flags f = 0,
                                              ::xml_schema::container* c = 0);

    virtual CFG_target_network_information_Bluetooth*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    CFG_target_network_information_Bluetooth&
    operator= (const CFG_target_network_information_Bluetooth& x);

    virtual 
    ~CFG_target_network_information_Bluetooth ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ::xsd::cxx::tree::one< receiver_type > receiver_;
    ::xsd::cxx::tree::one< data_id_type > data_id_;
    ::xsd::cxx::tree::one< transport_protocol_type > transport_protocol_;
    ::xsd::cxx::tree::one< port_type > port_;
    ::xsd::cxx::tree::one< bd_addr_type > bd_addr_;
  };

  class CFG_target_network_information_TCP_IPv4: public ::xml_schema::type
  {
    public:
    // receiver
    //
    typedef ::xml_schema::unsigned_byte receiver_type;
    typedef ::xsd::cxx::tree::traits< receiver_type, char > receiver_traits;

    const receiver_type&
    receiver () const;

    receiver_type&
    receiver ();

    void
    receiver (const receiver_type& x);

    // data_id
    //
    typedef ::xml_schema::unsigned_short data_id_type;
    typedef ::xsd::cxx::tree::traits< data_id_type, char > data_id_traits;

    const data_id_type&
    data_id () const;

    data_id_type&
    data_id ();

    void
    data_id (const data_id_type& x);

    // transport_protocol
    //
    typedef ::xml_schema::unsigned_byte transport_protocol_type;
    typedef ::xsd::cxx::tree::traits< transport_protocol_type, char > transport_protocol_traits;

    const transport_protocol_type&
    transport_protocol () const;

    transport_protocol_type&
    transport_protocol ();

    void
    transport_protocol (const transport_protocol_type& x);

    // ip_address
    //
    typedef ::xml_schema::unsigned_int ip_address_type;
    typedef ::xsd::cxx::tree::traits< ip_address_type, char > ip_address_traits;

    const ip_address_type&
    ip_address () const;

    ip_address_type&
    ip_address ();

    void
    ip_address (const ip_address_type& x);

    // port
    //
    typedef ::xml_schema::unsigned_short port_type;
    typedef ::xsd::cxx::tree::traits< port_type, char > port_traits;

    const port_type&
    port () const;

    port_type&
    port ();

    void
    port (const port_type& x);

    // Constructors.
    //
    CFG_target_network_information_TCP_IPv4 (const receiver_type&,
                                             const data_id_type&,
                                             const transport_protocol_type&,
                                             const ip_address_type&,
                                             const port_type&);

    CFG_target_network_information_TCP_IPv4 (const ::xercesc::DOMElement& e,
                                             ::xml_schema::flags f = 0,
                                             ::xml_schema::container* c = 0);

    CFG_target_network_information_TCP_IPv4 (const CFG_target_network_information_TCP_IPv4& x,
                                             ::xml_schema::flags f = 0,
                                             ::xml_schema::container* c = 0);

    virtual CFG_target_network_information_TCP_IPv4*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    CFG_target_network_information_TCP_IPv4&
    operator= (const CFG_target_network_information_TCP_IPv4& x);

    virtual 
    ~CFG_target_network_information_TCP_IPv4 ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ::xsd::cxx::tree::one< receiver_type > receiver_;
    ::xsd::cxx::tree::one< data_id_type > data_id_;
    ::xsd::cxx::tree::one< transport_protocol_type > transport_protocol_;
    ::xsd::cxx::tree::one< ip_address_type > ip_address_;
    ::xsd::cxx::tree::one< port_type > port_;
  };

  class CFG_clear: public ::xml_schema::type
  {
    public:
    // receiver
    //
    typedef ::xml_schema::unsigned_byte receiver_type;
    typedef ::xsd::cxx::tree::traits< receiver_type, char > receiver_traits;

    const receiver_type&
    receiver () const;

    receiver_type&
    receiver ();

    void
    receiver (const receiver_type& x);

    // Constructors.
    //
    CFG_clear (const receiver_type&);

    CFG_clear (const ::xercesc::DOMElement& e,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

    CFG_clear (const CFG_clear& x,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

    virtual CFG_clear*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    CFG_clear&
    operator= (const CFG_clear& x);

    virtual 
    ~CFG_clear ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ::xsd::cxx::tree::one< receiver_type > receiver_;
  };

  class CFG_parameter: public ::xml_schema::type
  {
    public:
    // Payload
    //
    typedef ::DcpTestSuite::Payload Payload_type;
    typedef ::xsd::cxx::tree::traits< Payload_type, char > Payload_traits;

    const Payload_type&
    Payload () const;

    Payload_type&
    Payload ();

    void
    Payload (const Payload_type& x);

    void
    Payload (::std::auto_ptr< Payload_type > p);

    // receiver
    //
    typedef ::xml_schema::unsigned_byte receiver_type;
    typedef ::xsd::cxx::tree::traits< receiver_type, char > receiver_traits;

    const receiver_type&
    receiver () const;

    receiver_type&
    receiver ();

    void
    receiver (const receiver_type& x);

    // target_vr
    //
    typedef ::xml_schema::unsigned_short target_vr_type;
    typedef ::xsd::cxx::tree::traits< target_vr_type, char > target_vr_traits;

    const target_vr_type&
    target_vr () const;

    target_vr_type&
    target_vr ();

    void
    target_vr (const target_vr_type& x);

    // source_data_type
    //
    typedef ::xml_schema::unsigned_byte source_data_type_type;
    typedef ::xsd::cxx::tree::traits< source_data_type_type, char > source_data_type_traits;

    const source_data_type_type&
    source_data_type () const;

    source_data_type_type&
    source_data_type ();

    void
    source_data_type (const source_data_type_type& x);

    // Constructors.
    //
    CFG_parameter (const Payload_type&,
                   const receiver_type&,
                   const target_vr_type&,
                   const source_data_type_type&);

    CFG_parameter (::std::auto_ptr< Payload_type >,
                   const receiver_type&,
                   const target_vr_type&,
                   const source_data_type_type&);

    CFG_parameter (const ::xercesc::DOMElement& e,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

    CFG_parameter (const CFG_parameter& x,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

    virtual CFG_parameter*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    CFG_parameter&
    operator= (const CFG_parameter& x);

    virtual 
    ~CFG_parameter ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ::xsd::cxx::tree::one< Payload_type > Payload_;
    ::xsd::cxx::tree::one< receiver_type > receiver_;
    ::xsd::cxx::tree::one< target_vr_type > target_vr_;
    ::xsd::cxx::tree::one< source_data_type_type > source_data_type_;
  };

  class CFG_tunable_parameter: public ::xml_schema::type
  {
    public:
    // receiver
    //
    typedef ::xml_schema::unsigned_byte receiver_type;
    typedef ::xsd::cxx::tree::traits< receiver_type, char > receiver_traits;

    const receiver_type&
    receiver () const;

    receiver_type&
    receiver ();

    void
    receiver (const receiver_type& x);

    // param_id
    //
    typedef ::xml_schema::unsigned_short param_id_type;
    typedef ::xsd::cxx::tree::traits< param_id_type, char > param_id_traits;

    const param_id_type&
    param_id () const;

    param_id_type&
    param_id ();

    void
    param_id (const param_id_type& x);

    // pos
    //
    typedef ::xml_schema::unsigned_short pos_type;
    typedef ::xsd::cxx::tree::traits< pos_type, char > pos_traits;

    const pos_type&
    pos () const;

    pos_type&
    pos ();

    void
    pos (const pos_type& x);

    // target_vr
    //
    typedef ::xml_schema::unsigned_short target_vr_type;
    typedef ::xsd::cxx::tree::traits< target_vr_type, char > target_vr_traits;

    const target_vr_type&
    target_vr () const;

    target_vr_type&
    target_vr ();

    void
    target_vr (const target_vr_type& x);

    // source_data_type
    //
    typedef ::xml_schema::unsigned_byte source_data_type_type;
    typedef ::xsd::cxx::tree::traits< source_data_type_type, char > source_data_type_traits;

    const source_data_type_type&
    source_data_type () const;

    source_data_type_type&
    source_data_type ();

    void
    source_data_type (const source_data_type_type& x);

    // Constructors.
    //
    CFG_tunable_parameter (const receiver_type&,
                           const param_id_type&,
                           const pos_type&,
                           const target_vr_type&,
                           const source_data_type_type&);

    CFG_tunable_parameter (const ::xercesc::DOMElement& e,
                           ::xml_schema::flags f = 0,
                           ::xml_schema::container* c = 0);

    CFG_tunable_parameter (const CFG_tunable_parameter& x,
                           ::xml_schema::flags f = 0,
                           ::xml_schema::container* c = 0);

    virtual CFG_tunable_parameter*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    CFG_tunable_parameter&
    operator= (const CFG_tunable_parameter& x);

    virtual 
    ~CFG_tunable_parameter ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ::xsd::cxx::tree::one< receiver_type > receiver_;
    ::xsd::cxx::tree::one< param_id_type > param_id_;
    ::xsd::cxx::tree::one< pos_type > pos_;
    ::xsd::cxx::tree::one< target_vr_type > target_vr_;
    ::xsd::cxx::tree::one< source_data_type_type > source_data_type_;
  };

  class CFG_param_network_information: public ::xml_schema::type
  {
    public:
    // receiver
    //
    typedef ::xml_schema::unsigned_byte receiver_type;
    typedef ::xsd::cxx::tree::traits< receiver_type, char > receiver_traits;

    const receiver_type&
    receiver () const;

    receiver_type&
    receiver ();

    void
    receiver (const receiver_type& x);

    // param_id
    //
    typedef ::xml_schema::unsigned_short param_id_type;
    typedef ::xsd::cxx::tree::traits< param_id_type, char > param_id_traits;

    const param_id_type&
    param_id () const;

    param_id_type&
    param_id ();

    void
    param_id (const param_id_type& x);

    // transport_protocol
    //
    typedef ::xml_schema::unsigned_byte transport_protocol_type;
    typedef ::xsd::cxx::tree::traits< transport_protocol_type, char > transport_protocol_traits;

    const transport_protocol_type&
    transport_protocol () const;

    transport_protocol_type&
    transport_protocol ();

    void
    transport_protocol (const transport_protocol_type& x);

    // Constructors.
    //
    CFG_param_network_information (const receiver_type&,
                                   const param_id_type&,
                                   const transport_protocol_type&);

    CFG_param_network_information (const ::xercesc::DOMElement& e,
                                   ::xml_schema::flags f = 0,
                                   ::xml_schema::container* c = 0);

    CFG_param_network_information (const CFG_param_network_information& x,
                                   ::xml_schema::flags f = 0,
                                   ::xml_schema::container* c = 0);

    virtual CFG_param_network_information*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    CFG_param_network_information&
    operator= (const CFG_param_network_information& x);

    virtual 
    ~CFG_param_network_information ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ::xsd::cxx::tree::one< receiver_type > receiver_;
    ::xsd::cxx::tree::one< param_id_type > param_id_;
    ::xsd::cxx::tree::one< transport_protocol_type > transport_protocol_;
  };

  class CFG_param_network_information_UDP_IPv4: public ::xml_schema::type
  {
    public:
    // receiver
    //
    typedef ::xml_schema::unsigned_byte receiver_type;
    typedef ::xsd::cxx::tree::traits< receiver_type, char > receiver_traits;

    const receiver_type&
    receiver () const;

    receiver_type&
    receiver ();

    void
    receiver (const receiver_type& x);

    // param_id
    //
    typedef ::xml_schema::unsigned_short param_id_type;
    typedef ::xsd::cxx::tree::traits< param_id_type, char > param_id_traits;

    const param_id_type&
    param_id () const;

    param_id_type&
    param_id ();

    void
    param_id (const param_id_type& x);

    // transport_protocol
    //
    typedef ::xml_schema::unsigned_byte transport_protocol_type;
    typedef ::xsd::cxx::tree::traits< transport_protocol_type, char > transport_protocol_traits;

    const transport_protocol_type&
    transport_protocol () const;

    transport_protocol_type&
    transport_protocol ();

    void
    transport_protocol (const transport_protocol_type& x);

    // ip_address
    //
    typedef ::xml_schema::unsigned_int ip_address_type;
    typedef ::xsd::cxx::tree::traits< ip_address_type, char > ip_address_traits;

    const ip_address_type&
    ip_address () const;

    ip_address_type&
    ip_address ();

    void
    ip_address (const ip_address_type& x);

    // port
    //
    typedef ::xml_schema::unsigned_short port_type;
    typedef ::xsd::cxx::tree::traits< port_type, char > port_traits;

    const port_type&
    port () const;

    port_type&
    port ();

    void
    port (const port_type& x);

    // Constructors.
    //
    CFG_param_network_information_UDP_IPv4 (const receiver_type&,
                                            const param_id_type&,
                                            const transport_protocol_type&,
                                            const ip_address_type&,
                                            const port_type&);

    CFG_param_network_information_UDP_IPv4 (const ::xercesc::DOMElement& e,
                                            ::xml_schema::flags f = 0,
                                            ::xml_schema::container* c = 0);

    CFG_param_network_information_UDP_IPv4 (const CFG_param_network_information_UDP_IPv4& x,
                                            ::xml_schema::flags f = 0,
                                            ::xml_schema::container* c = 0);

    virtual CFG_param_network_information_UDP_IPv4*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    CFG_param_network_information_UDP_IPv4&
    operator= (const CFG_param_network_information_UDP_IPv4& x);

    virtual 
    ~CFG_param_network_information_UDP_IPv4 ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ::xsd::cxx::tree::one< receiver_type > receiver_;
    ::xsd::cxx::tree::one< param_id_type > param_id_;
    ::xsd::cxx::tree::one< transport_protocol_type > transport_protocol_;
    ::xsd::cxx::tree::one< ip_address_type > ip_address_;
    ::xsd::cxx::tree::one< port_type > port_;
  };

  class CFG_param_network_information_USB: public ::xml_schema::type
  {
    public:
    // receiver
    //
    typedef ::xml_schema::unsigned_byte receiver_type;
    typedef ::xsd::cxx::tree::traits< receiver_type, char > receiver_traits;

    const receiver_type&
    receiver () const;

    receiver_type&
    receiver ();

    void
    receiver (const receiver_type& x);

    // data_id
    //
    typedef ::xml_schema::unsigned_short data_id_type;
    typedef ::xsd::cxx::tree::traits< data_id_type, char > data_id_traits;

    const data_id_type&
    data_id () const;

    data_id_type&
    data_id ();

    void
    data_id (const data_id_type& x);

    // transport_protocol
    //
    typedef ::xml_schema::unsigned_byte transport_protocol_type;
    typedef ::xsd::cxx::tree::traits< transport_protocol_type, char > transport_protocol_traits;

    const transport_protocol_type&
    transport_protocol () const;

    transport_protocol_type&
    transport_protocol ();

    void
    transport_protocol (const transport_protocol_type& x);

    // endpoint_address
    //
    typedef ::xml_schema::unsigned_byte endpoint_address_type;
    typedef ::xsd::cxx::tree::traits< endpoint_address_type, char > endpoint_address_traits;

    const endpoint_address_type&
    endpoint_address () const;

    endpoint_address_type&
    endpoint_address ();

    void
    endpoint_address (const endpoint_address_type& x);

    // Constructors.
    //
    CFG_param_network_information_USB (const receiver_type&,
                                       const data_id_type&,
                                       const transport_protocol_type&,
                                       const endpoint_address_type&);

    CFG_param_network_information_USB (const ::xercesc::DOMElement& e,
                                       ::xml_schema::flags f = 0,
                                       ::xml_schema::container* c = 0);

    CFG_param_network_information_USB (const CFG_param_network_information_USB& x,
                                       ::xml_schema::flags f = 0,
                                       ::xml_schema::container* c = 0);

    virtual CFG_param_network_information_USB*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    CFG_param_network_information_USB&
    operator= (const CFG_param_network_information_USB& x);

    virtual 
    ~CFG_param_network_information_USB ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ::xsd::cxx::tree::one< receiver_type > receiver_;
    ::xsd::cxx::tree::one< data_id_type > data_id_;
    ::xsd::cxx::tree::one< transport_protocol_type > transport_protocol_;
    ::xsd::cxx::tree::one< endpoint_address_type > endpoint_address_;
  };

  class CFG_param_network_information_Bluetooth: public ::xml_schema::type
  {
    public:
    // receiver
    //
    typedef ::xml_schema::unsigned_byte receiver_type;
    typedef ::xsd::cxx::tree::traits< receiver_type, char > receiver_traits;

    const receiver_type&
    receiver () const;

    receiver_type&
    receiver ();

    void
    receiver (const receiver_type& x);

    // data_id
    //
    typedef ::xml_schema::unsigned_short data_id_type;
    typedef ::xsd::cxx::tree::traits< data_id_type, char > data_id_traits;

    const data_id_type&
    data_id () const;

    data_id_type&
    data_id ();

    void
    data_id (const data_id_type& x);

    // transport_protocol
    //
    typedef ::xml_schema::unsigned_byte transport_protocol_type;
    typedef ::xsd::cxx::tree::traits< transport_protocol_type, char > transport_protocol_traits;

    const transport_protocol_type&
    transport_protocol () const;

    transport_protocol_type&
    transport_protocol ();

    void
    transport_protocol (const transport_protocol_type& x);

    // port
    //
    typedef ::xml_schema::unsigned_byte port_type;
    typedef ::xsd::cxx::tree::traits< port_type, char > port_traits;

    const port_type&
    port () const;

    port_type&
    port ();

    void
    port (const port_type& x);

    // bd_addr
    //
    typedef ::xml_schema::unsigned_long bd_addr_type;
    typedef ::xsd::cxx::tree::traits< bd_addr_type, char > bd_addr_traits;

    const bd_addr_type&
    bd_addr () const;

    bd_addr_type&
    bd_addr ();

    void
    bd_addr (const bd_addr_type& x);

    // Constructors.
    //
    CFG_param_network_information_Bluetooth (const receiver_type&,
                                             const data_id_type&,
                                             const transport_protocol_type&,
                                             const port_type&,
                                             const bd_addr_type&);

    CFG_param_network_information_Bluetooth (const ::xercesc::DOMElement& e,
                                             ::xml_schema::flags f = 0,
                                             ::xml_schema::container* c = 0);

    CFG_param_network_information_Bluetooth (const CFG_param_network_information_Bluetooth& x,
                                             ::xml_schema::flags f = 0,
                                             ::xml_schema::container* c = 0);

    virtual CFG_param_network_information_Bluetooth*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    CFG_param_network_information_Bluetooth&
    operator= (const CFG_param_network_information_Bluetooth& x);

    virtual 
    ~CFG_param_network_information_Bluetooth ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ::xsd::cxx::tree::one< receiver_type > receiver_;
    ::xsd::cxx::tree::one< data_id_type > data_id_;
    ::xsd::cxx::tree::one< transport_protocol_type > transport_protocol_;
    ::xsd::cxx::tree::one< port_type > port_;
    ::xsd::cxx::tree::one< bd_addr_type > bd_addr_;
  };

  class CFG_param_network_information_TCP_IPv4: public ::xml_schema::type
  {
    public:
    // receiver
    //
    typedef ::xml_schema::unsigned_byte receiver_type;
    typedef ::xsd::cxx::tree::traits< receiver_type, char > receiver_traits;

    const receiver_type&
    receiver () const;

    receiver_type&
    receiver ();

    void
    receiver (const receiver_type& x);

    // param_id
    //
    typedef ::xml_schema::unsigned_short param_id_type;
    typedef ::xsd::cxx::tree::traits< param_id_type, char > param_id_traits;

    const param_id_type&
    param_id () const;

    param_id_type&
    param_id ();

    void
    param_id (const param_id_type& x);

    // transport_protocol
    //
    typedef ::xml_schema::unsigned_byte transport_protocol_type;
    typedef ::xsd::cxx::tree::traits< transport_protocol_type, char > transport_protocol_traits;

    const transport_protocol_type&
    transport_protocol () const;

    transport_protocol_type&
    transport_protocol ();

    void
    transport_protocol (const transport_protocol_type& x);

    // ip_address
    //
    typedef ::xml_schema::unsigned_int ip_address_type;
    typedef ::xsd::cxx::tree::traits< ip_address_type, char > ip_address_traits;

    const ip_address_type&
    ip_address () const;

    ip_address_type&
    ip_address ();

    void
    ip_address (const ip_address_type& x);

    // port
    //
    typedef ::xml_schema::unsigned_short port_type;
    typedef ::xsd::cxx::tree::traits< port_type, char > port_traits;

    const port_type&
    port () const;

    port_type&
    port ();

    void
    port (const port_type& x);

    // Constructors.
    //
    CFG_param_network_information_TCP_IPv4 (const receiver_type&,
                                            const param_id_type&,
                                            const transport_protocol_type&,
                                            const ip_address_type&,
                                            const port_type&);

    CFG_param_network_information_TCP_IPv4 (const ::xercesc::DOMElement& e,
                                            ::xml_schema::flags f = 0,
                                            ::xml_schema::container* c = 0);

    CFG_param_network_information_TCP_IPv4 (const CFG_param_network_information_TCP_IPv4& x,
                                            ::xml_schema::flags f = 0,
                                            ::xml_schema::container* c = 0);

    virtual CFG_param_network_information_TCP_IPv4*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    CFG_param_network_information_TCP_IPv4&
    operator= (const CFG_param_network_information_TCP_IPv4& x);

    virtual 
    ~CFG_param_network_information_TCP_IPv4 ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ::xsd::cxx::tree::one< receiver_type > receiver_;
    ::xsd::cxx::tree::one< param_id_type > param_id_;
    ::xsd::cxx::tree::one< transport_protocol_type > transport_protocol_;
    ::xsd::cxx::tree::one< ip_address_type > ip_address_;
    ::xsd::cxx::tree::one< port_type > port_;
  };

  class CFG_logging: public ::xml_schema::type
  {
    public:
    // receiver
    //
    typedef ::xml_schema::unsigned_byte receiver_type;
    typedef ::xsd::cxx::tree::traits< receiver_type, char > receiver_traits;

    const receiver_type&
    receiver () const;

    receiver_type&
    receiver ();

    void
    receiver (const receiver_type& x);

    // log_category
    //
    typedef ::xml_schema::unsigned_byte log_category_type;
    typedef ::xsd::cxx::tree::traits< log_category_type, char > log_category_traits;

    const log_category_type&
    log_category () const;

    log_category_type&
    log_category ();

    void
    log_category (const log_category_type& x);

    // log_level
    //
    typedef ::xml_schema::unsigned_byte log_level_type;
    typedef ::xsd::cxx::tree::traits< log_level_type, char > log_level_traits;

    const log_level_type&
    log_level () const;

    log_level_type&
    log_level ();

    void
    log_level (const log_level_type& x);

    // log_mode
    //
    typedef ::xml_schema::unsigned_byte log_mode_type;
    typedef ::xsd::cxx::tree::traits< log_mode_type, char > log_mode_traits;

    const log_mode_type&
    log_mode () const;

    log_mode_type&
    log_mode ();

    void
    log_mode (const log_mode_type& x);

    // Constructors.
    //
    CFG_logging (const receiver_type&,
                 const log_category_type&,
                 const log_level_type&,
                 const log_mode_type&);

    CFG_logging (const ::xercesc::DOMElement& e,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

    CFG_logging (const CFG_logging& x,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

    virtual CFG_logging*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    CFG_logging&
    operator= (const CFG_logging& x);

    virtual 
    ~CFG_logging ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ::xsd::cxx::tree::one< receiver_type > receiver_;
    ::xsd::cxx::tree::one< log_category_type > log_category_;
    ::xsd::cxx::tree::one< log_level_type > log_level_;
    ::xsd::cxx::tree::one< log_mode_type > log_mode_;
  };

  class CFG_scope: public ::xml_schema::type
  {
    public:
    // receiver
    //
    typedef ::xml_schema::unsigned_byte receiver_type;
    typedef ::xsd::cxx::tree::traits< receiver_type, char > receiver_traits;

    const receiver_type&
    receiver () const;

    receiver_type&
    receiver ();

    void
    receiver (const receiver_type& x);

    // data_id
    //
    typedef ::xml_schema::unsigned_short data_id_type;
    typedef ::xsd::cxx::tree::traits< data_id_type, char > data_id_traits;

    const data_id_type&
    data_id () const;

    data_id_type&
    data_id ();

    void
    data_id (const data_id_type& x);

    // scope
    //
    typedef ::xml_schema::unsigned_byte scope_type;
    typedef ::xsd::cxx::tree::traits< scope_type, char > scope_traits;

    const scope_type&
    scope () const;

    scope_type&
    scope ();

    void
    scope (const scope_type& x);

    // Constructors.
    //
    CFG_scope (const receiver_type&,
               const data_id_type&,
               const scope_type&);

    CFG_scope (const ::xercesc::DOMElement& e,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

    CFG_scope (const CFG_scope& x,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

    virtual CFG_scope*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    CFG_scope&
    operator= (const CFG_scope& x);

    virtual 
    ~CFG_scope ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ::xsd::cxx::tree::one< receiver_type > receiver_;
    ::xsd::cxx::tree::one< data_id_type > data_id_;
    ::xsd::cxx::tree::one< scope_type > scope_;
  };

  class STC_register: public ::xml_schema::type
  {
    public:
    // receiver
    //
    typedef ::xml_schema::unsigned_byte receiver_type;
    typedef ::xsd::cxx::tree::traits< receiver_type, char > receiver_traits;

    const receiver_type&
    receiver () const;

    receiver_type&
    receiver ();

    void
    receiver (const receiver_type& x);

    // state_id
    //
    typedef ::xml_schema::unsigned_byte state_id_type;
    typedef ::xsd::cxx::tree::traits< state_id_type, char > state_id_traits;

    const state_id_type&
    state_id () const;

    state_id_type&
    state_id ();

    void
    state_id (const state_id_type& x);

    // slave_uuid
    //
    typedef ::DcpTestSuite::slave_uuid slave_uuid_type;
    typedef ::xsd::cxx::tree::optional< slave_uuid_type > slave_uuid_optional;
    typedef ::xsd::cxx::tree::traits< slave_uuid_type, char > slave_uuid_traits;

    const slave_uuid_optional&
    slave_uuid () const;

    slave_uuid_optional&
    slave_uuid ();

    void
    slave_uuid (const slave_uuid_type& x);

    void
    slave_uuid (const slave_uuid_optional& x);

    void
    slave_uuid (::std::auto_ptr< slave_uuid_type > p);

    // op_mode
    //
    typedef ::xml_schema::unsigned_byte op_mode_type;
    typedef ::xsd::cxx::tree::traits< op_mode_type, char > op_mode_traits;

    const op_mode_type&
    op_mode () const;

    op_mode_type&
    op_mode ();

    void
    op_mode (const op_mode_type& x);

    // major_version
    //
    typedef ::xml_schema::unsigned_byte major_version_type;
    typedef ::xsd::cxx::tree::traits< major_version_type, char > major_version_traits;

    const major_version_type&
    major_version () const;

    major_version_type&
    major_version ();

    void
    major_version (const major_version_type& x);

    // minor_version
    //
    typedef ::xml_schema::unsigned_byte minor_version_type;
    typedef ::xsd::cxx::tree::traits< minor_version_type, char > minor_version_traits;

    const minor_version_type&
    minor_version () const;

    minor_version_type&
    minor_version ();

    void
    minor_version (const minor_version_type& x);

    // Constructors.
    //
    STC_register (const receiver_type&,
                  const state_id_type&,
                  const op_mode_type&,
                  const major_version_type&,
                  const minor_version_type&);

    STC_register (const ::xercesc::DOMElement& e,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

    STC_register (const STC_register& x,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

    virtual STC_register*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    STC_register&
    operator= (const STC_register& x);

    virtual 
    ~STC_register ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ::xsd::cxx::tree::one< receiver_type > receiver_;
    ::xsd::cxx::tree::one< state_id_type > state_id_;
    slave_uuid_optional slave_uuid_;
    ::xsd::cxx::tree::one< op_mode_type > op_mode_;
    ::xsd::cxx::tree::one< major_version_type > major_version_;
    ::xsd::cxx::tree::one< minor_version_type > minor_version_;
  };

  class STC_deregister: public ::xml_schema::type
  {
    public:
    // receiver
    //
    typedef ::xml_schema::unsigned_byte receiver_type;
    typedef ::xsd::cxx::tree::traits< receiver_type, char > receiver_traits;

    const receiver_type&
    receiver () const;

    receiver_type&
    receiver ();

    void
    receiver (const receiver_type& x);

    // state_id
    //
    typedef ::xml_schema::unsigned_byte state_id_type;
    typedef ::xsd::cxx::tree::traits< state_id_type, char > state_id_traits;

    const state_id_type&
    state_id () const;

    state_id_type&
    state_id ();

    void
    state_id (const state_id_type& x);

    // Constructors.
    //
    STC_deregister (const receiver_type&,
                    const state_id_type&);

    STC_deregister (const ::xercesc::DOMElement& e,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

    STC_deregister (const STC_deregister& x,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

    virtual STC_deregister*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    STC_deregister&
    operator= (const STC_deregister& x);

    virtual 
    ~STC_deregister ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ::xsd::cxx::tree::one< receiver_type > receiver_;
    ::xsd::cxx::tree::one< state_id_type > state_id_;
  };

  class STC_prepare: public ::xml_schema::type
  {
    public:
    // receiver
    //
    typedef ::xml_schema::unsigned_byte receiver_type;
    typedef ::xsd::cxx::tree::traits< receiver_type, char > receiver_traits;

    const receiver_type&
    receiver () const;

    receiver_type&
    receiver ();

    void
    receiver (const receiver_type& x);

    // state_id
    //
    typedef ::xml_schema::unsigned_byte state_id_type;
    typedef ::xsd::cxx::tree::traits< state_id_type, char > state_id_traits;

    const state_id_type&
    state_id () const;

    state_id_type&
    state_id ();

    void
    state_id (const state_id_type& x);

    // Constructors.
    //
    STC_prepare (const receiver_type&,
                 const state_id_type&);

    STC_prepare (const ::xercesc::DOMElement& e,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

    STC_prepare (const STC_prepare& x,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

    virtual STC_prepare*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    STC_prepare&
    operator= (const STC_prepare& x);

    virtual 
    ~STC_prepare ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ::xsd::cxx::tree::one< receiver_type > receiver_;
    ::xsd::cxx::tree::one< state_id_type > state_id_;
  };

  class STC_configure: public ::xml_schema::type
  {
    public:
    // receiver
    //
    typedef ::xml_schema::unsigned_byte receiver_type;
    typedef ::xsd::cxx::tree::traits< receiver_type, char > receiver_traits;

    const receiver_type&
    receiver () const;

    receiver_type&
    receiver ();

    void
    receiver (const receiver_type& x);

    // state_id
    //
    typedef ::xml_schema::unsigned_byte state_id_type;
    typedef ::xsd::cxx::tree::traits< state_id_type, char > state_id_traits;

    const state_id_type&
    state_id () const;

    state_id_type&
    state_id ();

    void
    state_id (const state_id_type& x);

    // Constructors.
    //
    STC_configure (const receiver_type&,
                   const state_id_type&);

    STC_configure (const ::xercesc::DOMElement& e,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

    STC_configure (const STC_configure& x,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

    virtual STC_configure*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    STC_configure&
    operator= (const STC_configure& x);

    virtual 
    ~STC_configure ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ::xsd::cxx::tree::one< receiver_type > receiver_;
    ::xsd::cxx::tree::one< state_id_type > state_id_;
  };

  class STC_initialize: public ::xml_schema::type
  {
    public:
    // receiver
    //
    typedef ::xml_schema::unsigned_byte receiver_type;
    typedef ::xsd::cxx::tree::traits< receiver_type, char > receiver_traits;

    const receiver_type&
    receiver () const;

    receiver_type&
    receiver ();

    void
    receiver (const receiver_type& x);

    // state_id
    //
    typedef ::xml_schema::unsigned_byte state_id_type;
    typedef ::xsd::cxx::tree::traits< state_id_type, char > state_id_traits;

    const state_id_type&
    state_id () const;

    state_id_type&
    state_id ();

    void
    state_id (const state_id_type& x);

    // Constructors.
    //
    STC_initialize (const receiver_type&,
                    const state_id_type&);

    STC_initialize (const ::xercesc::DOMElement& e,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

    STC_initialize (const STC_initialize& x,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

    virtual STC_initialize*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    STC_initialize&
    operator= (const STC_initialize& x);

    virtual 
    ~STC_initialize ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ::xsd::cxx::tree::one< receiver_type > receiver_;
    ::xsd::cxx::tree::one< state_id_type > state_id_;
  };

  class STC_run: public ::xml_schema::type
  {
    public:
    // receiver
    //
    typedef ::xml_schema::unsigned_byte receiver_type;
    typedef ::xsd::cxx::tree::traits< receiver_type, char > receiver_traits;

    const receiver_type&
    receiver () const;

    receiver_type&
    receiver ();

    void
    receiver (const receiver_type& x);

    // state_id
    //
    typedef ::xml_schema::unsigned_byte state_id_type;
    typedef ::xsd::cxx::tree::traits< state_id_type, char > state_id_traits;

    const state_id_type&
    state_id () const;

    state_id_type&
    state_id ();

    void
    state_id (const state_id_type& x);

    // start_time
    //
    typedef ::xml_schema::long_ start_time_type;
    typedef ::xsd::cxx::tree::optional< start_time_type > start_time_optional;
    typedef ::xsd::cxx::tree::traits< start_time_type, char > start_time_traits;

    const start_time_optional&
    start_time () const;

    start_time_optional&
    start_time ();

    void
    start_time (const start_time_type& x);

    void
    start_time (const start_time_optional& x);

    // Constructors.
    //
    STC_run (const receiver_type&,
             const state_id_type&);

    STC_run (const ::xercesc::DOMElement& e,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

    STC_run (const STC_run& x,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

    virtual STC_run*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    STC_run&
    operator= (const STC_run& x);

    virtual 
    ~STC_run ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ::xsd::cxx::tree::one< receiver_type > receiver_;
    ::xsd::cxx::tree::one< state_id_type > state_id_;
    start_time_optional start_time_;
  };

  class STC_do_step: public ::xml_schema::type
  {
    public:
    // receiver
    //
    typedef ::xml_schema::unsigned_byte receiver_type;
    typedef ::xsd::cxx::tree::traits< receiver_type, char > receiver_traits;

    const receiver_type&
    receiver () const;

    receiver_type&
    receiver ();

    void
    receiver (const receiver_type& x);

    // state_id
    //
    typedef ::xml_schema::unsigned_byte state_id_type;
    typedef ::xsd::cxx::tree::traits< state_id_type, char > state_id_traits;

    const state_id_type&
    state_id () const;

    state_id_type&
    state_id ();

    void
    state_id (const state_id_type& x);

    // steps
    //
    typedef ::xml_schema::unsigned_int steps_type;
    typedef ::xsd::cxx::tree::traits< steps_type, char > steps_traits;

    const steps_type&
    steps () const;

    steps_type&
    steps ();

    void
    steps (const steps_type& x);

    // Constructors.
    //
    STC_do_step (const receiver_type&,
                 const state_id_type&,
                 const steps_type&);

    STC_do_step (const ::xercesc::DOMElement& e,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

    STC_do_step (const STC_do_step& x,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

    virtual STC_do_step*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    STC_do_step&
    operator= (const STC_do_step& x);

    virtual 
    ~STC_do_step ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ::xsd::cxx::tree::one< receiver_type > receiver_;
    ::xsd::cxx::tree::one< state_id_type > state_id_;
    ::xsd::cxx::tree::one< steps_type > steps_;
  };

  class STC_send_outputs: public ::xml_schema::type
  {
    public:
    // receiver
    //
    typedef ::xml_schema::unsigned_byte receiver_type;
    typedef ::xsd::cxx::tree::traits< receiver_type, char > receiver_traits;

    const receiver_type&
    receiver () const;

    receiver_type&
    receiver ();

    void
    receiver (const receiver_type& x);

    // state_id
    //
    typedef ::xml_schema::unsigned_byte state_id_type;
    typedef ::xsd::cxx::tree::traits< state_id_type, char > state_id_traits;

    const state_id_type&
    state_id () const;

    state_id_type&
    state_id ();

    void
    state_id (const state_id_type& x);

    // Constructors.
    //
    STC_send_outputs (const receiver_type&,
                      const state_id_type&);

    STC_send_outputs (const ::xercesc::DOMElement& e,
                      ::xml_schema::flags f = 0,
                      ::xml_schema::container* c = 0);

    STC_send_outputs (const STC_send_outputs& x,
                      ::xml_schema::flags f = 0,
                      ::xml_schema::container* c = 0);

    virtual STC_send_outputs*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    STC_send_outputs&
    operator= (const STC_send_outputs& x);

    virtual 
    ~STC_send_outputs ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ::xsd::cxx::tree::one< receiver_type > receiver_;
    ::xsd::cxx::tree::one< state_id_type > state_id_;
  };

  class STC_stop: public ::xml_schema::type
  {
    public:
    // receiver
    //
    typedef ::xml_schema::unsigned_byte receiver_type;
    typedef ::xsd::cxx::tree::traits< receiver_type, char > receiver_traits;

    const receiver_type&
    receiver () const;

    receiver_type&
    receiver ();

    void
    receiver (const receiver_type& x);

    // state_id
    //
    typedef ::xml_schema::unsigned_byte state_id_type;
    typedef ::xsd::cxx::tree::traits< state_id_type, char > state_id_traits;

    const state_id_type&
    state_id () const;

    state_id_type&
    state_id ();

    void
    state_id (const state_id_type& x);

    // Constructors.
    //
    STC_stop (const receiver_type&,
              const state_id_type&);

    STC_stop (const ::xercesc::DOMElement& e,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

    STC_stop (const STC_stop& x,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

    virtual STC_stop*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    STC_stop&
    operator= (const STC_stop& x);

    virtual 
    ~STC_stop ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ::xsd::cxx::tree::one< receiver_type > receiver_;
    ::xsd::cxx::tree::one< state_id_type > state_id_;
  };

  class STC_reset: public ::xml_schema::type
  {
    public:
    // receiver
    //
    typedef ::xml_schema::unsigned_byte receiver_type;
    typedef ::xsd::cxx::tree::traits< receiver_type, char > receiver_traits;

    const receiver_type&
    receiver () const;

    receiver_type&
    receiver ();

    void
    receiver (const receiver_type& x);

    // state_id
    //
    typedef ::xml_schema::unsigned_byte state_id_type;
    typedef ::xsd::cxx::tree::traits< state_id_type, char > state_id_traits;

    const state_id_type&
    state_id () const;

    state_id_type&
    state_id ();

    void
    state_id (const state_id_type& x);

    // Constructors.
    //
    STC_reset (const receiver_type&,
               const state_id_type&);

    STC_reset (const ::xercesc::DOMElement& e,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

    STC_reset (const STC_reset& x,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

    virtual STC_reset*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    STC_reset&
    operator= (const STC_reset& x);

    virtual 
    ~STC_reset ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ::xsd::cxx::tree::one< receiver_type > receiver_;
    ::xsd::cxx::tree::one< state_id_type > state_id_;
  };

  class INF_state: public ::xml_schema::type
  {
    public:
    // receiver
    //
    typedef ::xml_schema::unsigned_byte receiver_type;
    typedef ::xsd::cxx::tree::traits< receiver_type, char > receiver_traits;

    const receiver_type&
    receiver () const;

    receiver_type&
    receiver ();

    void
    receiver (const receiver_type& x);

    // Constructors.
    //
    INF_state (const receiver_type&);

    INF_state (const ::xercesc::DOMElement& e,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

    INF_state (const INF_state& x,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

    virtual INF_state*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    INF_state&
    operator= (const INF_state& x);

    virtual 
    ~INF_state ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ::xsd::cxx::tree::one< receiver_type > receiver_;
  };

  class INF_error: public ::xml_schema::type
  {
    public:
    // receiver
    //
    typedef ::xml_schema::unsigned_byte receiver_type;
    typedef ::xsd::cxx::tree::traits< receiver_type, char > receiver_traits;

    const receiver_type&
    receiver () const;

    receiver_type&
    receiver ();

    void
    receiver (const receiver_type& x);

    // Constructors.
    //
    INF_error (const receiver_type&);

    INF_error (const ::xercesc::DOMElement& e,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

    INF_error (const INF_error& x,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

    virtual INF_error*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    INF_error&
    operator= (const INF_error& x);

    virtual 
    ~INF_error ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ::xsd::cxx::tree::one< receiver_type > receiver_;
  };

  class INF_log: public ::xml_schema::type
  {
    public:
    // receiver
    //
    typedef ::xml_schema::unsigned_byte receiver_type;
    typedef ::xsd::cxx::tree::traits< receiver_type, char > receiver_traits;

    const receiver_type&
    receiver () const;

    receiver_type&
    receiver ();

    void
    receiver (const receiver_type& x);

    // log_category
    //
    typedef ::xml_schema::unsigned_byte log_category_type;
    typedef ::xsd::cxx::tree::traits< log_category_type, char > log_category_traits;

    const log_category_type&
    log_category () const;

    log_category_type&
    log_category ();

    void
    log_category (const log_category_type& x);

    // log_max_num
    //
    typedef ::xml_schema::unsigned_byte log_max_num_type;
    typedef ::xsd::cxx::tree::traits< log_max_num_type, char > log_max_num_traits;

    const log_max_num_type&
    log_max_num () const;

    log_max_num_type&
    log_max_num ();

    void
    log_max_num (const log_max_num_type& x);

    // Constructors.
    //
    INF_log (const receiver_type&,
             const log_category_type&,
             const log_max_num_type&);

    INF_log (const ::xercesc::DOMElement& e,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

    INF_log (const INF_log& x,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

    virtual INF_log*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    INF_log&
    operator= (const INF_log& x);

    virtual 
    ~INF_log ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ::xsd::cxx::tree::one< receiver_type > receiver_;
    ::xsd::cxx::tree::one< log_category_type > log_category_;
    ::xsd::cxx::tree::one< log_max_num_type > log_max_num_;
  };

  class DAT_input_output2: public ::xml_schema::type
  {
    public:
    // SendingPayloadField
    //
    typedef ::DcpTestSuite::SendingPayloadField SendingPayloadField_type;
    typedef ::xsd::cxx::tree::sequence< SendingPayloadField_type > SendingPayloadField_sequence;
    typedef SendingPayloadField_sequence::iterator SendingPayloadField_iterator;
    typedef SendingPayloadField_sequence::const_iterator SendingPayloadField_const_iterator;
    typedef ::xsd::cxx::tree::traits< SendingPayloadField_type, char > SendingPayloadField_traits;

    const SendingPayloadField_sequence&
    SendingPayloadField () const;

    SendingPayloadField_sequence&
    SendingPayloadField ();

    void
    SendingPayloadField (const SendingPayloadField_sequence& s);

    // data_id
    //
    typedef ::xml_schema::unsigned_short data_id_type;
    typedef ::xsd::cxx::tree::traits< data_id_type, char > data_id_traits;

    const data_id_type&
    data_id () const;

    data_id_type&
    data_id ();

    void
    data_id (const data_id_type& x);

    // Constructors.
    //
    DAT_input_output2 (const data_id_type&);

    DAT_input_output2 (const ::xercesc::DOMElement& e,
                       ::xml_schema::flags f = 0,
                       ::xml_schema::container* c = 0);

    DAT_input_output2 (const DAT_input_output2& x,
                       ::xml_schema::flags f = 0,
                       ::xml_schema::container* c = 0);

    virtual DAT_input_output2*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    DAT_input_output2&
    operator= (const DAT_input_output2& x);

    virtual 
    ~DAT_input_output2 ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    SendingPayloadField_sequence SendingPayloadField_;
    ::xsd::cxx::tree::one< data_id_type > data_id_;
  };

  class DAT_parameter2: public ::xml_schema::type
  {
    public:
    // SendingPayloadField
    //
    typedef ::DcpTestSuite::SendingPayloadField SendingPayloadField_type;
    typedef ::xsd::cxx::tree::sequence< SendingPayloadField_type > SendingPayloadField_sequence;
    typedef SendingPayloadField_sequence::iterator SendingPayloadField_iterator;
    typedef SendingPayloadField_sequence::const_iterator SendingPayloadField_const_iterator;
    typedef ::xsd::cxx::tree::traits< SendingPayloadField_type, char > SendingPayloadField_traits;

    const SendingPayloadField_sequence&
    SendingPayloadField () const;

    SendingPayloadField_sequence&
    SendingPayloadField ();

    void
    SendingPayloadField (const SendingPayloadField_sequence& s);

    // param_id
    //
    typedef ::xml_schema::unsigned_short param_id_type;
    typedef ::xsd::cxx::tree::traits< param_id_type, char > param_id_traits;

    const param_id_type&
    param_id () const;

    param_id_type&
    param_id ();

    void
    param_id (const param_id_type& x);

    // Constructors.
    //
    DAT_parameter2 (const param_id_type&);

    DAT_parameter2 (const ::xercesc::DOMElement& e,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

    DAT_parameter2 (const DAT_parameter2& x,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

    virtual DAT_parameter2*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    DAT_parameter2&
    operator= (const DAT_parameter2& x);

    virtual 
    ~DAT_parameter2 ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    SendingPayloadField_sequence SendingPayloadField_;
    ::xsd::cxx::tree::one< param_id_type > param_id_;
  };

  class RSP_ack: public ::xml_schema::type
  {
    public:
    // sender
    //
    typedef ::xml_schema::unsigned_byte sender_type;
    typedef ::xsd::cxx::tree::traits< sender_type, char > sender_traits;

    const sender_type&
    sender () const;

    sender_type&
    sender ();

    void
    sender (const sender_type& x);

    // Constructors.
    //
    RSP_ack (const sender_type&);

    RSP_ack (const ::xercesc::DOMElement& e,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

    RSP_ack (const RSP_ack& x,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

    virtual RSP_ack*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    RSP_ack&
    operator= (const RSP_ack& x);

    virtual 
    ~RSP_ack ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ::xsd::cxx::tree::one< sender_type > sender_;
  };

  class RSP_error_ack: public ::xml_schema::type
  {
    public:
    // sender
    //
    typedef ::xml_schema::unsigned_byte sender_type;
    typedef ::xsd::cxx::tree::traits< sender_type, char > sender_traits;

    const sender_type&
    sender () const;

    sender_type&
    sender ();

    void
    sender (const sender_type& x);

    // error_code
    //
    typedef ::xml_schema::unsigned_short error_code_type;
    typedef ::xsd::cxx::tree::traits< error_code_type, char > error_code_traits;

    const error_code_type&
    error_code () const;

    error_code_type&
    error_code ();

    void
    error_code (const error_code_type& x);

    // Constructors.
    //
    RSP_error_ack (const sender_type&,
                   const error_code_type&);

    RSP_error_ack (const ::xercesc::DOMElement& e,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

    RSP_error_ack (const RSP_error_ack& x,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

    virtual RSP_error_ack*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    RSP_error_ack&
    operator= (const RSP_error_ack& x);

    virtual 
    ~RSP_error_ack ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ::xsd::cxx::tree::one< sender_type > sender_;
    ::xsd::cxx::tree::one< error_code_type > error_code_;
  };

  class RSP_nack: public ::xml_schema::type
  {
    public:
    // sender
    //
    typedef ::xml_schema::unsigned_byte sender_type;
    typedef ::xsd::cxx::tree::traits< sender_type, char > sender_traits;

    const sender_type&
    sender () const;

    sender_type&
    sender ();

    void
    sender (const sender_type& x);

    // error_code
    //
    typedef ::xml_schema::unsigned_short error_code_type;
    typedef ::xsd::cxx::tree::traits< error_code_type, char > error_code_traits;

    const error_code_type&
    error_code () const;

    error_code_type&
    error_code ();

    void
    error_code (const error_code_type& x);

    // exp_pdu_seq_id
    //
    typedef ::xml_schema::unsigned_short exp_pdu_seq_id_type;
    typedef ::xsd::cxx::tree::optional< exp_pdu_seq_id_type > exp_pdu_seq_id_optional;
    typedef ::xsd::cxx::tree::traits< exp_pdu_seq_id_type, char > exp_pdu_seq_id_traits;

    const exp_pdu_seq_id_optional&
    exp_pdu_seq_id () const;

    exp_pdu_seq_id_optional&
    exp_pdu_seq_id ();

    void
    exp_pdu_seq_id (const exp_pdu_seq_id_type& x);

    void
    exp_pdu_seq_id (const exp_pdu_seq_id_optional& x);

    // Constructors.
    //
    RSP_nack (const sender_type&,
              const error_code_type&);

    RSP_nack (const ::xercesc::DOMElement& e,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

    RSP_nack (const RSP_nack& x,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

    virtual RSP_nack*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    RSP_nack&
    operator= (const RSP_nack& x);

    virtual 
    ~RSP_nack ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ::xsd::cxx::tree::one< sender_type > sender_;
    ::xsd::cxx::tree::one< error_code_type > error_code_;
    exp_pdu_seq_id_optional exp_pdu_seq_id_;
  };

  class RSP_state_ack: public ::xml_schema::type
  {
    public:
    // sender
    //
    typedef ::xml_schema::unsigned_byte sender_type;
    typedef ::xsd::cxx::tree::traits< sender_type, char > sender_traits;

    const sender_type&
    sender () const;

    sender_type&
    sender ();

    void
    sender (const sender_type& x);

    // state_id
    //
    typedef ::xml_schema::unsigned_byte state_id_type;
    typedef ::xsd::cxx::tree::traits< state_id_type, char > state_id_traits;

    const state_id_type&
    state_id () const;

    state_id_type&
    state_id ();

    void
    state_id (const state_id_type& x);

    // Constructors.
    //
    RSP_state_ack (const sender_type&,
                   const state_id_type&);

    RSP_state_ack (const ::xercesc::DOMElement& e,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

    RSP_state_ack (const RSP_state_ack& x,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

    virtual RSP_state_ack*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    RSP_state_ack&
    operator= (const RSP_state_ack& x);

    virtual 
    ~RSP_state_ack ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ::xsd::cxx::tree::one< sender_type > sender_;
    ::xsd::cxx::tree::one< state_id_type > state_id_;
  };

  class NTF_state_changed: public ::xml_schema::type
  {
    public:
    // sender
    //
    typedef ::xml_schema::unsigned_byte sender_type;
    typedef ::xsd::cxx::tree::traits< sender_type, char > sender_traits;

    const sender_type&
    sender () const;

    sender_type&
    sender ();

    void
    sender (const sender_type& x);

    // state_id
    //
    typedef ::xml_schema::unsigned_byte state_id_type;
    typedef ::xsd::cxx::tree::traits< state_id_type, char > state_id_traits;

    const state_id_type&
    state_id () const;

    state_id_type&
    state_id ();

    void
    state_id (const state_id_type& x);

    // Constructors.
    //
    NTF_state_changed (const sender_type&,
                       const state_id_type&);

    NTF_state_changed (const ::xercesc::DOMElement& e,
                       ::xml_schema::flags f = 0,
                       ::xml_schema::container* c = 0);

    NTF_state_changed (const NTF_state_changed& x,
                       ::xml_schema::flags f = 0,
                       ::xml_schema::container* c = 0);

    virtual NTF_state_changed*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    NTF_state_changed&
    operator= (const NTF_state_changed& x);

    virtual 
    ~NTF_state_changed ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ::xsd::cxx::tree::one< sender_type > sender_;
    ::xsd::cxx::tree::one< state_id_type > state_id_;
  };

  class RSP_log_ack: public ::xml_schema::type
  {
    public:
    // sender
    //
    typedef ::xml_schema::unsigned_byte sender_type;
    typedef ::xsd::cxx::tree::traits< sender_type, char > sender_traits;

    const sender_type&
    sender () const;

    sender_type&
    sender ();

    void
    sender (const sender_type& x);

    // length
    //
    typedef ::xml_schema::unsigned_int length_type;
    typedef ::xsd::cxx::tree::traits< length_type, char > length_traits;

    const length_type&
    length () const;

    length_type&
    length ();

    void
    length (const length_type& x);

    // Constructors.
    //
    RSP_log_ack (const sender_type&,
                 const length_type&);

    RSP_log_ack (const ::xercesc::DOMElement& e,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

    RSP_log_ack (const RSP_log_ack& x,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

    virtual RSP_log_ack*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    RSP_log_ack&
    operator= (const RSP_log_ack& x);

    virtual 
    ~RSP_log_ack ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ::xsd::cxx::tree::one< sender_type > sender_;
    ::xsd::cxx::tree::one< length_type > length_;
  };

  class NTF_log: public ::xml_schema::type
  {
    public:
    // sender
    //
    typedef ::xml_schema::unsigned_byte sender_type;
    typedef ::xsd::cxx::tree::traits< sender_type, char > sender_traits;

    const sender_type&
    sender () const;

    sender_type&
    sender ();

    void
    sender (const sender_type& x);

    // length
    //
    typedef ::xml_schema::unsigned_int length_type;
    typedef ::xsd::cxx::tree::traits< length_type, char > length_traits;

    const length_type&
    length () const;

    length_type&
    length ();

    void
    length (const length_type& x);

    // Constructors.
    //
    NTF_log (const sender_type&,
             const length_type&);

    NTF_log (const ::xercesc::DOMElement& e,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

    NTF_log (const NTF_log& x,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

    virtual NTF_log*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    NTF_log&
    operator= (const NTF_log& x);

    virtual 
    ~NTF_log ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ::xsd::cxx::tree::one< sender_type > sender_;
    ::xsd::cxx::tree::one< length_type > length_;
  };

  class DAT_input_output3: public ::xml_schema::type
  {
    public:
    // ReceivingPayloadField
    //
    typedef ::DcpTestSuite::ReceivingPayloadField ReceivingPayloadField_type;
    typedef ::xsd::cxx::tree::sequence< ReceivingPayloadField_type > ReceivingPayloadField_sequence;
    typedef ReceivingPayloadField_sequence::iterator ReceivingPayloadField_iterator;
    typedef ReceivingPayloadField_sequence::const_iterator ReceivingPayloadField_const_iterator;
    typedef ::xsd::cxx::tree::traits< ReceivingPayloadField_type, char > ReceivingPayloadField_traits;

    const ReceivingPayloadField_sequence&
    ReceivingPayloadField () const;

    ReceivingPayloadField_sequence&
    ReceivingPayloadField ();

    void
    ReceivingPayloadField (const ReceivingPayloadField_sequence& s);

    // data_id
    //
    typedef ::xml_schema::unsigned_short data_id_type;
    typedef ::xsd::cxx::tree::traits< data_id_type, char > data_id_traits;

    const data_id_type&
    data_id () const;

    data_id_type&
    data_id ();

    void
    data_id (const data_id_type& x);

    // Constructors.
    //
    DAT_input_output3 (const data_id_type&);

    DAT_input_output3 (const ::xercesc::DOMElement& e,
                       ::xml_schema::flags f = 0,
                       ::xml_schema::container* c = 0);

    DAT_input_output3 (const DAT_input_output3& x,
                       ::xml_schema::flags f = 0,
                       ::xml_schema::container* c = 0);

    virtual DAT_input_output3*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    DAT_input_output3&
    operator= (const DAT_input_output3& x);

    virtual 
    ~DAT_input_output3 ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ReceivingPayloadField_sequence ReceivingPayloadField_;
    ::xsd::cxx::tree::one< data_id_type > data_id_;
  };

  class DAT_parameter3: public ::xml_schema::type
  {
    public:
    // ReceivingPayloadField
    //
    typedef ::DcpTestSuite::ReceivingPayloadField ReceivingPayloadField_type;
    typedef ::xsd::cxx::tree::sequence< ReceivingPayloadField_type > ReceivingPayloadField_sequence;
    typedef ReceivingPayloadField_sequence::iterator ReceivingPayloadField_iterator;
    typedef ReceivingPayloadField_sequence::const_iterator ReceivingPayloadField_const_iterator;
    typedef ::xsd::cxx::tree::traits< ReceivingPayloadField_type, char > ReceivingPayloadField_traits;

    const ReceivingPayloadField_sequence&
    ReceivingPayloadField () const;

    ReceivingPayloadField_sequence&
    ReceivingPayloadField ();

    void
    ReceivingPayloadField (const ReceivingPayloadField_sequence& s);

    // param_id
    //
    typedef ::xml_schema::unsigned_short param_id_type;
    typedef ::xsd::cxx::tree::traits< param_id_type, char > param_id_traits;

    const param_id_type&
    param_id () const;

    param_id_type&
    param_id ();

    void
    param_id (const param_id_type& x);

    // Constructors.
    //
    DAT_parameter3 (const param_id_type&);

    DAT_parameter3 (const ::xercesc::DOMElement& e,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

    DAT_parameter3 (const DAT_parameter3& x,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

    virtual DAT_parameter3*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    DAT_parameter3&
    operator= (const DAT_parameter3& x);

    virtual 
    ~DAT_parameter3 ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ReceivingPayloadField_sequence ReceivingPayloadField_;
    ::xsd::cxx::tree::one< param_id_type > param_id_;
  };

  class AvailablePortRange: public ::xml_schema::type
  {
    public:
    // from
    //
    typedef ::xml_schema::unsigned_short from_type;
    typedef ::xsd::cxx::tree::traits< from_type, char > from_traits;

    const from_type&
    from () const;

    from_type&
    from ();

    void
    from (const from_type& x);

    // to
    //
    typedef ::xml_schema::unsigned_short to_type;
    typedef ::xsd::cxx::tree::traits< to_type, char > to_traits;

    const to_type&
    to () const;

    to_type&
    to ();

    void
    to (const to_type& x);

    // Constructors.
    //
    AvailablePortRange (const from_type&,
                        const to_type&);

    AvailablePortRange (const ::xercesc::DOMElement& e,
                        ::xml_schema::flags f = 0,
                        ::xml_schema::container* c = 0);

    AvailablePortRange (const AvailablePortRange& x,
                        ::xml_schema::flags f = 0,
                        ::xml_schema::container* c = 0);

    virtual AvailablePortRange*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    AvailablePortRange&
    operator= (const AvailablePortRange& x);

    virtual 
    ~AvailablePortRange ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ::xsd::cxx::tree::one< from_type > from_;
    ::xsd::cxx::tree::one< to_type > to_;
  };

  class AvailablePort: public ::xml_schema::type
  {
    public:
    // port
    //
    typedef ::xml_schema::unsigned_short port_type;
    typedef ::xsd::cxx::tree::traits< port_type, char > port_traits;

    const port_type&
    port () const;

    port_type&
    port ();

    void
    port (const port_type& x);

    // Constructors.
    //
    AvailablePort (const port_type&);

    AvailablePort (const ::xercesc::DOMElement& e,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

    AvailablePort (const AvailablePort& x,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

    virtual AvailablePort*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    AvailablePort&
    operator= (const AvailablePort& x);

    virtual 
    ~AvailablePort ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ::xsd::cxx::tree::one< port_type > port_;
  };

  class direction: public ::xml_schema::string
  {
    public:
    enum value
    {
      In,
      Out
    };

    direction (value v);

    direction (const char* v);

    direction (const ::std::string& v);

    direction (const ::xml_schema::string& v);

    direction (const ::xercesc::DOMElement& e,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

    direction (const ::xercesc::DOMAttr& a,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

    direction (const ::std::string& s,
               const ::xercesc::DOMElement* e,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

    direction (const direction& x,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

    virtual direction*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    direction&
    operator= (value v);

    virtual
    operator value () const
    {
      return _xsd_direction_convert ();
    }

    protected:
    value
    _xsd_direction_convert () const;

    public:
    static const char* const _xsd_direction_literals_[2];
    static const value _xsd_direction_indexes_[2];
  };

  class bd_addr: public ::xml_schema::string
  {
    public:
    // Constructors.
    //
    bd_addr ();

    bd_addr (const char*);

    bd_addr (const ::std::string&);

    bd_addr (const ::xml_schema::string&);

    bd_addr (const ::xercesc::DOMElement& e,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

    bd_addr (const ::xercesc::DOMAttr& a,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

    bd_addr (const ::std::string& s,
             const ::xercesc::DOMElement* e,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

    bd_addr (const bd_addr& x,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

    virtual bd_addr*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~bd_addr ();
  };

  class port: public ::xsd::cxx::tree::fundamental_base< ::xml_schema::unsigned_byte, char, ::xml_schema::simple_type >
  {
    public:
    // Constructors.
    //
    port (const ::xml_schema::unsigned_byte&);

    port (const ::xercesc::DOMElement& e,
          ::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0);

    port (const ::xercesc::DOMAttr& a,
          ::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0);

    port (const ::std::string& s,
          const ::xercesc::DOMElement* e,
          ::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0);

    port (const port& x,
          ::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0);

    virtual port*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~port ();
  };

  class slave_uuid: public ::xml_schema::string
  {
    public:
    // Constructors.
    //
    slave_uuid ();

    slave_uuid (const char*);

    slave_uuid (const ::std::string&);

    slave_uuid (const ::xml_schema::string&);

    slave_uuid (const ::xercesc::DOMElement& e,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

    slave_uuid (const ::xercesc::DOMAttr& a,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

    slave_uuid (const ::std::string& s,
                const ::xercesc::DOMElement* e,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

    slave_uuid (const slave_uuid& x,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

    virtual slave_uuid*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~slave_uuid ();
  };

  class Payload: public ::xml_schema::type
  {
    public:
    // Int8
    //
    typedef ::DcpTestSuite::Int82 Int8_type;
    typedef ::xsd::cxx::tree::optional< Int8_type > Int8_optional;
    typedef ::xsd::cxx::tree::traits< Int8_type, char > Int8_traits;

    const Int8_optional&
    Int8 () const;

    Int8_optional&
    Int8 ();

    void
    Int8 (const Int8_type& x);

    void
    Int8 (const Int8_optional& x);

    void
    Int8 (::std::auto_ptr< Int8_type > p);

    // Int16
    //
    typedef ::DcpTestSuite::Int162 Int16_type;
    typedef ::xsd::cxx::tree::optional< Int16_type > Int16_optional;
    typedef ::xsd::cxx::tree::traits< Int16_type, char > Int16_traits;

    const Int16_optional&
    Int16 () const;

    Int16_optional&
    Int16 ();

    void
    Int16 (const Int16_type& x);

    void
    Int16 (const Int16_optional& x);

    void
    Int16 (::std::auto_ptr< Int16_type > p);

    // Int32
    //
    typedef ::DcpTestSuite::Int322 Int32_type;
    typedef ::xsd::cxx::tree::optional< Int32_type > Int32_optional;
    typedef ::xsd::cxx::tree::traits< Int32_type, char > Int32_traits;

    const Int32_optional&
    Int32 () const;

    Int32_optional&
    Int32 ();

    void
    Int32 (const Int32_type& x);

    void
    Int32 (const Int32_optional& x);

    void
    Int32 (::std::auto_ptr< Int32_type > p);

    // Int64
    //
    typedef ::DcpTestSuite::Int642 Int64_type;
    typedef ::xsd::cxx::tree::optional< Int64_type > Int64_optional;
    typedef ::xsd::cxx::tree::traits< Int64_type, char > Int64_traits;

    const Int64_optional&
    Int64 () const;

    Int64_optional&
    Int64 ();

    void
    Int64 (const Int64_type& x);

    void
    Int64 (const Int64_optional& x);

    void
    Int64 (::std::auto_ptr< Int64_type > p);

    // Uint8
    //
    typedef ::DcpTestSuite::Uint82 Uint8_type;
    typedef ::xsd::cxx::tree::optional< Uint8_type > Uint8_optional;
    typedef ::xsd::cxx::tree::traits< Uint8_type, char > Uint8_traits;

    const Uint8_optional&
    Uint8 () const;

    Uint8_optional&
    Uint8 ();

    void
    Uint8 (const Uint8_type& x);

    void
    Uint8 (const Uint8_optional& x);

    void
    Uint8 (::std::auto_ptr< Uint8_type > p);

    // Uint16
    //
    typedef ::DcpTestSuite::Uint162 Uint16_type;
    typedef ::xsd::cxx::tree::optional< Uint16_type > Uint16_optional;
    typedef ::xsd::cxx::tree::traits< Uint16_type, char > Uint16_traits;

    const Uint16_optional&
    Uint16 () const;

    Uint16_optional&
    Uint16 ();

    void
    Uint16 (const Uint16_type& x);

    void
    Uint16 (const Uint16_optional& x);

    void
    Uint16 (::std::auto_ptr< Uint16_type > p);

    // Uint32
    //
    typedef ::DcpTestSuite::Uint322 Uint32_type;
    typedef ::xsd::cxx::tree::optional< Uint32_type > Uint32_optional;
    typedef ::xsd::cxx::tree::traits< Uint32_type, char > Uint32_traits;

    const Uint32_optional&
    Uint32 () const;

    Uint32_optional&
    Uint32 ();

    void
    Uint32 (const Uint32_type& x);

    void
    Uint32 (const Uint32_optional& x);

    void
    Uint32 (::std::auto_ptr< Uint32_type > p);

    // Uint64
    //
    typedef ::DcpTestSuite::Uint642 Uint64_type;
    typedef ::xsd::cxx::tree::optional< Uint64_type > Uint64_optional;
    typedef ::xsd::cxx::tree::traits< Uint64_type, char > Uint64_traits;

    const Uint64_optional&
    Uint64 () const;

    Uint64_optional&
    Uint64 ();

    void
    Uint64 (const Uint64_type& x);

    void
    Uint64 (const Uint64_optional& x);

    void
    Uint64 (::std::auto_ptr< Uint64_type > p);

    // Float32
    //
    typedef ::DcpTestSuite::Float322 Float32_type;
    typedef ::xsd::cxx::tree::optional< Float32_type > Float32_optional;
    typedef ::xsd::cxx::tree::traits< Float32_type, char > Float32_traits;

    const Float32_optional&
    Float32 () const;

    Float32_optional&
    Float32 ();

    void
    Float32 (const Float32_type& x);

    void
    Float32 (const Float32_optional& x);

    void
    Float32 (::std::auto_ptr< Float32_type > p);

    // Float64
    //
    typedef ::DcpTestSuite::Float642 Float64_type;
    typedef ::xsd::cxx::tree::optional< Float64_type > Float64_optional;
    typedef ::xsd::cxx::tree::traits< Float64_type, char > Float64_traits;

    const Float64_optional&
    Float64 () const;

    Float64_optional&
    Float64 ();

    void
    Float64 (const Float64_type& x);

    void
    Float64 (const Float64_optional& x);

    void
    Float64 (::std::auto_ptr< Float64_type > p);

    // String
    //
    typedef ::DcpTestSuite::String String_type;
    typedef ::xsd::cxx::tree::optional< String_type > String_optional;
    typedef ::xsd::cxx::tree::traits< String_type, char > String_traits;

    const String_optional&
    String () const;

    String_optional&
    String ();

    void
    String (const String_type& x);

    void
    String (const String_optional& x);

    void
    String (::std::auto_ptr< String_type > p);

    // Binary
    //
    typedef ::DcpTestSuite::Binary Binary_type;
    typedef ::xsd::cxx::tree::optional< Binary_type > Binary_optional;
    typedef ::xsd::cxx::tree::traits< Binary_type, char > Binary_traits;

    const Binary_optional&
    Binary () const;

    Binary_optional&
    Binary ();

    void
    Binary (const Binary_type& x);

    void
    Binary (const Binary_optional& x);

    void
    Binary (::std::auto_ptr< Binary_type > p);

    // Constructors.
    //
    Payload ();

    Payload (const ::xercesc::DOMElement& e,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

    Payload (const Payload& x,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

    virtual Payload*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    Payload&
    operator= (const Payload& x);

    virtual 
    ~Payload ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    Int8_optional Int8_;
    Int16_optional Int16_;
    Int32_optional Int32_;
    Int64_optional Int64_;
    Uint8_optional Uint8_;
    Uint16_optional Uint16_;
    Uint32_optional Uint32_;
    Uint64_optional Uint64_;
    Float32_optional Float32_;
    Float64_optional Float64_;
    String_optional String_;
    Binary_optional Binary_;
  };

  class Int82: public ::xml_schema::type
  {
    public:
    // value
    //
    typedef ::DcpTestSuite::value20 value_type;
    typedef ::xsd::cxx::tree::traits< value_type, char > value_traits;

    const value_type&
    value () const;

    value_type&
    value ();

    void
    value (const value_type& x);

    void
    value (::std::auto_ptr< value_type > p);

    // Constructors.
    //
    Int82 (const value_type&);

    Int82 (const ::xercesc::DOMElement& e,
           ::xml_schema::flags f = 0,
           ::xml_schema::container* c = 0);

    Int82 (const Int82& x,
           ::xml_schema::flags f = 0,
           ::xml_schema::container* c = 0);

    virtual Int82*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    Int82&
    operator= (const Int82& x);

    virtual 
    ~Int82 ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ::xsd::cxx::tree::one< value_type > value_;
  };

  class Int162: public ::xml_schema::type
  {
    public:
    // value
    //
    typedef ::DcpTestSuite::value21 value_type;
    typedef ::xsd::cxx::tree::traits< value_type, char > value_traits;

    const value_type&
    value () const;

    value_type&
    value ();

    void
    value (const value_type& x);

    void
    value (::std::auto_ptr< value_type > p);

    // Constructors.
    //
    Int162 (const value_type&);

    Int162 (const ::xercesc::DOMElement& e,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

    Int162 (const Int162& x,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

    virtual Int162*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    Int162&
    operator= (const Int162& x);

    virtual 
    ~Int162 ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ::xsd::cxx::tree::one< value_type > value_;
  };

  class Int322: public ::xml_schema::type
  {
    public:
    // value
    //
    typedef ::DcpTestSuite::value22 value_type;
    typedef ::xsd::cxx::tree::traits< value_type, char > value_traits;

    const value_type&
    value () const;

    value_type&
    value ();

    void
    value (const value_type& x);

    void
    value (::std::auto_ptr< value_type > p);

    // Constructors.
    //
    Int322 (const value_type&);

    Int322 (const ::xercesc::DOMElement& e,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

    Int322 (const Int322& x,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

    virtual Int322*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    Int322&
    operator= (const Int322& x);

    virtual 
    ~Int322 ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ::xsd::cxx::tree::one< value_type > value_;
  };

  class Int642: public ::xml_schema::type
  {
    public:
    // value
    //
    typedef ::DcpTestSuite::value23 value_type;
    typedef ::xsd::cxx::tree::traits< value_type, char > value_traits;

    const value_type&
    value () const;

    value_type&
    value ();

    void
    value (const value_type& x);

    void
    value (::std::auto_ptr< value_type > p);

    // Constructors.
    //
    Int642 (const value_type&);

    Int642 (const ::xercesc::DOMElement& e,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

    Int642 (const Int642& x,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

    virtual Int642*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    Int642&
    operator= (const Int642& x);

    virtual 
    ~Int642 ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ::xsd::cxx::tree::one< value_type > value_;
  };

  class Uint82: public ::xml_schema::type
  {
    public:
    // value
    //
    typedef ::DcpTestSuite::value24 value_type;
    typedef ::xsd::cxx::tree::traits< value_type, char > value_traits;

    const value_type&
    value () const;

    value_type&
    value ();

    void
    value (const value_type& x);

    void
    value (::std::auto_ptr< value_type > p);

    // Constructors.
    //
    Uint82 (const value_type&);

    Uint82 (const ::xercesc::DOMElement& e,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

    Uint82 (const Uint82& x,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

    virtual Uint82*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    Uint82&
    operator= (const Uint82& x);

    virtual 
    ~Uint82 ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ::xsd::cxx::tree::one< value_type > value_;
  };

  class Uint162: public ::xml_schema::type
  {
    public:
    // value
    //
    typedef ::DcpTestSuite::value25 value_type;
    typedef ::xsd::cxx::tree::traits< value_type, char > value_traits;

    const value_type&
    value () const;

    value_type&
    value ();

    void
    value (const value_type& x);

    void
    value (::std::auto_ptr< value_type > p);

    // Constructors.
    //
    Uint162 (const value_type&);

    Uint162 (const ::xercesc::DOMElement& e,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

    Uint162 (const Uint162& x,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

    virtual Uint162*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    Uint162&
    operator= (const Uint162& x);

    virtual 
    ~Uint162 ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ::xsd::cxx::tree::one< value_type > value_;
  };

  class Uint322: public ::xml_schema::type
  {
    public:
    // value
    //
    typedef ::DcpTestSuite::value26 value_type;
    typedef ::xsd::cxx::tree::traits< value_type, char > value_traits;

    const value_type&
    value () const;

    value_type&
    value ();

    void
    value (const value_type& x);

    void
    value (::std::auto_ptr< value_type > p);

    // Constructors.
    //
    Uint322 (const value_type&);

    Uint322 (const ::xercesc::DOMElement& e,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

    Uint322 (const Uint322& x,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

    virtual Uint322*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    Uint322&
    operator= (const Uint322& x);

    virtual 
    ~Uint322 ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ::xsd::cxx::tree::one< value_type > value_;
  };

  class Uint642: public ::xml_schema::type
  {
    public:
    // value
    //
    typedef ::DcpTestSuite::value27 value_type;
    typedef ::xsd::cxx::tree::traits< value_type, char > value_traits;

    const value_type&
    value () const;

    value_type&
    value ();

    void
    value (const value_type& x);

    void
    value (::std::auto_ptr< value_type > p);

    // Constructors.
    //
    Uint642 (const value_type&);

    Uint642 (const ::xercesc::DOMElement& e,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

    Uint642 (const Uint642& x,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

    virtual Uint642*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    Uint642&
    operator= (const Uint642& x);

    virtual 
    ~Uint642 ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ::xsd::cxx::tree::one< value_type > value_;
  };

  class Float322: public ::xml_schema::type
  {
    public:
    // value
    //
    typedef ::DcpTestSuite::value28 value_type;
    typedef ::xsd::cxx::tree::traits< value_type, char > value_traits;

    const value_type&
    value () const;

    value_type&
    value ();

    void
    value (const value_type& x);

    void
    value (::std::auto_ptr< value_type > p);

    // Constructors.
    //
    Float322 (const value_type&);

    Float322 (const ::xercesc::DOMElement& e,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

    Float322 (const Float322& x,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

    virtual Float322*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    Float322&
    operator= (const Float322& x);

    virtual 
    ~Float322 ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ::xsd::cxx::tree::one< value_type > value_;
  };

  class Float642: public ::xml_schema::type
  {
    public:
    // value
    //
    typedef ::DcpTestSuite::value29 value_type;
    typedef ::xsd::cxx::tree::traits< value_type, char > value_traits;

    const value_type&
    value () const;

    value_type&
    value ();

    void
    value (const value_type& x);

    void
    value (::std::auto_ptr< value_type > p);

    // Constructors.
    //
    Float642 (const value_type&);

    Float642 (const ::xercesc::DOMElement& e,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

    Float642 (const Float642& x,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

    virtual Float642*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    Float642&
    operator= (const Float642& x);

    virtual 
    ~Float642 ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ::xsd::cxx::tree::one< value_type > value_;
  };

  class value20: public ::xml_schema::simple_type,
    public ::xsd::cxx::tree::list< ::xml_schema::byte, char >
  {
    public:
    value20 ();

    value20 (size_type n, const ::xml_schema::byte& x);

    template < typename I >
    value20 (const I& begin, const I& end)
    : ::xsd::cxx::tree::list< ::xml_schema::byte, char > (begin, end, this)
    {
    }

    value20 (const ::xercesc::DOMElement& e,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

    value20 (const ::xercesc::DOMAttr& a,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

    value20 (const ::std::string& s,
             const ::xercesc::DOMElement* e,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

    value20 (const value20& x,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

    virtual value20*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~value20 ();
  };

  class value21: public ::xml_schema::simple_type,
    public ::xsd::cxx::tree::list< ::xml_schema::short_, char >
  {
    public:
    value21 ();

    value21 (size_type n, const ::xml_schema::short_& x);

    template < typename I >
    value21 (const I& begin, const I& end)
    : ::xsd::cxx::tree::list< ::xml_schema::short_, char > (begin, end, this)
    {
    }

    value21 (const ::xercesc::DOMElement& e,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

    value21 (const ::xercesc::DOMAttr& a,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

    value21 (const ::std::string& s,
             const ::xercesc::DOMElement* e,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

    value21 (const value21& x,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

    virtual value21*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~value21 ();
  };

  class value22: public ::xml_schema::simple_type,
    public ::xsd::cxx::tree::list< ::xml_schema::int_, char >
  {
    public:
    value22 ();

    value22 (size_type n, const ::xml_schema::int_& x);

    template < typename I >
    value22 (const I& begin, const I& end)
    : ::xsd::cxx::tree::list< ::xml_schema::int_, char > (begin, end, this)
    {
    }

    value22 (const ::xercesc::DOMElement& e,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

    value22 (const ::xercesc::DOMAttr& a,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

    value22 (const ::std::string& s,
             const ::xercesc::DOMElement* e,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

    value22 (const value22& x,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

    virtual value22*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~value22 ();
  };

  class value23: public ::xml_schema::simple_type,
    public ::xsd::cxx::tree::list< ::xml_schema::long_, char >
  {
    public:
    value23 ();

    value23 (size_type n, const ::xml_schema::long_& x);

    template < typename I >
    value23 (const I& begin, const I& end)
    : ::xsd::cxx::tree::list< ::xml_schema::long_, char > (begin, end, this)
    {
    }

    value23 (const ::xercesc::DOMElement& e,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

    value23 (const ::xercesc::DOMAttr& a,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

    value23 (const ::std::string& s,
             const ::xercesc::DOMElement* e,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

    value23 (const value23& x,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

    virtual value23*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~value23 ();
  };

  class value24: public ::xml_schema::simple_type,
    public ::xsd::cxx::tree::list< ::xml_schema::unsigned_byte, char >
  {
    public:
    value24 ();

    value24 (size_type n, const ::xml_schema::unsigned_byte& x);

    template < typename I >
    value24 (const I& begin, const I& end)
    : ::xsd::cxx::tree::list< ::xml_schema::unsigned_byte, char > (begin, end, this)
    {
    }

    value24 (const ::xercesc::DOMElement& e,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

    value24 (const ::xercesc::DOMAttr& a,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

    value24 (const ::std::string& s,
             const ::xercesc::DOMElement* e,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

    value24 (const value24& x,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

    virtual value24*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~value24 ();
  };

  class value25: public ::xml_schema::simple_type,
    public ::xsd::cxx::tree::list< ::xml_schema::unsigned_short, char >
  {
    public:
    value25 ();

    value25 (size_type n, const ::xml_schema::unsigned_short& x);

    template < typename I >
    value25 (const I& begin, const I& end)
    : ::xsd::cxx::tree::list< ::xml_schema::unsigned_short, char > (begin, end, this)
    {
    }

    value25 (const ::xercesc::DOMElement& e,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

    value25 (const ::xercesc::DOMAttr& a,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

    value25 (const ::std::string& s,
             const ::xercesc::DOMElement* e,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

    value25 (const value25& x,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

    virtual value25*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~value25 ();
  };

  class value26: public ::xml_schema::simple_type,
    public ::xsd::cxx::tree::list< ::xml_schema::unsigned_int, char >
  {
    public:
    value26 ();

    value26 (size_type n, const ::xml_schema::unsigned_int& x);

    template < typename I >
    value26 (const I& begin, const I& end)
    : ::xsd::cxx::tree::list< ::xml_schema::unsigned_int, char > (begin, end, this)
    {
    }

    value26 (const ::xercesc::DOMElement& e,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

    value26 (const ::xercesc::DOMAttr& a,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

    value26 (const ::std::string& s,
             const ::xercesc::DOMElement* e,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

    value26 (const value26& x,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

    virtual value26*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~value26 ();
  };

  class value27: public ::xml_schema::simple_type,
    public ::xsd::cxx::tree::list< ::xml_schema::unsigned_long, char >
  {
    public:
    value27 ();

    value27 (size_type n, const ::xml_schema::unsigned_long& x);

    template < typename I >
    value27 (const I& begin, const I& end)
    : ::xsd::cxx::tree::list< ::xml_schema::unsigned_long, char > (begin, end, this)
    {
    }

    value27 (const ::xercesc::DOMElement& e,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

    value27 (const ::xercesc::DOMAttr& a,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

    value27 (const ::std::string& s,
             const ::xercesc::DOMElement* e,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

    value27 (const value27& x,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

    virtual value27*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~value27 ();
  };

  class value28: public ::xml_schema::simple_type,
    public ::xsd::cxx::tree::list< ::xml_schema::float_, char >
  {
    public:
    value28 ();

    value28 (size_type n, const ::xml_schema::float_& x);

    template < typename I >
    value28 (const I& begin, const I& end)
    : ::xsd::cxx::tree::list< ::xml_schema::float_, char > (begin, end, this)
    {
    }

    value28 (const ::xercesc::DOMElement& e,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

    value28 (const ::xercesc::DOMAttr& a,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

    value28 (const ::std::string& s,
             const ::xercesc::DOMElement* e,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

    value28 (const value28& x,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

    virtual value28*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~value28 ();
  };

  class value29: public ::xml_schema::simple_type,
    public ::xsd::cxx::tree::list< ::xml_schema::double_, char, ::xsd::cxx::tree::schema_type::double_ >
  {
    public:
    value29 ();

    value29 (size_type n, const ::xml_schema::double_& x);

    template < typename I >
    value29 (const I& begin, const I& end)
    : ::xsd::cxx::tree::list< ::xml_schema::double_, char, ::xsd::cxx::tree::schema_type::double_ > (begin, end, this)
    {
    }

    value29 (const ::xercesc::DOMElement& e,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

    value29 (const ::xercesc::DOMAttr& a,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

    value29 (const ::std::string& s,
             const ::xercesc::DOMElement* e,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

    value29 (const value29& x,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

    virtual value29*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~value29 ();
  };
}

#include <iosfwd>

#include <xercesc/sax/InputSource.hpp>
#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>

namespace DcpTestSuite
{
  // Parse a URI or a local file.
  //

  ::std::auto_ptr< ::DcpTestSuite::DcpTestProcedure >
  DcpTestProcedure_ (const ::std::string& uri,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::DcpTestSuite::DcpTestProcedure >
  DcpTestProcedure_ (const ::std::string& uri,
                     ::xml_schema::error_handler& eh,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::DcpTestSuite::DcpTestProcedure >
  DcpTestProcedure_ (const ::std::string& uri,
                     ::xercesc::DOMErrorHandler& eh,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::auto_ptr< ::DcpTestSuite::DcpTestProcedure >
  DcpTestProcedure_ (::std::istream& is,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::DcpTestSuite::DcpTestProcedure >
  DcpTestProcedure_ (::std::istream& is,
                     ::xml_schema::error_handler& eh,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::DcpTestSuite::DcpTestProcedure >
  DcpTestProcedure_ (::std::istream& is,
                     ::xercesc::DOMErrorHandler& eh,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::DcpTestSuite::DcpTestProcedure >
  DcpTestProcedure_ (::std::istream& is,
                     const ::std::string& id,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::DcpTestSuite::DcpTestProcedure >
  DcpTestProcedure_ (::std::istream& is,
                     const ::std::string& id,
                     ::xml_schema::error_handler& eh,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::DcpTestSuite::DcpTestProcedure >
  DcpTestProcedure_ (::std::istream& is,
                     const ::std::string& id,
                     ::xercesc::DOMErrorHandler& eh,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::auto_ptr< ::DcpTestSuite::DcpTestProcedure >
  DcpTestProcedure_ (::xercesc::InputSource& is,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::DcpTestSuite::DcpTestProcedure >
  DcpTestProcedure_ (::xercesc::InputSource& is,
                     ::xml_schema::error_handler& eh,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::DcpTestSuite::DcpTestProcedure >
  DcpTestProcedure_ (::xercesc::InputSource& is,
                     ::xercesc::DOMErrorHandler& eh,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::auto_ptr< ::DcpTestSuite::DcpTestProcedure >
  DcpTestProcedure_ (const ::xercesc::DOMDocument& d,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::DcpTestSuite::DcpTestProcedure >
  DcpTestProcedure_ (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::auto_ptr< ::DcpTestSuite::SendingPayloadField >
  SendingPayloadField_ (const ::std::string& uri,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::DcpTestSuite::SendingPayloadField >
  SendingPayloadField_ (const ::std::string& uri,
                        ::xml_schema::error_handler& eh,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::DcpTestSuite::SendingPayloadField >
  SendingPayloadField_ (const ::std::string& uri,
                        ::xercesc::DOMErrorHandler& eh,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::auto_ptr< ::DcpTestSuite::SendingPayloadField >
  SendingPayloadField_ (::std::istream& is,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::DcpTestSuite::SendingPayloadField >
  SendingPayloadField_ (::std::istream& is,
                        ::xml_schema::error_handler& eh,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::DcpTestSuite::SendingPayloadField >
  SendingPayloadField_ (::std::istream& is,
                        ::xercesc::DOMErrorHandler& eh,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::DcpTestSuite::SendingPayloadField >
  SendingPayloadField_ (::std::istream& is,
                        const ::std::string& id,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::DcpTestSuite::SendingPayloadField >
  SendingPayloadField_ (::std::istream& is,
                        const ::std::string& id,
                        ::xml_schema::error_handler& eh,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::DcpTestSuite::SendingPayloadField >
  SendingPayloadField_ (::std::istream& is,
                        const ::std::string& id,
                        ::xercesc::DOMErrorHandler& eh,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::auto_ptr< ::DcpTestSuite::SendingPayloadField >
  SendingPayloadField_ (::xercesc::InputSource& is,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::DcpTestSuite::SendingPayloadField >
  SendingPayloadField_ (::xercesc::InputSource& is,
                        ::xml_schema::error_handler& eh,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::DcpTestSuite::SendingPayloadField >
  SendingPayloadField_ (::xercesc::InputSource& is,
                        ::xercesc::DOMErrorHandler& eh,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::auto_ptr< ::DcpTestSuite::SendingPayloadField >
  SendingPayloadField_ (const ::xercesc::DOMDocument& d,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::DcpTestSuite::SendingPayloadField >
  SendingPayloadField_ (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::auto_ptr< ::DcpTestSuite::ReceivingPayloadField >
  ReceivingPayloadField_ (const ::std::string& uri,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::DcpTestSuite::ReceivingPayloadField >
  ReceivingPayloadField_ (const ::std::string& uri,
                          ::xml_schema::error_handler& eh,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::DcpTestSuite::ReceivingPayloadField >
  ReceivingPayloadField_ (const ::std::string& uri,
                          ::xercesc::DOMErrorHandler& eh,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::auto_ptr< ::DcpTestSuite::ReceivingPayloadField >
  ReceivingPayloadField_ (::std::istream& is,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::DcpTestSuite::ReceivingPayloadField >
  ReceivingPayloadField_ (::std::istream& is,
                          ::xml_schema::error_handler& eh,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::DcpTestSuite::ReceivingPayloadField >
  ReceivingPayloadField_ (::std::istream& is,
                          ::xercesc::DOMErrorHandler& eh,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::DcpTestSuite::ReceivingPayloadField >
  ReceivingPayloadField_ (::std::istream& is,
                          const ::std::string& id,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::DcpTestSuite::ReceivingPayloadField >
  ReceivingPayloadField_ (::std::istream& is,
                          const ::std::string& id,
                          ::xml_schema::error_handler& eh,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::DcpTestSuite::ReceivingPayloadField >
  ReceivingPayloadField_ (::std::istream& is,
                          const ::std::string& id,
                          ::xercesc::DOMErrorHandler& eh,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::auto_ptr< ::DcpTestSuite::ReceivingPayloadField >
  ReceivingPayloadField_ (::xercesc::InputSource& is,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::DcpTestSuite::ReceivingPayloadField >
  ReceivingPayloadField_ (::xercesc::InputSource& is,
                          ::xml_schema::error_handler& eh,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::DcpTestSuite::ReceivingPayloadField >
  ReceivingPayloadField_ (::xercesc::InputSource& is,
                          ::xercesc::DOMErrorHandler& eh,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::auto_ptr< ::DcpTestSuite::ReceivingPayloadField >
  ReceivingPayloadField_ (const ::xercesc::DOMDocument& d,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::DcpTestSuite::ReceivingPayloadField >
  ReceivingPayloadField_ (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

#endif // DCP_TEST_PROCEDURE_HXX
